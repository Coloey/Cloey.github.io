<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue中封装axios请求</title>
    <url>/2022/04/11/Vue%E4%B8%AD%E5%B0%81%E8%A3%85axios%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>在src文件夹中新创建一个utils文件夹，创建index.js来实现axios实例，并配置拦截器</p>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ElLoading,ElMessage&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;../router&quot;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span></span><br><span class="line"><span class="keyword">import</span> CHAT <span class="keyword">from</span> <span class="string">&quot;../client&quot;</span></span><br><span class="line"><span class="comment">//const pendingMap=new Map();</span></span><br><span class="line"><span class="comment">//axios.defaults.headers.post[&#x27;Content-Type&#x27;] = &#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;;</span></span><br><span class="line"><span class="comment">//创建一个axios实例</span></span><br><span class="line"><span class="keyword">var</span> instance=axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&quot;http://127.0.0.1:3007&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span>,<span class="comment">//设置超时</span></span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"><span class="comment">//多次请求时</span></span><br><span class="line"><span class="keyword">let</span> requestCount=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//显示Loading</span></span><br><span class="line"><span class="keyword">const</span> showLoading=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(requestCount===<span class="number">0</span>&amp;&amp;!loading)&#123;<span class="comment">//第一次发送请求并且没有loading加载loaing</span></span><br><span class="line">        loading=ElLoading.service(&#123;</span><br><span class="line">            <span class="attr">text</span>:<span class="string">&#x27;Loading&#x27;</span>,</span><br><span class="line">            <span class="attr">background</span>:<span class="string">&#x27;rgba(0,0,0,0.7)&#x27;</span>,</span><br><span class="line">            <span class="attr">spinner</span>:<span class="string">&#x27;el-icon-loading&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    requestCount++;<span class="comment">//多次请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//隐藏loading</span></span><br><span class="line"><span class="keyword">const</span> hideLoading=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    requestCount--;</span><br><span class="line">    <span class="keyword">if</span>(requestCount===<span class="number">0</span>)&#123;</span><br><span class="line">        loading.close()<span class="comment">//直到请求都结束Loading才关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    showLoading()</span><br><span class="line">    <span class="comment">//每次发送请求前判断是否存在token如果存在则在header加上token</span></span><br><span class="line">    <span class="keyword">const</span> token=<span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    token&amp;&amp;(config.headers.Authorization=token)</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    hideLoading()</span><br><span class="line">    <span class="comment">//响应成功</span></span><br><span class="line">   <span class="comment">// console.log(&#x27;拦截器报错&#x27;)</span></span><br><span class="line">   <span class="comment">// console.log(response)</span></span><br><span class="line">    <span class="keyword">const</span> status=response.data.status;</span><br><span class="line">    <span class="keyword">if</span>(status!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//响应成功后如果是登录成功有token把token存储在本地</span></span><br><span class="line">                <span class="keyword">if</span>(response.data.token!=<span class="literal">undefined</span>)<span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;token&#x27;</span>,response.data.token);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:<span class="comment">//获取用户信息成功后存储在localStorage里和store</span></span><br><span class="line">                <span class="built_in">console</span>.log(response.data);</span><br><span class="line">                store.commit(<span class="string">&quot;saveUserInfo&quot;</span>,(response.data).data);</span><br><span class="line">                <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;userInfo&#x27;</span>,<span class="built_in">JSON</span>.stringify((response.data).data));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">401</span>:<span class="comment">//登录过期跳转到登录页面</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">201</span>:<span class="comment">//退出登录清空token跳转登录页面                </span></span><br><span class="line">                <span class="built_in">window</span>.localStorage.removeItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">                <span class="built_in">window</span>.localStorage.removeItem(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">                CHAT.logout();</span><br><span class="line">                router.push(<span class="string">&quot;/login&quot;</span>);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(response.data.message)ElMessage.success(response.data.message)           </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response); </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;       </span><br><span class="line">        ElMessage.error(response.data.message);            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);        </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="comment">//响应错误</span></span><br><span class="line">    <span class="keyword">if</span>(error.response&amp;&amp;error.response.status)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure>

<h2 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h2><p>request.js中使用axios实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> instance <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span></span><br><span class="line"><span class="keyword">const</span> axios=<span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    method,</span></span></span><br><span class="line"><span class="params"><span class="function">    url,</span></span></span><br><span class="line"><span class="params"><span class="function">    data,</span></span></span><br><span class="line"><span class="params"><span class="function">    config</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    method=method.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(method==<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.post(url,data,&#123;...config&#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method==<span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.get(url,&#123;</span><br><span class="line">            <span class="attr">params</span>:data,</span><br><span class="line">            ...config</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method==<span class="string">&#x27;delete&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.delete(url,&#123;</span><br><span class="line">            <span class="attr">params</span>:data,</span><br><span class="line">            ...config</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method==<span class="string">&#x27;put&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.put(url,data,&#123;...config&#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;未知的方法&#x27;</span>+method)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>

<h2 id="api-js"><a href="#api-js" class="headerlink" title="api.js"></a>api.js</h2><p>api.js用来封装各种类型的请求</p>
<p>默认情况下，axios 将 JavaScript 对象序列化为<code>JSON</code>. 要改为以格式发送数据<code>application/x-www-form-urlencoded</code>，我用的是qs.stringfy将数据转换，其他方法可以参考官网</p>
<p>[]: <a href="https://axios-http.com/docs/urlencoded">https://axios-http.com/docs/urlencoded</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/api/login&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:qs.stringify(data),</span><br><span class="line">         </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> register=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/api/register&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:qs.stringify(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/api/logout&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserInfo=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/my/getUserInfo&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updatePassword=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/my/updatePassword&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:qs.stringify(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>打包资源</title>
    <url>/2022/04/10/%E6%89%93%E5%8C%85%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h1 id="打包样式资源"><a href="#打包样式资源" class="headerlink" title="打包样式资源"></a>打包样式资源</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; =<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//输出文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">        <span class="comment">//输出路径,_dirname node.js的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        <span class="attr">path</span>:resolve(__dirname,<span class="string">&#x27;build&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader配置</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//匹配哪些文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">//使用哪些loader</span></span><br><span class="line">            use:[</span><br><span class="line">                <span class="comment">//use数组中loader执行顺序从右到左，从下到上一次执行</span></span><br><span class="line">                <span class="comment">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">//将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span>,<span class="comment">//将less文件编译成css文件</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="打包html资源"><a href="#打包html资源" class="headerlink" title="打包html资源"></a>打包html资源</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; =<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//输出文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">        <span class="comment">//输出路径,_dirname node.js的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        <span class="attr">path</span>:resolve(__dirname,<span class="string">&#x27;build&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader配置</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//匹配哪些文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">//使用哪些loader</span></span><br><span class="line">            use:[</span><br><span class="line">                <span class="comment">//use数组中loader执行顺序从右到左，从下到上一次执行</span></span><br><span class="line">                <span class="comment">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">//将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span>,<span class="comment">//将less文件编译成css文件</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//html-webpack-plugin默认会创建一个空的HTML,自动引入打包输出的所有资源（js/css）</span></span><br><span class="line">        <span class="comment">//需求：需要有结构的HTML文件</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">//模板比对&#x27;src/index.html&#x27;文件，并自动引入打包输出的所有资源(js/css)</span></span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打包图片</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理图片</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>:<span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">              type:<span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>wepack五个核心概念</title>
    <url>/2022/04/10/wepack%E4%BA%94%E4%B8%AA%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="Entry"><a href="#Entry" class="headerlink" title="Entry:"></a>Entry:</h1><p>入口（Entry)指示Webpack以哪个文件为入口起点开始打包</p>
<p>Output:</p>
<p>输出（output)指示Webpack打包后的资源bundle输出到哪里，以及如何命名</p>
<h1 id="Loader"><a href="#Loader" class="headerlink" title="Loader:"></a>Loader:</h1><p>Loader让Webpack能够去处理那些非JavaScript文件（webpack自身只理解JavaScript)</p>
<p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS文件！</p>
<h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins:"></a>Plugins:</h1><p>插件(Plugins)可以用于执行范围更广的任务，插件的范围包括从打包优化到压缩，一直到重新定义环境中的变量等</p>
<h1 id="Mode"><a href="#Mode" class="headerlink" title="Mode:"></a>Mode:</h1><p>模式（Mode）指示Webpack使用相应模式的配置</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>development</td>
<td>会将process.env.NODE_ENV的值设为development,启用NamedChunksPlugin和NamedModulesPlugin</td>
<td>能让代码在本地调试运行的环境</td>
</tr>
<tr>
<td>production</td>
<td>会将 <code>process.env.NODE_ENV</code> 的值设为 <code>production</code>。启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code></td>
<td>能让代码优化上线运行的环境</td>
</tr>
</tbody></table>
<h1 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>webpack  ./src/index.js -o ./build/build.js –mode=development:webpack会以./src/index.js为入口打包文件，打包后输出到./build/build.js，整体打包环境，是开发环境</p>
<h2 id="生成环境"><a href="#生成环境" class="headerlink" title="生成环境"></a>生成环境</h2><p>webpack ./src/index.js-o ./build/build.js –mode=production,webpack会以./src/index.js为入口打包文件，打包后输出到./build/build.js，整体打包环境，是生产环境</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul>
<li>webpack能处理js/json资源，不能处理css/img等其他资源</li>
<li>生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化</li>
<li>生产环境比开发环境多一个压缩的js代码</li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP首部字段</title>
    <url>/2022/04/09/HTTP%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<h1 id="4种HTTP首部字段类型"><a href="#4种HTTP首部字段类型" class="headerlink" title="4种HTTP首部字段类型"></a>4种HTTP首部字段类型</h1><p>通用首部字段：请求报文和响应报文都会使用的首部</p>
<p>请求首部字段：从客户端向服务端发送报文时使用的首部，补充了请求的附加内容，客户端信息，响应内容相关优先级等信息</p>
<p>响应首部字段：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息</p>
<p>实体首部字段：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息</p>
<h1 id="HTTP-1-1通用首部字段"><a href="#HTTP-1-1通用首部字段" class="headerlink" title="HTTP/1.1通用首部字段"></a>HTTP/1.1通用首部字段</h1><h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>通过指定首部字段Cache-Control的指令，就能操作缓存的工作机制。</p>
<blockquote>
<p>Cache-Control:private,max-age=0,no-cache</p>
</blockquote>
<p>缓存请求指令：</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>no-cache</td>
<td>无</td>
<td>强制向源服务器再次验证</td>
</tr>
<tr>
<td>no-store</td>
<td>无</td>
<td>不缓存请求或响应的任何内容</td>
</tr>
<tr>
<td>max-age=([秒])</td>
<td>必需</td>
<td>响应的最大Age值</td>
</tr>
<tr>
<td>max-stale=([秒])</td>
<td>可省略</td>
<td>接收已过期的响应</td>
</tr>
<tr>
<td>min-fresh=[秒]</td>
<td>必需</td>
<td>期望在指定时间内的响应仍有效</td>
</tr>
<tr>
<td>no-transform</td>
<td>无</td>
<td>代理不接更改媒体类型</td>
</tr>
<tr>
<td>only-if-cached</td>
<td>无</td>
<td>从缓存中获取资源</td>
</tr>
<tr>
<td>cache-extension</td>
<td></td>
<td>新指令标记（token)</td>
</tr>
</tbody></table>
<p>缓存响应指令</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>无</td>
<td>可向任意方提供响应的缓存</td>
</tr>
<tr>
<td>private</td>
<td>可省略</td>
<td>仅向特定用户返回响应</td>
</tr>
<tr>
<td>no-cache</td>
<td>可省略</td>
<td>缓存前必须先确认其有效性</td>
</tr>
<tr>
<td>no-store</td>
<td>无</td>
<td>不缓存请求或响应的任何内容</td>
</tr>
<tr>
<td>no-transform</td>
<td>无</td>
<td>代理不接更改媒体类型</td>
</tr>
<tr>
<td>must-revalidate</td>
<td>无</td>
<td>可缓存但必须再向服务器进行确认</td>
</tr>
<tr>
<td>proxy-revalidate</td>
<td>无</td>
<td>要求中间缓存服务器对缓存的响应有效性再进行确认</td>
</tr>
<tr>
<td>max-age=[秒]</td>
<td>必需</td>
<td>响应的最大Age值</td>
</tr>
<tr>
<td>s-maxage=[秒]</td>
<td>必需</td>
<td>公共缓存服务器响应的最大Age值</td>
</tr>
<tr>
<td>cache-extension</td>
<td>-</td>
<td>新指令标记（token)</td>
</tr>
</tbody></table>
<h3 id="no-cache指令"><a href="#no-cache指令" class="headerlink" title="no-cache指令"></a>no-cache指令</h3><p>Cache-Control:no-cache</p>
<p>使用no-cache指令的目的是为了防止从缓存中返回过期的资源，缓存会向源服务器进行有效期的确认后处理资源</p>
<p>客户端：发送的请求中包含no-cache指令，则表示客户端将不会接收缓存过的响应。于是“中间”缓存服务器必须把客户端请求转发给源服务器</p>
<p>服务器：如果服务器返回的响应中包含no-cache指令，那么缓存服务器不能对资源进行缓存，源服务器以后也不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作</p>
<p>Cache-Control:no-cache=Location</p>
<p>由服务器返回的响应中，若报文首部字段Cache-Control中对no-cache字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。相反，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数</p>
<h3 id="no-store指令"><a href="#no-store指令" class="headerlink" title="no-store指令"></a>no-store指令</h3><p>Cache-Control:no-store</p>
<p>当使用no-store指令时，暗示请求（和对应的响应）或响应中包含机密信息，因此该指令规定缓存不能在本地存储请求或响应的任何一部分</p>
<h3 id="s-maxage指令"><a href="#s-maxage指令" class="headerlink" title="s-maxage指令"></a>s-maxage指令</h3><p>Cache-Control:s-maxage=604800(单位：秒)</p>
<p>s-maxage指令的功能和max-age指令相同，不同点在于s-maxage指令只适用于供多位用户使用的公共缓存服务器，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。</p>
<p>当使用s-maxage指令后，则直接忽略对Expires首部字段及max-age指令的处理</p>
<h3 id="max-age指令"><a href="#max-age指令" class="headerlink" title="max-age指令"></a>max-age指令</h3><p>Cache-Control:max-age=604800(单位：秒)</p>
<p>客户端：当客户端发送的请求中包含max-age指令时，如果判定缓存时间的数值比·1指定时间的数值更小，那么客户端就接收缓存的资源。当指定的max-age=0，那么缓存服务器通常将请求转发给源服务器</p>
<p>服务端：服务器返回的响应中包含max-age指令，缓存服务器将不对资源的有效性再作确认，而max-zge数值代表资源保存为缓存的最长时间</p>
<p>⚠应用HTTP/1.1版本的缓存服务器在遇到同时存在Expires首部字段的情况时，会优先处理max-age指令,而忽略Expires首部字段，而HTTP/1.0版本的缓存服务器则相反，max-age指令被忽略</p>
<h3 id="min-fresh指令"><a href="#min-fresh指令" class="headerlink" title="min-fresh指令"></a>min-fresh指令</h3><p>Cache-Control:min-fresh=60</p>
<p>min-fresh指令要求缓存服务器返回至少还未过指定时间的缓存资源。</p>
<h3 id="max-stale指令"><a href="#max-stale指令" class="headerlink" title="max-stale指令"></a>max-stale指令</h3><p>Cache-Control:max-stale=3600</p>
<p>使用max-stale指示缓存资源，即使过期也照常接收</p>
<p>如果指令未指定参数值，那么无论过多久，客户端都会接收响应；如果指令中指定了具体数值，那么即使过期，只要仍处于max-stale指定的时间内仍旧会被客户端接收</p>
<h3 id="only-if-cached指令"><a href="#only-if-cached指令" class="headerlink" title="only-if-cached指令"></a>only-if-cached指令</h3><p>Cache-Control:only-if-cached</p>
<p>表示客户端仅在缓存服务器本地缓存目标资源的情况下才要求其返回。该指令要求服务器不重新加载响应，也不再次确认资源有效性。若请求缓存服务器的本地缓存无响应，则返回状态码504 Gateway Timeout</p>
<h3 id="must-revalidate指令"><a href="#must-revalidate指令" class="headerlink" title="must-revalidate指令"></a>must-revalidate指令</h3><p>Cache-Control:must-revalidate</p>
<p>代理向源服务器再次验证即将返回的响应缓存目前是否仍然有效。如果代理无法连通服务器再次活期有效资源，缓存必须给客户端一条504状态码</p>
<p>使用must-revalidate指令忽略请求的max-stale指令，即使首部使用了max-stale，也不会有效果</p>
<h3 id="proxy-revalidate指令"><a href="#proxy-revalidate指令" class="headerlink" title="proxy-revalidate指令"></a>proxy-revalidate指令</h3><p>Cache-Control：proxy-revalidate</p>
<p>proxy-revalidate要求所有缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性</p>
<h3 id="no-transform指令"><a href="#no-transform指令" class="headerlink" title="no-transform指令"></a>no-transform指令</h3><p>Cache-Control：no-transform</p>
<p>无论·是在请求还是响应中使用，缓存都不能改变实体主体的媒体类型，这样可防止代理压缩图片等类似操作</p>
<h3 id="Cache-Control扩展"><a href="#Cache-Control扩展" class="headerlink" title="Cache-Control扩展"></a>Cache-Control扩展</h3><p>cache-control token</p>
<p>Cache-Control:private,community=”UCI”</p>
<p>通过cache-extension标记可以扩展Cache-Control首部字段内的指令。如例子，Cache-Control首部字段本身没有community这个指令。借助extensions tokens实现了该指令的添加。如果缓存服务器无法理解这个新指令就会直接忽略</p>
<h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>作用：</p>
<ul>
<li>控制不再转发给代理的首部字段</li>
<li>管理持久连接</li>
</ul>
<p>Connection:不再转发的首部字段名</p>
<h3 id="控制不再转发给代理的首部字段"><a href="#控制不再转发给代理的首部字段" class="headerlink" title="控制不再转发给代理的首部字段"></a>控制不再转发给代理的首部字段</h3><p>在客户端发送请求和服务器返回响应内，使用Connection首部字段，可控制不再转发给代理的首部字段</p>
<h3 id="管理持久连接"><a href="#管理持久连接" class="headerlink" title="管理持久连接"></a>管理持久连接</h3><p>Connection:close</p>
<p>HTTP/1.1版本的默认连接是持久连接，为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，指定Connection首部字段为Close</p>
<p>HTTP/1.1之前的版本默认连接是非持久连接。因此，如果想要在旧版本的HTTP协议上维持持续连接，则需要指定Connection为Kepp-Alive</p>
<h2 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h2><p>Pragma是HTTP/1.1之前版本的历史遗留字段，仅作为与HTTP/1.0的向后兼容而定义</p>
<p>Pragma:no-cache</p>
<p>该首部字段属于通用首部字段，但只用在客户端发送请求中。客户端要求所有的中间服务器不返回缓存的资源。所有中间服务器如果都能以HTTP/1.1为基准，那直接采用Cache-Control:no-cache指定缓存的处理方式是最为理想的。但要整体掌握中间服务器使用的HTTP协议版本不现实，发送请求一般同时包含两个首部字段</p>
<blockquote>
<p>Cache-Control:no-cache</p>
<p>Pragma:no-cache</p>
</blockquote>
<h2 id="Trailer"><a href="#Trailer" class="headerlink" title="Trailer"></a>Trailer</h2><p>首部字段Trailer会事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在HTTP/1.1版本分块传输编码时</p>
<blockquote>
<p>Trailer:Expires</p>
<p>—(报文主体)—</p>
<p>Expires:Tue,28 Sep 2004 23:59:59 GMT</p>
</blockquote>
<h2 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h2><p>规定了传输报文主体时采用的编码方式</p>
<p>HTTP/1.1的传输编码方式仅对分块传输编码有效</p>
<p>Upgrade</p>
<p>Upgrade用于检测HTTP协议及其他协议是否可使用更高的版本进行同心，其参数值用来指定一个完全不同的通信协议</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">客户端=》服务器</span><br><span class="line">GET/index.html HTTP/1.1</span><br><span class="line">Upgrade:TLS/1.0</span><br><span class="line">Connection:Upgrade</span><br><span class="line">服务器=》客户端</span><br><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade:TLS/1.0,HTTP/1.1</span><br><span class="line">Connection:Upgrade</span><br></pre></td></tr></table></figure>

<p>Connection的值被指定为Upgrade,Upgrade的首部字段产生作用的Upgrade对象仅限于客户端和邻接服务器之间。因此使用首部字段Upgrade时需要额外指定Connection为Upgrade</p>
<h2 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h2><p>使用Via是为了追踪客户端和服务器之间的请求和响应报文的传输路径</p>
<p>报文经过代理或网关时，会现在首部字段Via中附加该服务器的信息，然后再进行转发。Via不仅用于追踪报文的转发，还可避免请求回环的发生，所以必须在经过代理时附加该首部字段内容</p>
<h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><p>HTTP/1.1的Warning首部是从HTTP/1.0的响应首部（Retry-After)演变过来的，该首部会告知用户一些与缓存相关的问题的警告</p>
<p>&amp;eg:</p>
<blockquote>
<p>Warning:113 gw.hackr.jp:8080 “Heuristic expiration” Tue,03 Jul=&gt;2012 05:09:44 GMT</p>
<p>Warning:【警告码】【警告主机：端口号】“【警告内容】”（【日期时间】）</p>
</blockquote>
<p>HTTP/1.1警告码</p>
<table>
<thead>
<tr>
<th>警告码</th>
<th>警告内容</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>110</td>
<td>Response is stale(响应已过期)</td>
<td>代理返回已过期的资源</td>
</tr>
<tr>
<td>111</td>
<td>Revalidation failed(再验证失败)</td>
<td>代理验证资源有效性时失败（服务器无法到达等原因</td>
</tr>
<tr>
<td>112</td>
<td>Disconnection operation(断开连接操作)</td>
<td>代理与互联网连接故意切断</td>
</tr>
<tr>
<td>113</td>
<td>Heuristic expiration(试探性过期)</td>
<td>响应的使用期超过24小时（有效缓存的设定时间大于24小时的情况下）</td>
</tr>
<tr>
<td>199</td>
<td>Miscellaneous warning(杂项警告)</td>
<td>任意警告内容</td>
</tr>
<tr>
<td>214</td>
<td>Transformation applied(使用了转换)</td>
<td>代理对内容编码或媒体类型等执行了某些处理时</td>
</tr>
<tr>
<td>299</td>
<td>Miscellaneous  persistent warning(持久杂项警告)</td>
<td>任意警告内容</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
  </entry>
  <entry>
    <title>背包问题</title>
    <url>/2022/04/04/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>01背包：有限物品数量</p>
<p>二维01背包问题，两个for循环可以交换顺序，内层for循环方向可以顺序循环</p>
<p>一维01背包问题：因为物品数量有限，内层for循环不能重复取，必须倒序，两个for循环可以交换顺序</p>
<p>完全背包问题：物品可以重复取</p>
<p>二维：for循环可以交换顺序，内层for循环必须顺序，因为物品可以重复取</p>
<p>一维：for循环可以交换顺序，内层for循环必须顺序，因为物品可以重复取</p>
<p>求方法数：dp[j]+=dp[j-nums[i]]</p>
<p>一维：求组合数：先遍历物品再遍历背包</p>
<p>求排列数：先遍历背包再遍历物品</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>前后端身份认证</title>
    <url>/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>不同身份认证方案：</p>
<p>服务端渲染推荐使用Session认证机制</p>
<p>前后端分离推荐使用JWT认证机制</p>
<p>Session认证机制</p>
<p>Cooike:</p>
<p>Cookie是存储在用户浏览器中一段不超过4kb的字符串，它由一个名称（Name),y一个值(Value)和几个用于控制Cookie有效期，安全性，使用范围的可选属性组成</p>
<p>不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的Cookie一同发送到服务器。</p>
<p>Cookie的几大特性：</p>
<p>自动发送</p>
<p>域名独立</p>
<p>过期时限</p>
<p>4kb限制</p>
<p>Cookie在身份认证中的作用：</p>
<p>客户端第一次请求服务器时，服务器通过响应头的形式，向客户端发送一个身份认证的Cookie，客户端会自动将Cookie保存在浏览器中，随后，当客户端浏览器每次请求服务器时浏览器会自动将身份认证相关的Cookie，通过请求头的形式发送给服务器，服务器即可验证客户端身份</p>
<p>Cookie具有不安全性</p>
<p>由于Cookie是存储在浏览器中的，因此浏览器也提供了读写Cookie的API，因此Cookie很容易被伪造，不具有安全性，因此Cookie不能存放重要隐私数据</p>
<p>Session工作原理：</p>
<p><img src="/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/Session.jpg" alt="Session"></p>
<p>Session认证需要配合Cookie实现，由于Cookie默认不支持跨域访问，所以当涉及前端跨域请求后端接口时需要做额外配置。因此当前端请求后端接口不涉及跨域请求时推荐使用Session身份认证机制，否则使用JWT认证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">//var formParser=require(&#x27;express-formidable&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        <span class="attr">secret</span>:<span class="string">&#x27;xiaoqi&#x27;</span>,</span><br><span class="line">        <span class="attr">resave</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//托管静态页面</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./pages&#x27;</span>));</span><br><span class="line"><span class="comment">//自定义解析Post提交过来的表单数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//登录API接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">    <span class="keyword">if</span>(req.body.username!==<span class="string">&quot;admin&quot;</span>||req.body.password!==<span class="string">&quot;888888&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录失败&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录成功则把信息存储在Session中</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    req.session.user=req.body;<span class="comment">//用户登录信息</span></span><br><span class="line">    req.session.islogin=<span class="literal">true</span>;<span class="comment">//用户登录状态</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录成功&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取用户姓名的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/username&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//从Session中获取用户姓名响应给客户端</span></span><br><span class="line">    <span class="keyword">if</span>(!req.session.islogin)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>:req.session.user.username,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//清空当前客户端的session信息</span></span><br><span class="line">    req.session.destroy()</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JWT认证机制：</p>
<p>工作原理</p>
<p><img src="/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt.jpg" alt="jwt"></p>
<p>jwt组成部分：</p>
<p>头部.有效荷载.签名</p>
<p>Header.PayLoad.Signature</p>
<p>客户端收到服务器返回的JWT后，通常会将它存储在localStorage或者sessionStorage中，此后客户端每次与服务端通信，都要带上这个JWT的字符串，进行身份认证，推荐把JWT放在Http请求头的Authorization字段中</p>
<blockquote>
<p>Authorization：Bearer <token></token></p>
</blockquote>
<p>在Express中使用JWT</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="comment">//导入用于生成jwt字符串的包</span></span><br><span class="line"><span class="keyword">const</span> jwt=<span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="comment">//导入用于将客户端发送过来的JWT字符串解析还原成JSON对象的包</span></span><br><span class="line"><span class="keyword">const</span> expressJWT=<span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>);</span><br><span class="line"><span class="comment">//秘钥的本质是字符串</span></span><br><span class="line"><span class="keyword">const</span> secretkey=<span class="string">&#x27;xiaochunzuishuai^_^&#x27;</span>;</span><br><span class="line"><span class="comment">//以/api/开头的不用权限，配置成功了express-jwt这个中间件，就可以把解析出来的用户信息挂载到req.user上</span></span><br><span class="line">app.use(expressJWT(&#123;</span><br><span class="line">    <span class="attr">secret</span>:secretkey,</span><br><span class="line">    <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>],</span><br><span class="line">    &#125;).unless(&#123;<span class="attr">path</span>:[<span class="regexp">/^\/api\//</span>]&#125;))</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line"><span class="comment">//托管静态页面</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./pages&#x27;</span>));</span><br><span class="line"><span class="comment">//自定义解析Post提交过来的表单数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//登录API接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户提交的登录信息是否正确</span></span><br><span class="line">   <span class="keyword">const</span> userInfo=req.body;</span><br><span class="line">    <span class="keyword">if</span>(userInfo.username!==<span class="string">&quot;admin&quot;</span>||userInfo.password!==<span class="string">&quot;888888&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录失败&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录成功生成JWT字符串，通过token属性响应给客户端</span></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">satus</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="comment">//不要把密码加密到token字符串中</span></span><br><span class="line">        <span class="attr">token</span>:jwt.sign(&#123;<span class="attr">username</span>:userInfo.username&#125;,secretkey,&#123;<span class="attr">expiresIn</span>:<span class="string">&#x27;100s&#x27;</span>&#125;),</span><br><span class="line">        <span class="attr">data</span>:req.user</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//有权限的接口,配置成功了express-jwt这个中间件，有权限的接口就可以通过req.user获取解析出来的用户信息</span></span><br><span class="line">app.get(<span class="string">&#x27;/admin/getInfo&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:req.user</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//配置全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//token解析失败导致的错误,Token过期或不合法</span></span><br><span class="line">    <span class="keyword">if</span>(err.name===<span class="string">&#x27;UnauthorizedError&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">401</span>,<span class="attr">message</span>:<span class="string">&#x27;无效的token&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他原因导致的错误</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">500</span>,<span class="attr">message</span>:<span class="string">&#x27;未知错误&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>Web开发模式</title>
    <url>/2022/03/21/Web%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Web开发模式："><a href="#Web开发模式：" class="headerlink" title="Web开发模式："></a>Web开发模式：</h1><h2 id="服务端渲染的Web开发模式"><a href="#服务端渲染的Web开发模式" class="headerlink" title="服务端渲染的Web开发模式"></a>服务端渲染的Web开发模式</h2><p>服务器发送给客户端的HTML页面是通在服务器通过字符串的拼接动态生成的。因此客户端不需要通过Ajax技术额外请求页面的数据</p>
<p>优点：</p>
<ol>
<li>前端耗时少，因为服务端通过动态生成HTML内容，浏览器只需要直接渲染页面即可，尤其是移动端，更省电</li>
<li>有利于SEO，服务器响应的是完整的HTML页面，所以爬虫更容易获取信息，有利于SEO</li>
</ol>
<p>缺点：</p>
<ol>
<li>占用服务器资源，如果请求较多，会对服务器造成一定压力</li>
<li>不利于前后端分离，开发效率低。使用服务端渲染，则无法进行分工合作，尤其对于前端复杂的项目，不利于羡慕高效开发</li>
</ol>
<h2 id="前后端分离的Web开发模式："><a href="#前后端分离的Web开发模式：" class="headerlink" title="前后端分离的Web开发模式："></a>前后端分离的Web开发模式：</h2><p>依赖于Ajax技术，后端负责接口开发，前端使用Ajav=x调用接口的开发模式</p>
<p>优点：</p>
<ol>
<li>开发体验好，前端专注于UI开发，后端专注于接口开发</li>
<li>用户体验好，Ajax技术的应用，提高用户的体验，轻松实现局部页面刷新</li>
<li>减轻服务端的渲染压力，页面最终是在浏览器中生成的</li>
</ol>
<p>缺点：</p>
<p>不利于SEO，完整的HTML页面需要在客户端动态拼接，所有爬虫无法提取页面有效信息，解决方法：利用Vue,React等前端框架的SSR技术解决</p>
<h2 id="如何选择Web开发模式："><a href="#如何选择Web开发模式：" class="headerlink" title="如何选择Web开发模式："></a>如何选择Web开发模式：</h2><ul>
<li>看业务场景</li>
<li>主要功能是展示页面且没有复杂交互并且需要良好的SEO，用服务端渲染</li>
<li>后台管理项目等交互性强用前后端分离</li>
<li>一般两者都会一起用</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>FormData</title>
    <url>/2022/03/21/FormData/</url>
    <content><![CDATA[<h1 id="表单，FormData-对象"><a href="#表单，FormData-对象" class="headerlink" title="表单，FormData 对象"></a>表单，FormData 对象</h1><h5 id="目录-隐藏"><a href="#目录-隐藏" class="headerlink" title="目录 [隐藏]"></a>目录 [隐藏]</h5><ul>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E8%A1%A8%E5%8D%95%E6%A6%82%E8%BF%B0">表单概述</a></li>
<li>FormData 对象<ul>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E6%A6%82%E8%BF%B0">概述</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">实例方法</a></li>
</ul>
</li>
<li>表单的内置验证<ul>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E8%87%AA%E5%8A%A8%E6%A0%A1%E9%AA%8C">自动校验</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#checkvalidity">checkValidity()</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#willvalidate-%E5%B1%9E%E6%80%A7">willValidate 属性</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#validationmessage-%E5%B1%9E%E6%80%A7">validationMessage 属性</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#setcustomvalidity">setCustomValidity()</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#validity-%E5%B1%9E%E6%80%A7">validity 属性</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E8%A1%A8%E5%8D%95%E7%9A%84-novalidate-%E5%B1%9E%E6%80%A7">表单的 novalidate 属性</a></li>
</ul>
</li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#enctype-%E5%B1%9E%E6%80%A7">enctype 属性</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">文件上传</a></li>
<li><a href="https://wangdoc.com/javascript/bom/form.html#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接</a></li>
</ul>
<h2 id="表单概述"><a href="#表单概述" class="headerlink" title="表单概述"></a>表单概述</h2><p>表单（<code>&lt;form&gt;</code>）用来收集用户提交的数据，发送到服务器。比如，用户提交用户名和密码，让服务器验证，就要通过表单。表单提供多种控件，让开发者使用，具体的控件种类和用法请参考 HTML 语言的教程。本章主要介绍 JavaScript 与表单的交互。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/handling-page&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;name&quot;&gt;用户名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;user_name&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;passwd&quot;&gt;密码：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; id=&quot;passwd&quot; name=&quot;user_passwd&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;提交&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>上面代码就是一个简单的表单，包含三个控件：用户名输入框、密码输入框和提交按钮。</p>
<p>用户点击“提交”按钮，每一个控件都会生成一个键值对，键名是控件的<code>name</code>属性，键值是控件的<code>value</code>属性，键名和键值之间由等号连接。比如，用户名输入框的<code>name</code>属性是<code>user_name</code>，<code>value</code>属性是用户输入的值，假定是“张三”，提交到服务器的时候，就会生成一个键值对<code>user_name=张三</code>。</p>
<p>所有的键值对都会提交到服务器。但是，提交的数据格式跟<code>&lt;form&gt;</code>元素的<code>method</code>属性有关。该属性指定了提交数据的 HTTP 方法。如果是 GET 方法，所有键值对会以 URL 的查询字符串形式，提交到服务器，比如<code>/handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code>。下面就是 GET 请求的 HTTP 头信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交</span><br><span class="line">Host: example.com</span><br></pre></td></tr></table></figure>

<p>如果是 POST 方法，所有键值对会连接成一行，作为 HTTP 请求的数据体发送到服务器，比如<code>user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code>。下面就是 POST 请求的头信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /handling-page HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 74</span><br><span class="line"></span><br><span class="line">user_name=张三&amp;user_passwd=123&amp;submit_button=提交</span><br></pre></td></tr></table></figure>

<p>注意，实际提交的时候，只要键值不是 URL 的合法字符（比如汉字“张三”和“提交”），浏览器会自动对其进行编码。</p>
<p>点击<code>submit</code>控件，就可以提交表单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>上面表单就包含一个<code>submit</code>控件，点击这个控件，浏览器就会把表单数据向服务器提交。</p>
<p>注意，表单里面的<code>&lt;button&gt;</code>元素如果没有用<code>type</code>属性指定类型，那么默认就是<code>submit</code>控件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>上面表单的<code>&lt;button&gt;</code>元素，点击以后也会提交表单。</p>
<p>除了点击<code>submit</code>控件提交表单，还可以用表单元素的<code>submit()</code>方法，通过脚本提交表单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formElement.submit();</span><br></pre></td></tr></table></figure>

<p>表单元素的<code>reset()</code>方法可以重置所有控件的值（重置为默认值）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">formElement.reset()</span><br></pre></td></tr></table></figure>

<h2 id="FormData-对象"><a href="#FormData-对象" class="headerlink" title="FormData 对象"></a>FormData 对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>表单数据以键值对的形式向服务器发送，这个过程是浏览器自动完成的。但是有时候，我们希望通过脚本完成这个过程，构造或编辑表单的键值对，然后通过脚本发送给服务器。浏览器原生提供了 FormData 对象来完成这项工作。</p>
<p><code>FormData()</code>首先是一个构造函数，用来生成表单的实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var formdata = new FormData(form);</span><br></pre></td></tr></table></figure>

<p><code>FormData()</code>构造函数的参数是一个 DOM 的表单元素，构造函数会自动处理表单的键值对。这个参数是可选的，如果省略该参数，就表示一个空的表单。</p>
<p>下面是一个表单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form id=&quot;myForm&quot; name=&quot;myForm&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;useracc&quot;&gt;账号：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;useracc&quot; name=&quot;useracc&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;userfile&quot;&gt;上传文件：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;userfile&quot; name=&quot;userfile&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit!&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>我们用<code>FormData()</code>处理上面这个表单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myForm = document.getElementById(&#x27;myForm&#x27;);</span><br><span class="line">var formData = new FormData(myForm);</span><br><span class="line"></span><br><span class="line">// 获取某个控件的值</span><br><span class="line">formData.get(&#x27;username&#x27;) // &quot;&quot;</span><br><span class="line"></span><br><span class="line">// 设置某个控件的值</span><br><span class="line">formData.set(&#x27;username&#x27;, &#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line">formData.get(&#x27;username&#x27;) // &quot;张三&quot;</span><br></pre></td></tr></table></figure>

<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>FormData 提供以下实例方法。</p>
<ul>
<li><code>FormData.get(key)</code>：获取指定键名对应的键值，参数为键名。如果有多个同名的键值对，则返回第一个键值对的键值。</li>
<li><code>FormData.getAll(key)</code>：返回一个数组，表示指定键名对应的所有键值。如果有多个同名的键值对，数组会包含所有的键值。</li>
<li><code>FormData.set(key, value)</code>：设置指定键名的键值，参数为键名。如果键名不存在，会添加这个键值对，否则会更新指定键名的键值。如果第二个参数是文件，还可以使用第三个参数，表示文件名。</li>
<li><code>FormData.delete(key)</code>：删除一个键值对，参数为键名。</li>
<li><code>FormData.append(key, value)</code>：添加一个键值对。如果键名重复，则会生成两个相同键名的键值对。如果第二个参数是文件，还可以使用第三个参数，表示文件名。</li>
<li><code>FormData.has(key)</code>：返回一个布尔值，表示是否具有该键名的键值对。</li>
<li><code>FormData.keys()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键名。</li>
<li><code>FormData.values()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键值。</li>
<li><code>FormData.entries()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键值对。如果直接用<code>for...of</code>循环遍历 FormData 实例，默认就会调用这个方法。</li>
</ul>
<p>下面是<code>get()</code>、<code>getAll()</code>、<code>set()</code>、<code>append()</code>方法的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var formData = new FormData();</span><br><span class="line"></span><br><span class="line">formData.set(&#x27;username&#x27;, &#x27;张三&#x27;);</span><br><span class="line">formData.append(&#x27;username&#x27;, &#x27;李四&#x27;);</span><br><span class="line">formData.get(&#x27;username&#x27;) // &quot;张三&quot;</span><br><span class="line">formData.getAll(&#x27;username&#x27;) // [&quot;张三&quot;, &quot;李四&quot;]</span><br><span class="line"></span><br><span class="line">formData.append(&#x27;userpic[]&#x27;, myFileInput.files[0], &#x27;user1.jpg&#x27;);</span><br><span class="line">formData.append(&#x27;userpic[]&#x27;, myFileInput.files[1], &#x27;user2.jpg&#x27;);</span><br></pre></td></tr></table></figure>

<p>下面是遍历器的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var formData = new FormData();</span><br><span class="line">formData.append(&#x27;key1&#x27;, &#x27;value1&#x27;);</span><br><span class="line">formData.append(&#x27;key2&#x27;, &#x27;value2&#x27;);</span><br><span class="line"></span><br><span class="line">for (var key of formData.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;key1&quot;</span><br><span class="line">// &quot;key2&quot;</span><br><span class="line"></span><br><span class="line">for (var value of formData.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;value1&quot;</span><br><span class="line">// &quot;value2&quot;</span><br><span class="line"></span><br><span class="line">for (var pair of formData.entries()) &#123;</span><br><span class="line">  console.log(pair[0] + &#x27;: &#x27; + pair[1]);</span><br><span class="line">&#125;</span><br><span class="line">// key1: value1</span><br><span class="line">// key2: value2</span><br><span class="line"></span><br><span class="line">// 等同于遍历 formData.entries()</span><br><span class="line">for (var pair of formData) &#123;</span><br><span class="line">  console.log(pair[0] + &#x27;: &#x27; + pair[1]);</span><br><span class="line">&#125;</span><br><span class="line">// key1: value1</span><br><span class="line">// key2: value2</span><br></pre></td></tr></table></figure>

<h2 id="表单的内置验证"><a href="#表单的内置验证" class="headerlink" title="表单的内置验证"></a>表单的内置验证</h2><h3 id="自动校验"><a href="#自动校验" class="headerlink" title="自动校验"></a>自动校验</h3><p>表单提交的时候，浏览器允许开发者指定一些条件，它会自动验证各个表单控件的值是否符合条件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 必填 --&gt;</span><br><span class="line">&lt;input required&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 必须符合正则表达式 --&gt;</span><br><span class="line">&lt;input pattern=&quot;banana|cherry&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 字符串长度必须为6个字符 --&gt;</span><br><span class="line">&lt;input minlength=&quot;6&quot; maxlength=&quot;6&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数值必须在1到10之间 --&gt;</span><br><span class="line">&lt;input type=&quot;number&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 必须填入 Email 地址 --&gt;</span><br><span class="line">&lt;input type=&quot;email&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 必须填入 URL --&gt;</span><br><span class="line">&lt;input type=&quot;URL&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>如果一个控件通过验证，它就会匹配<code>:valid</code>的 CSS 伪类，浏览器会继续进行表单提交的流程。如果没有通过验证，该控件就会匹配<code>:invalid</code>的 CSS 伪类，浏览器会终止表单提交，并显示一个错误信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:invalid &#123;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line">input,</span><br><span class="line">input:valid &#123;</span><br><span class="line">  border-color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="checkValidity"><a href="#checkValidity" class="headerlink" title="checkValidity()"></a>checkValidity()</h3><p>除了提交表单的时候，浏览器自动校验表单，还可以手动触发表单的校验。表单元素和表单控件都有<code>checkValidity()</code>方法，用于手动触发校验。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 触发整个表单的校验</span><br><span class="line">form.checkValidity()</span><br><span class="line"></span><br><span class="line">// 触发单个表单控件的校验</span><br><span class="line">formControl.checkValidity()</span><br></pre></td></tr></table></figure>

<p><code>checkValidity()</code>方法返回一个布尔值，<code>true</code>表示通过校验，<code>false</code>表示没有通过校验。因此，提交表单可以封装为下面的函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function submitForm(action) &#123;</span><br><span class="line">  var form = document.getElementById(&#x27;form&#x27;);</span><br><span class="line">  form.action = action;</span><br><span class="line">  if (form.checkValidity()) &#123;</span><br><span class="line">    form.submit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="willValidate-属性"><a href="#willValidate-属性" class="headerlink" title="willValidate 属性"></a>willValidate 属性</h3><p>控件元素的<code>willValidate</code>属性是一个布尔值，表示该控件是否会在提交时进行校验。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;form novalidate&gt;</span><br><span class="line">//   &lt;input id=&quot;name&quot; name=&quot;name&quot; required /&gt;</span><br><span class="line">// &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">var input = document.querySelector(&#x27;#name&#x27;);</span><br><span class="line">input.willValidate // true</span><br></pre></td></tr></table></figure>

<h3 id="validationMessage-属性"><a href="#validationMessage-属性" class="headerlink" title="validationMessage 属性"></a>validationMessage 属性</h3><p>控件元素的<code>validationMessage</code>属性返回一个字符串，表示控件不满足校验条件时，浏览器显示的提示文本。以下两种情况，该属性返回空字符串。</p>
<ul>
<li>该控件不会在提交时自动校验</li>
<li>该控件满足校验条件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;form&gt;&lt;input type=&quot;text&quot; required&gt;&lt;/form&gt;</span><br><span class="line">document.querySelector(&#x27;form input&#x27;).validationMessage</span><br><span class="line">// &quot;请填写此字段。&quot;</span><br></pre></td></tr></table></figure>

<p>下面是另一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var myInput = document.getElementById(&#x27;myinput&#x27;);</span><br><span class="line">if (!myInput.checkValidity()) &#123;</span><br><span class="line">  document.getElementById(&#x27;prompt&#x27;).innerHTML = myInput.validationMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setCustomValidity"><a href="#setCustomValidity" class="headerlink" title="setCustomValidity()"></a>setCustomValidity()</h3><p>控件元素的<code>setCustomValidity()</code>方法用来定制校验失败时的报错信息。它接受一个字符串作为参数，该字符串就是定制的报错信息。如果参数为空字符串，则上次设置的报错信息被清除。</p>
<p>这个方法可以替换浏览器内置的表单验证报错信息，参数就是要显示的报错信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;somefile.php&quot;&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    name=&quot;username&quot;</span><br><span class="line">    placeholder=&quot;Username&quot;</span><br><span class="line">    pattern=&quot;[a-z]&#123;1,15&#125;&quot;</span><br><span class="line">    id=&quot;username&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>上面的表单输入框，要求只能输入小写字母，且不得超过15个字符。如果输入不符合要求（比如输入“ABC”），提交表单的时候，Chrome 浏览器会弹出报错信息“Please match the requested format.”，禁止表单提交。下面使用<code>setCustomValidity()</code>方法替换掉报错信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var input = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">input.oninvalid = function (event) &#123;</span><br><span class="line">  event.target.setCustomValidity(</span><br><span class="line">    &#x27;用户名必须是小写字母，不能为空，最长不超过15个字符&#x27;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>setCustomValidity()</code>方法是在<code>invalid</code>事件的监听函数里面调用。该方法也可以直接调用，这时如果参数不为空字符串，浏览器就会认为该控件没有通过校验，就会立刻显示该方法设置的报错信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* HTML 代码如下</span><br><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;p&gt;&lt;input type=&quot;file&quot; id=&quot;fs&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;fs&#x27;).onchange = checkFileSize;</span><br><span class="line"></span><br><span class="line">function checkFileSize() &#123;</span><br><span class="line">  var fs = document.getElementById(&#x27;fs&#x27;);</span><br><span class="line">  var files = fs.files;</span><br><span class="line">  if (files.length &gt; 0) &#123;</span><br><span class="line">     if (files[0].size &gt; 75 * 1024) &#123;</span><br><span class="line">       fs.setCustomValidity(&#x27;文件不能大于 75KB&#x27;);</span><br><span class="line">       return;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fs.setCustomValidity(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码一旦发现文件大于 75KB，就会设置校验失败，同时给出自定义的报错信息。然后，点击提交按钮时，就会显示报错信息。这种校验失败是不会自动消除的，所以如果所有文件都符合条件，要将报错信息设为空字符串，手动消除校验失败的状态。</p>
<h3 id="validity-属性"><a href="#validity-属性" class="headerlink" title="validity 属性"></a>validity 属性</h3><p>控件元素的属性<code>validity</code>属性返回一个<code>ValidityState</code>对象，包含当前校验状态的信息。</p>
<p>该对象有以下属性，全部为只读属性。</p>
<ul>
<li><code>ValidityState.badInput</code>：布尔值，表示浏览器是否不能将用户的输入转换成正确的类型，比如用户在数值框里面输入字符串。</li>
<li><code>ValidityState.customError</code>：布尔值，表示是否已经调用<code>setCustomValidity()</code>方法，将校验信息设置为一个非空字符串。</li>
<li><code>ValidityState.patternMismatch</code>：布尔值，表示用户输入的值是否不满足模式的要求。</li>
<li><code>ValidityState.rangeOverflow</code>：布尔值，表示用户输入的值是否大于最大范围。</li>
<li><code>ValidityState.rangeUnderflow</code>：布尔值，表示用户输入的值是否小于最小范围。</li>
<li><code>ValidityState.stepMismatch</code>：布尔值，表示用户输入的值不符合步长的设置（即不能被步长值整除）。</li>
<li><code>ValidityState.tooLong</code>：布尔值，表示用户输入的字数超出了最长字数。</li>
<li><code>ValidityState.tooShort</code>：布尔值，表示用户输入的字符少于最短字数。</li>
<li><code>ValidityState.typeMismatch</code>：布尔值，表示用户填入的值不符合类型要求（主要是类型为 Email 或 URL 的情况）。</li>
<li><code>ValidityState.valid</code>：布尔值，表示用户是否满足所有校验条件。</li>
<li><code>ValidityState.valueMissing</code>：布尔值，表示用户没有填入必填的值。</li>
</ul>
<p>下面是一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var input = document.getElementById(&#x27;myinput&#x27;);</span><br><span class="line">if (input.validity.valid) &#123;</span><br><span class="line">  console.log(&#x27;通过校验&#x27;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log(&#x27;校验失败&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是另外一个例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var txt = &#x27;&#x27;;</span><br><span class="line">if (document.getElementById(&#x27;myInput&#x27;).validity.rangeOverflow) &#123;</span><br><span class="line">  txt = &#x27;数值超过上限&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(&#x27;prompt&#x27;).innerHTML = txt;</span><br></pre></td></tr></table></figure>

<p>如果想禁止浏览器弹出表单验证的报错信息，可以监听<code>invalid</code>事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var input = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">var form  = document.getElementById(&#x27;form&#x27;);</span><br><span class="line"></span><br><span class="line">var elem = document.createElement(&#x27;div&#x27;);</span><br><span class="line">elem.id  = &#x27;notify&#x27;;</span><br><span class="line">elem.style.display = &#x27;none&#x27;;</span><br><span class="line">form.appendChild(elem);</span><br><span class="line"></span><br><span class="line">input.addEventListener(&#x27;invalid&#x27;, function (event) &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  if (!event.target.validity.valid) &#123;</span><br><span class="line">    elem.textContent   = &#x27;用户名必须是小写字母&#x27;;</span><br><span class="line">    elem.className     = &#x27;error&#x27;;</span><br><span class="line">    elem.style.display = &#x27;block&#x27;;</span><br><span class="line">    input.className    = &#x27;invalid animated shake&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">input.addEventListener(&#x27;input&#x27;, function(event)&#123;</span><br><span class="line">  if ( &#x27;block&#x27; === elem.style.display ) &#123;</span><br><span class="line">    input.className = &#x27;&#x27;;</span><br><span class="line">    elem.style.display = &#x27;none&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>上面代码中，一旦发生<code>invalid</code>事件（表单验证失败），<code>event.preventDefault()</code>用来禁止浏览器弹出默认的验证失败提示，然后设置定制的报错提示框。</p>
<h3 id="表单的-novalidate-属性"><a href="#表单的-novalidate-属性" class="headerlink" title="表单的 novalidate 属性"></a>表单的 novalidate 属性</h3><p>表单元素的 HTML 属性<code>novalidate</code>，可以关闭浏览器的自动校验。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form novalidate&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>这个属性也可以在脚本里设置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">form.noValidate = true;</span><br></pre></td></tr></table></figure>

<p>如果表单元素没有设置<code>novalidate</code>属性，那么提交按钮（<code>&lt;button&gt;</code>或<code>&lt;input&gt;</code>元素）的<code>formnovalidate</code>属性也有同样的作用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;submit&quot; formnovalidate&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h2 id="enctype-属性"><a href="#enctype-属性" class="headerlink" title="enctype 属性"></a>enctype 属性</h2><p>表单能够用四种编码，向服务器发送数据。编码格式由表单的<code>enctype</code>属性决定。</p>
<p>假定表单有两个字段，分别是<code>foo</code>和<code>baz</code>，其中<code>foo</code>字段的值等于<code>bar</code>，<code>baz</code>字段的值是一个分为两行的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The first line.</span><br><span class="line">The second line.</span><br></pre></td></tr></table></figure>

<p>下面四种格式，都可以将这个表单发送到服务器。</p>
<p><strong>（1）GET 方法</strong></p>
<p>如果表单使用<code>GET</code>方法发送数据，<code>enctype</code>属性无效。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;get&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>数据将以 URL 的查询字符串发出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?foo=bar&amp;baz=The%20first%20line.%0AThe%20second%20line.</span><br></pre></td></tr></table></figure>

<p><strong>（2）application/x-www-form-urlencoded</strong></p>
<p>如果表单用<code>POST</code>方法发送数据，并省略<code>enctype</code>属性，那么数据以<code>application/x-www-form-urlencoded</code>格式发送（因为这是默认值）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>发送的 HTTP 请求如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">foo=bar&amp;baz=The+first+line.%0D%0AThe+second+line.%0D%0A</span><br></pre></td></tr></table></figure>

<p>上面代码中，数据体里面的<code>%0D%0A</code>代表换行符（<code>\r\n</code>）。</p>
<p><strong>（3）text/plain</strong></p>
<p>如果表单使用<code>POST</code>方法发送数据，<code>enctype</code>属性为<code>text/plain</code>，那么数据将以纯文本格式发送。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  enctype=&quot;text/plain&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>发送的 HTTP 请求如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">foo=bar</span><br><span class="line">baz=The first line.</span><br><span class="line">The second line.</span><br></pre></td></tr></table></figure>

<p><strong>（4）multipart/form-data</strong></p>
<p>如果表单使用<code>POST</code>方法，<code>enctype</code>属性为<code>multipart/form-data</code>，那么数据将以混合的格式发送。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  enctype=&quot;multipart/form-data&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>发送的 HTTP 请求如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=---------------------------314911788813839</span><br><span class="line"></span><br><span class="line">-----------------------------314911788813839</span><br><span class="line">Content-Disposition: form-data; name=&quot;foo&quot;</span><br><span class="line"></span><br><span class="line">bar</span><br><span class="line">-----------------------------314911788813839</span><br><span class="line">Content-Disposition: form-data; name=&quot;baz&quot;</span><br><span class="line"></span><br><span class="line">The first line.</span><br><span class="line">The second line.</span><br><span class="line"></span><br><span class="line">-----------------------------314911788813839--</span><br></pre></td></tr></table></figure>

<p>这种格式也是文件上传的格式。</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>用户上传文件，也是通过表单。具体来说，就是通过文件输入框选择本地文件，提交表单的时候，浏览器就会把这个文件发送到服务器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myFile&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>此外，还需要将表单<code>&lt;form&gt;</code>元素的<code>method</code>属性设为<code>POST</code>，<code>enctype</code>属性设为<code>multipart/form-data</code>。其中，<code>enctype</code>属性决定了 HTTP 头信息的<code>Content-Type</code>字段的值，默认情况下这个字段的值是<code>application/x-www-form-urlencoded</code>，但是文件上传的时候要改成<code>multipart/form-data</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;file&quot;&gt;选择一个文件&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myFile&quot; multiple&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;上传&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>上面的 HTML 代码中，file 控件的<code>multiple</code>属性，指定可以一次选择多个文件；如果没有这个属性，则一次只能选择一个文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fileSelect = document.getElementById(&#x27;file&#x27;);</span><br><span class="line">var files = fileSelect.files;</span><br></pre></td></tr></table></figure>

<p>然后，新建一个 FormData 实例对象，模拟发送到服务器的表单数据，把选中的文件添加到这个对象上面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var formData = new FormData();</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">  var file = files[i];</span><br><span class="line"></span><br><span class="line">  // 只上传图片文件</span><br><span class="line">  if (!file.type.match(&#x27;image.*&#x27;)) &#123;</span><br><span class="line">    continue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  formData.append(&#x27;photos[]&#x27;, file, file.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，使用 Ajax 向服务器上传文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(&#x27;POST&#x27;, &#x27;handler.php&#x27;, true);</span><br><span class="line"></span><br><span class="line">xhr.onload = function () &#123;</span><br><span class="line">  if (xhr.status !== 200) &#123;</span><br><span class="line">    console.log(&#x27;An error occurred!&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure>

<p>除了发送 FormData 实例，也可以直接 AJAX 发送文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var file = document.getElementById(&#x27;test-input&#x27;).files[0];</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(&#x27;POST&#x27;, &#x27;myserver/uploads&#x27;);</span><br><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;, file.type);</span><br><span class="line">xhr.send(file);</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://webdesign.tutsplus.com/tutorials/html5-form-validation-with-the-pattern-attribute--cms-25145">HTML5 Form Validation With the “pattern” Attribute</a>, Thoriq Firdaus</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title>axios发送请求时后台接收的req.body为空</title>
    <url>/2022/03/21/axios%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%97%B6%E5%90%8E%E5%8F%B0%E6%8E%A5%E6%94%B6%E7%9A%84req-body%E4%B8%BA%E7%A9%BA/</url>
    <content><![CDATA[<p>首先，先了解一下关于http协议里定义的四种常见数据的post方法，分别是：<br>application/www-form-ulrencoded<br>multipart/form-data<br>application/json<br>text/xml</p>
<p>Express依赖bodyParser对请求的包体进行解析。默认支持application/json,application/www-form-urlencoded,multipart/form-data.单数对xml没有支持。需要自己代码来实现</p>
<p>用axios post请求提交数据的时候需要清楚发送请求的类型是哪种，后台用相应的方法解析</p>
<p>1 使用FormData提交表单数据</p>
<p>坑一：使用FormData时一定要在先绑定submit事件，在submit事件触发时发送axios post请求,否则获取不到formData里面的值</p>
<p>坑二:axios请求里面如果直接使用data:formData，浏览器会自动帮我们加上 <code>Content-Type: multipart/form-data</code> ，因此请求要这样设置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line">       <span class="comment">// 用表单来初始化</span></span><br><span class="line">       <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">       <span class="comment">// 我们可以根据name来访问表单中的字段</span></span><br><span class="line">       <span class="keyword">var</span> username = formData.get(<span class="string">&quot;username&quot;</span>); <span class="comment">// 获取名字</span></span><br><span class="line">       <span class="keyword">var</span> password = formData.get(<span class="string">&quot;password&quot;</span>); <span class="comment">// 获取密码</span></span><br><span class="line">       axios(&#123;</span><br><span class="line">           <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">           <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/login&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span>:&#123;</span><br><span class="line">               <span class="attr">username</span>:username,</span><br><span class="line">               <span class="attr">password</span>:password</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure>

<p>这样默认Content-type：application/json,</p>
<p>如果表单属性过多，可以先用一个对象接收：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line">        <span class="comment">// 用表单来初始化</span></span><br><span class="line">        <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">        <span class="comment">// 我们可以根据name来访问表单中的字段</span></span><br><span class="line">        <span class="keyword">let</span> myFormData=&#123;&#125;;</span><br><span class="line">        <span class="comment">//如果表单属性过多可以先遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> pair <span class="keyword">of</span> formData.entries())&#123;</span><br><span class="line">            myFormData[pair[<span class="number">0</span>]]=pair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/login&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:myFormData</span><br><span class="line">             </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<p>后台接收使用中间件body-parser解析表单体数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        <span class="attr">secret</span>:<span class="string">&#x27;xiaoqi&#x27;</span>,</span><br><span class="line">        <span class="attr">resave</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//托管静态页面</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./pages&#x27;</span>));</span><br><span class="line"><span class="comment">//自定义解析Post提交过来的表单数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//登录API接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="comment">//console.log(req.body)</span></span><br><span class="line">    <span class="keyword">if</span>(req.body.username!==<span class="string">&quot;admin&quot;</span>||req.body.password!==<span class="string">&quot;888888&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录失败&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录成功则把信息存储在Session中</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    req.session.user=req.body;<span class="comment">//用户登录信息</span></span><br><span class="line">    req.session.islogin=<span class="literal">true</span>;<span class="comment">//用户登录状态</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录成功&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取用户姓名的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/username&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//从Session中获取用户姓名响应给客户端</span></span><br><span class="line">    <span class="keyword">if</span>(!req.session.islogin)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>:req.session.user.username,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//清空当前客户端的session信息</span></span><br><span class="line">    req.session.destroy()</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>node连接MySql报错ER_NOT_SUPPORTED_AUTH_MODE</title>
    <url>/2022/03/20/node%E8%BF%9E%E6%8E%A5MySql%E6%8A%A5%E9%94%99ER-NOT-SUPPORTED-AUTH-MODE/</url>
    <content><![CDATA[<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><p>本人系统安装的是mysql-installer-community-8.0.18.0.msi这个版本，然后我本地使用node-mysql去连接数据库。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">//建立MYSQL与数据库的联系</span></span><br><span class="line"><span class="keyword">const</span> db=mysql.createPool(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//数据库的ip地址</span></span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;my_db_01&#x27;</span>,<span class="comment">//指定要操作哪个数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//测试mysql能否正常工作</span></span><br><span class="line">db.query(<span class="string">&#x27;select 1&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//mysql工作期间报错</span></span><br><span class="line">    <span class="keyword">if</span>(err)<span class="keyword">return</span> <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    <span class="comment">//能成功执行SQL语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行db.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS D:\Vue-chat\Server&gt; node db.js</span><br><span class="line">ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br></pre></td></tr></table></figure>

<h1 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h1><p>mysql8.0以上加密方式，Node还不支持。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>第一步谷歌<br>查到了 <a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a><br>这个答案，和我报错的步骤基本一样，按照这个进行操作，登录MySql Command Line Client使用这个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.27 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>git遇到的坑</title>
    <url>/2022/03/18/git%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>解决用git push origin master时出现的问题<br>不知道小伙伴们在使用git push origin master时有没有遇到下面的问题，今天我遇到了，原因一般是相同的，下面详细分析一下</p>
<p>报错内容：<br>To github.com:<em><strong>/</strong></em><br>! [rejected] master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘<a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a>:***/***’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p>
<p>大致翻译为：<br>错误：无法将一些引用推送到’<a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>：****** / Demo.git’<br>提示：由于当前分支的尖端位于其远程对应的后面，因此更新被拒绝。 合并远程更改（例如’git pull’），然后再次推送。 有关详细信息，请参见“ git push –help”中的“关于fast-forwards的注意事项”。</p>
<p>这个报错的原因是因为远程repository和本地的repository有冲突，下面有3种解决办法：</p>
<p>按上面报错内容中所给的提示先用git pull之后再用git push<br>$ git pull origin master<br>$ git push origin master</p>
<p>使用强制push的方法，但是这会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候<br>$ git push origin master -f</p>
<p>如果不想merge远程和本地修改，可以先创建新的分支，然后再push<br>$ git branch [name]<br>$ git push origin [name]</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>vim</title>
    <url>/2022/03/18/vim/</url>
    <content><![CDATA[<p>Vim可以分为三种模式，分别为：</p>
<blockquote>
<p>命令行模式（Command mode）</p>
<p>插入模式（Insert mode）</p>
<p>底行模式（Lastline mode）</p>
</blockquote>
<p><strong>命令行模式</strong></p>
<blockquote>
<p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p>
</blockquote>
<p><strong>插入模式</strong></p>
<blockquote>
<p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p>
</blockquote>
<p><strong>底行模式</strong></p>
<blockquote>
<p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。</p>
</blockquote>
<p><strong>不过，一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</strong></p>
<hr>
<h4 id="5-Vim的基本操作"><a href="#5-Vim的基本操作" class="headerlink" title="5. Vim的基本操作"></a>5. Vim的基本操作</h4><p><strong>a) 进入Vim</strong></p>
<p>在系统光标提示符后，输入vim及文件名后，回车，进入Vim编辑画面。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4496284-bd8c3655e34df86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/734/format/webp" alt="img"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/4496284-7389372474e9c632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/733/format/webp" alt="img"></p>
<blockquote>
<p>特别注意，进入vim之后，是处于「命令行模式（command mode）」，要切换到「插入模式（Insert mode）」才能够输入文字。</p>
</blockquote>
<p><strong>b) 切换至插入模式（Insert mode）编辑文件</strong></p>
<p>在<strong>「命令行模式（command mode）」</strong>下<strong>按一下字母「i」就可以进入「插入模式（Insert mode）」</strong>，这时候你就可以开始输入文字了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4496284-a1a7aeded64e57f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/731/format/webp" alt="img"></p>
<p><strong>c) 插入模式（Insert mode）切换到命令行模式（Command mode）</strong></p>
<p>在插入模式下，按一下「ESC」键即可。</p>
<p><strong>d) 退出vim及保存文件</strong> </p>
<p>在命令行模式（Command mode）下，按冒号「:」键，进入底行模式（Last Line mode）</p>
<p>常见底行模式下的命令行：</p>
<blockquote>
<p>:w filename 文件以filename为文件名保存</p>
<p>:wq 文件存盘并退出vim</p>
<p>:q 文件不存盘并退出vim</p>
<p>:q! 文件不存盘强制退出vim</p>
</blockquote>
<hr>
<h4 id="6-命令行模式下的功能键（部分）"><a href="#6-命令行模式下的功能键（部分）" class="headerlink" title="6. 命令行模式下的功能键（部分）"></a><strong>6. 命令行模式下的功能键（部分）</strong></h4><p><strong>a) 从命令行模式切换为插入模式的三种方式</strong></p>
<blockquote>
<p>「 i 」：从当前光标位置进入插入模式</p>
<p>「 a 」：从当前光标位置的下一个字符进入插入模式</p>
<p>「 o 」：从当前光标位置的下一行进入插入模式</p>
</blockquote>
<p><strong>b) 从插入模式切换为命令行模式</strong></p>
<blockquote>
<p>按「ESC」键 </p>
</blockquote>
<p><strong>c) 移动光标</strong></p>
<blockquote>
<p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p>
</blockquote>
<p><strong>d) 行尾追加</strong></p>
<blockquote>
<p>不管光标在该行的什么位置，直接按大写字母「A」即可</p>
</blockquote>
<p><strong>e) 删除单词</strong></p>
<blockquote>
<p>dw：把光标停留在需要删除的单词前面，依次按下「d」「w」，即可</p>
<p>de：把光标停留在需要删除的单词前面（无视单词前面的空格），依次按下「d」「e」，即可</p>
</blockquote>
<p><strong>f) 从当前光标处删除到行末</strong></p>
<blockquote>
<p>把光标停留在需要删除的句子前面，依次按下「d」「$」，即可</p>
</blockquote>
<p><strong>g) 快速跳转到行首</strong></p>
<blockquote>
<p>按下数字「0」，即可</p>
</blockquote>
<p><strong>h) 使用计数以删除单词</strong></p>
<blockquote>
<p>示例：this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.</p>
<p>依次将鼠标定位到ABC前，按「d」「2」「w」，可以删除：ABC DE</p>
<p>将鼠标定位到FGHI前，按「d」「4」「w」，可以删除：FGHI JK LMN OP</p>
<p>将鼠标定位到Q前，按「d」「3」「w」，可以删除：Q RS TUV</p>
<p>得到句子：</p>
<p>this line of words is cleaned up.</p>
</blockquote>
<p><strong>i) 删除当前行</strong></p>
<blockquote>
<p>鉴于删除当前行这一操作的高频性，vim设计者简化了快捷键，按「d」「d」即可。</p>
<p>连续删除两行，从当前行开始，则为：「2」「d」「d」</p>
</blockquote>
<p><strong>j) 撤销更改</strong></p>
<blockquote>
<p>a. 按小写字母「u」，撤销上一步的更改操作；</p>
<p>b. 按大写字母「U」，撤销整行的更改操作；</p>
<p>c. 「Ctrl+R」撤销上一步「撤销操作」。</p>
</blockquote>
<p><strong>k) 将刚删除的内容置入其他行</strong></p>
<blockquote>
<p>之前刚刚删除的内容，会放入Vim编辑器的寄存器中。基于如此原理，可以将之认为成Windows操作系统的「剪切」操作。</p>
<p>先在想删除的行，按「d」「d」，进行删除操作；</p>
<p>再在想插入那行的前一行按「p」键即可。</p>
</blockquote>
<p><strong>l) 替换</strong></p>
<blockquote>
<p>将光标放到需要改的字符前，先按「r」键，再输入想更改的字符即可。</p>
</blockquote>
<p><strong>m) 跳转</strong></p>
<blockquote>
<p>顶部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入「g」「g」即可；</p>
<p>底部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入大写字母「g」即可；</p>
<p>特定行跳转命令：直接输入行号，然后输入大写字母「g」即可。</p>
</blockquote>
<p><strong>n) 查找命令</strong></p>
<p>字符串查找：</p>
<blockquote>
<p>输入英文斜杠「/」，后面紧接需要搜索的字符串即可。</p>
<p>查找下一个相同字符串，就紧接着按小写字母「n」；</p>
<p>查找上一个相同字符串，就紧接着按大写字母「N」。</p>
</blockquote>
<p>配对括号查找：</p>
<blockquote>
<p>在编程语言里，配对括号「 ( 」「 ) 」「 { 」「 } 」很常见，当定位到一个配对括号的一半时（注意光标要定位在该括号之前），按「%」，即可自动跳转到与之匹配的第一个配对括号处。</p>
</blockquote>
<p><strong>o) 替换字符串</strong></p>
<p>当前行替换命令</p>
<blockquote>
<p>在标准命令行模式下，光标定位到当前行，按英文冒号「 ：」，再输入s/oldstring/newstring/g 回车，即可。</p>
<p>完整语句为：</p>
<p><strong>:s/dogg/dog/g</strong></p>
</blockquote>
<p>特定几行替换命令</p>
<blockquote>
<p>在标准命令行模式下，按英文冒号「 ：」，再输入#,#s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p>
<p>完整语句为：</p>
<p>**<em>*:*<em>5,8s/dogg/dog/g</em></em></p>
</blockquote>
<p>全文替换命令</p>
<blockquote>
<p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p>
<p>完整语句为：</p>
<p><strong><em>*:*</em>%s/dogg/dog/g</strong></p>
</blockquote>
<p>全文替换命令（每个匹配项替换前需确认）</p>
<blockquote>
<p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/gc 回车，即可（其中#代表特定的首尾两行的行号）。</p>
<p>完整语句为：</p>
<p><strong><em>*:*</em>%s/dogg/dog/gc</strong></p>
</blockquote>
<p>作者：饥人谷_李维超<br>链接：<a href="https://www.jianshu.com/p/8b679b35c9d5">https://www.jianshu.com/p/8b679b35c9d5</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。Vim可以分为三种模式，分别为：</p>
<blockquote>
<p>命令行模式（Command mode）</p>
<p>插入模式（Insert mode）</p>
<p>底行模式（Lastline mode）</p>
</blockquote>
<p><strong>命令行模式</strong></p>
<blockquote>
<p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p>
</blockquote>
<p><strong>插入模式</strong></p>
<blockquote>
<p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p>
</blockquote>
<p><strong>底行模式</strong></p>
<blockquote>
<p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。</p>
</blockquote>
<p><strong>不过，一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</strong></p>
<hr>
<h4 id="5-Vim的基本操作-1"><a href="#5-Vim的基本操作-1" class="headerlink" title="5. Vim的基本操作"></a>5. Vim的基本操作</h4><p><strong>a) 进入Vim</strong></p>
<p>在系统光标提示符后，输入vim及文件名后，回车，进入Vim编辑画面。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4496284-bd8c3655e34df86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/734/format/webp" alt="img"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/4496284-7389372474e9c632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/733/format/webp" alt="img"></p>
<blockquote>
<p>特别注意，进入vim之后，是处于「命令行模式（command mode）」，要切换到「插入模式（Insert mode）」才能够输入文字。</p>
</blockquote>
<p><strong>b) 切换至插入模式（Insert mode）编辑文件</strong></p>
<p>在<strong>「命令行模式（command mode）」</strong>下<strong>按一下字母「i」就可以进入「插入模式（Insert mode）」</strong>，这时候你就可以开始输入文字了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4496284-a1a7aeded64e57f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/731/format/webp" alt="img"></p>
<p><strong>c) 插入模式（Insert mode）切换到命令行模式（Command mode）</strong></p>
<p>在插入模式下，按一下「ESC」键即可。</p>
<p><strong>d) 退出vim及保存文件</strong> </p>
<p>在命令行模式（Command mode）下，按冒号「:」键，进入底行模式（Last Line mode）</p>
<p>常见底行模式下的命令行：</p>
<blockquote>
<p>:w filename 文件以filename为文件名保存</p>
<p>:wq 文件存盘并退出vim</p>
<p>:q 文件不存盘并退出vim</p>
<p>:q! 文件不存盘强制退出vim</p>
</blockquote>
<hr>
<h4 id="6-命令行模式下的功能键（部分）-1"><a href="#6-命令行模式下的功能键（部分）-1" class="headerlink" title="6. 命令行模式下的功能键（部分）"></a><strong>6. 命令行模式下的功能键（部分）</strong></h4><p><strong>a) 从命令行模式切换为插入模式的三种方式</strong></p>
<blockquote>
<p>「 i 」：从当前光标位置进入插入模式</p>
<p>「 a 」：从当前光标位置的下一个字符进入插入模式</p>
<p>「 o 」：从当前光标位置的下一行进入插入模式</p>
</blockquote>
<p><strong>b) 从插入模式切换为命令行模式</strong></p>
<blockquote>
<p>按「ESC」键 </p>
</blockquote>
<p><strong>c) 移动光标</strong></p>
<blockquote>
<p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p>
</blockquote>
<p><strong>d) 行尾追加</strong></p>
<blockquote>
<p>不管光标在该行的什么位置，直接按大写字母「A」即可</p>
</blockquote>
<p><strong>e) 删除单词</strong></p>
<blockquote>
<p>dw：把光标停留在需要删除的单词前面，依次按下「d」「w」，即可</p>
<p>de：把光标停留在需要删除的单词前面（无视单词前面的空格），依次按下「d」「e」，即可</p>
</blockquote>
<p><strong>f) 从当前光标处删除到行末</strong></p>
<blockquote>
<p>把光标停留在需要删除的句子前面，依次按下「d」「$」，即可</p>
</blockquote>
<p><strong>g) 快速跳转到行首</strong></p>
<blockquote>
<p>按下数字「0」，即可</p>
</blockquote>
<p><strong>h) 使用计数以删除单词</strong></p>
<blockquote>
<p>示例：this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.</p>
<p>依次将鼠标定位到ABC前，按「d」「2」「w」，可以删除：ABC DE</p>
<p>将鼠标定位到FGHI前，按「d」「4」「w」，可以删除：FGHI JK LMN OP</p>
<p>将鼠标定位到Q前，按「d」「3」「w」，可以删除：Q RS TUV</p>
<p>得到句子：</p>
<p>this line of words is cleaned up.</p>
</blockquote>
<p><strong>i) 删除当前行</strong></p>
<blockquote>
<p>鉴于删除当前行这一操作的高频性，vim设计者简化了快捷键，按「d」「d」即可。</p>
<p>连续删除两行，从当前行开始，则为：「2」「d」「d」</p>
</blockquote>
<p><strong>j) 撤销更改</strong></p>
<blockquote>
<p>a. 按小写字母「u」，撤销上一步的更改操作；</p>
<p>b. 按大写字母「U」，撤销整行的更改操作；</p>
<p>c. 「Ctrl+R」撤销上一步「撤销操作」。</p>
</blockquote>
<p><strong>k) 将刚删除的内容置入其他行</strong></p>
<blockquote>
<p>之前刚刚删除的内容，会放入Vim编辑器的寄存器中。基于如此原理，可以将之认为成Windows操作系统的「剪切」操作。</p>
<p>先在想删除的行，按「d」「d」，进行删除操作；</p>
<p>再在想插入那行的前一行按「p」键即可。</p>
</blockquote>
<p><strong>l) 替换</strong></p>
<blockquote>
<p>将光标放到需要改的字符前，先按「r」键，再输入想更改的字符即可。</p>
</blockquote>
<p><strong>m) 跳转</strong></p>
<blockquote>
<p>顶部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入「g」「g」即可；</p>
<p>底部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入大写字母「g」即可；</p>
<p>特定行跳转命令：直接输入行号，然后输入大写字母「g」即可。</p>
</blockquote>
<p><strong>n) 查找命令</strong></p>
<p>字符串查找：</p>
<blockquote>
<p>输入英文斜杠「/」，后面紧接需要搜索的字符串即可。</p>
<p>查找下一个相同字符串，就紧接着按小写字母「n」；</p>
<p>查找上一个相同字符串，就紧接着按大写字母「N」。</p>
</blockquote>
<p>配对括号查找：</p>
<blockquote>
<p>在编程语言里，配对括号「 ( 」「 ) 」「 { 」「 } 」很常见，当定位到一个配对括号的一半时（注意光标要定位在该括号之前），按「%」，即可自动跳转到与之匹配的第一个配对括号处。</p>
</blockquote>
<p><strong>o) 替换字符串</strong></p>
<p>当前行替换命令</p>
<blockquote>
<p>在标准命令行模式下，光标定位到当前行，按英文冒号「 ：」，再输入s/oldstring/newstring/g 回车，即可。</p>
<p>完整语句为：</p>
<p><strong>:s/dogg/dog/g</strong></p>
</blockquote>
<p>特定几行替换命令</p>
<blockquote>
<p>在标准命令行模式下，按英文冒号「 ：」，再输入#,#s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p>
<p>完整语句为：</p>
<p>**<em>*:*<em>5,8s/dogg/dog/g</em></em></p>
</blockquote>
<p>全文替换命令</p>
<blockquote>
<p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p>
<p>完整语句为：</p>
<p><strong><em>*:*</em>%s/dogg/dog/g</strong></p>
</blockquote>
<p>全文替换命令（每个匹配项替换前需确认）</p>
<blockquote>
<p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/gc 回车，即可（其中#代表特定的首尾两行的行号）。</p>
<p>完整语句为：</p>
<p><strong><em>*:*</em>%s/dogg/dog/gc</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
  </entry>
  <entry>
    <title>JSONP解决跨域问题</title>
    <url>/2022/03/14/JSONP%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>概念：</p>
<p>浏览器通过<script>标签的src属性，请求服务器上的数据，同时服务器返回一个函数的调用，这种请求数据的方式·叫做JSONP</p>
<p>如果项目中已经配置了CORS跨域资源共享，为防止冲突,必须在配置CORS中间件之前声明JSONP的接口，否则JSONP接口会被处理成开启了CORS的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> apirouter=<span class="built_in">require</span>(<span class="string">&#x27;./apirouter&#x27;</span>)</span><br><span class="line"><span class="comment">//在配置cors中间件之前定义JSONP的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/jsonp&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1 得到客户端请求的回调函数名称</span></span><br><span class="line">    <span class="keyword">const</span> funcName=req.query.callback</span><br><span class="line">    <span class="comment">//2 定义发送到客户端的JSON格式数据对象</span></span><br><span class="line">    <span class="keyword">const</span> data=&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line">    <span class="comment">//3 拼接一个函数调用的字符串</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr=<span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">    <span class="comment">//4 把拼接的字符串响应给客户端的&lt;script&gt;标签进行解析执行</span></span><br><span class="line">    res.send(scriptStr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//在路由之前配置cors中间件</span></span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line"><span class="comment">//将路由模块注册为全局中间件</span></span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>,apirouter)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>发请求：HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.0/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnJsonp&quot;</span>&gt;</span>Jsonp<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#btnJsonp&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/jsonp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">dataType</span>:<span class="string">&#x27;jsonp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</script></p>]]></content>
      <categories>
        <category>Node</category>
        <category>Express</category>
      </categories>
  </entry>
  <entry>
    <title>基于cors解决跨域问题</title>
    <url>/2022/03/14/%E5%9F%BA%E4%BA%8Ecors%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apirouter.js:</span><br><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> router=express.Router()</span><br><span class="line"><span class="comment">//挂载对应路由</span></span><br><span class="line">router.get(<span class="string">&#x27;/get&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,<span class="comment">//0表示成功，1表示失败</span></span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;Get请求成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:req.query</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义post接口</span></span><br><span class="line">router.post(<span class="string">&#x27;/post&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,<span class="comment">//0表示成功，1表示失败</span></span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;Post请求成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:req.body</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义delete接口</span></span><br><span class="line">router.delete(<span class="string">&#x27;/delete&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;  </span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,<span class="comment">//0表示成功，1表示失败</span></span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;Delete请求成功&#x27;</span>,</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports=router</span><br></pre></td></tr></table></figure>

<p>Get ,Post,Delete接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> apirouter=<span class="built_in">require</span>(<span class="string">&#x27;./apirouter&#x27;</span>)</span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//在路由之前配置cors中间件,解决跨域问题</span></span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line"><span class="comment">//将路由模块注册为全局中间件</span></span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>,apirouter)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="解决接口跨域问题"><a href="#解决接口跨域问题" class="headerlink" title="解决接口跨域问题"></a>解决接口跨域问题</h1><p>CORS(主流方案)</p>
<p>JSONP（有缺陷：只支持Get请求）</p>
<h1 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h1><p>CORS(Cross-Origin Resource Sharing,跨域资源共享)，由一系列Http响应头组成，这些Http响应头决定浏览器是否阻止前端JS代码跨域获取资源。</p>
<p>浏览器的同源安全策略默认会阻止网页“跨域”获取资源，但如果接口服务器配置了CORS相关的HTTP响应头，就可以解决浏览器端的跨域访问限制。</p>
<p>浏览器：网页==》跨域请求   接口服务器（配置Access-Control-Allow-*相关响应头）</p>
<p>​                    《==  响应</p>
<h1 id="CORS响应头部"><a href="#CORS响应头部" class="headerlink" title="CORS响应头部"></a>CORS响应头部</h1><h3 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h3><p>响应头部可以携带一个Access-Control-Allow-Origin字段，语法如下：</p>
<blockquote>
<p>Access-Control-Allow-Origin:<origin>|*</origin></p>
</blockquote>
<p>其中origin参数指定了允许访问该资源的外域URL</p>
<p>例如：下面字段只允许访问来自<a href="http://itcast.cn的请求/">http://itcast.cn的请求</a></p>
<blockquote>
<p>res.setHeader(‘Access-Control-Allow-Origin’,’<a href="http://itcast.cn&/#39;">http://itcast.cn&#39;</a>)</p>
</blockquote>
<p>*通配符表示允许来自任何域的请求</p>
<h3 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h3><p>默认情况下，CORS仅支持客户端向服务器发送9个请求头：</p>
<p>Accept,Accept-Language,Content-Language,DPR,Downlink,Save-Data,Viewport-Width,Width,Content-Type(仅限于text-plain,multipart/form-data,application/x-www-form-urlencoded三者之一)</p>
<p>如果向服务器发送了额外的请求头信息，则需要在服务器端，通过Access-Control-Allow-Headers对额外的请求头进行声明，否则这次请求会失败</p>
<p>例如，允许客户端向服务器发送Content-Type请求头和X-Custom-Header请求头</p>
<blockquote>
<p>res.setHeader(‘Access-Control-Allow-Header’,’Content-Type’,’X-Custom-Header’)</p>
</blockquote>
<p>Access-Control-Allow-Methods</p>
<p>默认情况下，CORS仅支持客户端发起GET,POST,HEAD请求。如果客户端希望通过PUT,DELETE等方式请求服务器的资源，则需要在服务器端，通过Access-Control-Allow-Methods来指明实际请求所允许的HTTP方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">res.setHeader(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>)</span><br><span class="line"><span class="comment">//允许所有HTTP请求方法</span></span><br><span class="line">res.setHeader(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="请求类型"><a href="#请求类型" class="headerlink" title="请求类型"></a>请求类型</h1><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><p>满足两个条件即为简单请求：</p>
<p>1 请求方式为GET,POST,HEAD三者之一</p>
<p>2 HTTP头部信息不超过以下几种字段：无定义头部字段，Accept,Accept-Language,Content-Language,Save-Data,Viewport-Width,Width,Content-Type(仅限于text-plain,multipart/form-data,application/x-www-form-urlencoded三者之一)</p>
<p>特点：客户端与服务器只发生一次请求</p>
<h3 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h3><p>1 请求方式为GET,POST,HEAD之外的请求方法</p>
<p>2 请求头中包含自定义头部字段</p>
<p>3 向服务器发送了application/jso格式的数据</p>
<p>在浏览器服务器的正式通信之前，浏览器会先发送OPTION请求进行预检，以获知该服务器是否允许该实际请求，这一次OPTION称为预检请求，服务器成功响应预检请求后才会发送真正的请求并且携带真正的数据。</p>
<p>特点：客户端与服务器只发生两次请求</p>
<h1 id="CORS注意事项"><a href="#CORS注意事项" class="headerlink" title="CORS注意事项"></a>CORS注意事项</h1><p>1 CORS主要在服务器端进行配置，客户端浏览器无需做任何额外的配置，即可请求开启CORS的接口</p>
<p>2 CORS在浏览器中有兼容性，只有支持XMLHttpRequest Level2的浏览器才能正常访问开启了CORS的服务端接口（IE10+,Chrome4+等）</p>
]]></content>
      <categories>
        <category>Node</category>
        <category>Express</category>
      </categories>
  </entry>
  <entry>
    <title>自定义表单中间件</title>
    <url>/2022/03/13/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//导入处理查询字符串的querystring,通过这个模块提供的parse()函数，可以查询字符串，解析成对象的格式</span></span><br><span class="line"><span class="comment">//const qs=require(&#x27;querystring&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> customBodyParser=<span class="built_in">require</span>(<span class="string">&#x27;./custom-body-parser&#x27;</span>)</span><br><span class="line">app.use(customBodyParser)</span><br><span class="line">app.post(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(req.body)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>customBodyParser.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> qs=<span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1 定义一个str字符串，专门用来存储客户端发送过来的请求体数据</span></span><br><span class="line">    <span class="keyword">let</span> str=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment">//监听req的data事件</span></span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">        str+=chunk</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//监听req的end事件</span></span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//在str存放的是完整的请求体数据，解析成对象格式 调用qs.parse()方法，把查询字符串解析为对象</span></span><br><span class="line">        <span class="keyword">const</span> body=qs.parse(str)</span><br><span class="line">        req.body=body<span class="comment">//将解析处的请求体数据挂载为req.body</span></span><br><span class="line">        next()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=bodyParser</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Node</category>
        <category>Express</category>
      </categories>
  </entry>
  <entry>
    <title>路由</title>
    <url>/2022/03/12/%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>中间件</title>
    <url>/2022/03/12/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="使用express创建服务器，发起Get-Post请求"><a href="#使用express创建服务器，发起Get-Post请求" class="headerlink" title="使用express创建服务器，发起Get,Post请求"></a>使用express创建服务器，发起Get,Post请求</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//监听客户端的get请求post请求,并向客户端响应请求</span></span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;请求成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取请求参数</span></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//req.query可以获取到客户端发送过来的查询参数向客户端响应一个查询参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.query)</span><br><span class="line">    res.send(req.query)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取到URL中的动态参数</span></span><br><span class="line">app.get(<span class="string">&quot;/user/:id/:username&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.params)</span><br><span class="line">    res.send(req.params)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h2><p>express.static()：创建一个静态资源服务器，通过如下代码可以将public目录下的图片，CSS文件，JavaScript文件对外开放访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器实例</span></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//托管多个静态资源目录,express.static会根据目录的添加顺序查找所需文件，http://127.0.0.1,public不出现在路径中</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>))</span><br><span class="line">app.use(express.static(<span class="string">&#x27;files&#x27;</span>))</span><br><span class="line"><span class="comment">//希望挂载前缀</span></span><br><span class="line">ap.use(<span class="string">&#x27;/public&#x27;</span>,express.static(<span class="string">&#x27;public&#x27;</span>,))<span class="comment">//打开的是http://127.0.0.1/public，如果希望public出现在路径中则将访问前缀写public</span></span><br><span class="line"><span class="comment">//启动服务器</span></span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="中间件的作用："><a href="#中间件的作用：" class="headerlink" title="中间件的作用："></a>中间件的作用：</h3><p>多个中间件之间共享一份req和res,基于这种特性可以在上游的中间件中，统一为req或res对象添加自定义顶点属性或方法，供下游的中间件或路由进行使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//中间件的作用：共享req,res</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> time=<span class="built_in">Date</span>.now()</span><br><span class="line">    req.startTime=time</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;Home page&#x27;</span>+req.startTime)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;User page&#x27;</span>+req.startTime)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="中间件分类："><a href="#中间件分类：" class="headerlink" title="中间件分类："></a>中间件分类：</h3><p>[]: <a href="http://expressjs.com/en/guide/using-middleware.html">http://expressjs.com/en/guide/using-middleware.html</a></p>
<p><strong>错误级别的中间件要注册在所有路由之后</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;服务器发生错误&#x27;</span>)</span><br><span class="line">   res.send(<span class="string">&#x27;Home page&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//错误级别中间件必须注册在所有路由之后</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.message)</span><br><span class="line">    res.send(<span class="string">&#x27;Something broke:&#x27;</span>+err.message)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="使用中间件的注意事项"><a href="#使用中间件的注意事项" class="headerlink" title="使用中间件的注意事项"></a>使用中间件的注意事项</h3><ul>
<li>要在路由之前注册中间件</li>
<li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li>
<li>执行完中间件的业务代码，要记得调用next（）函数</li>
<li>连续调用的多个中间件时，多个中间件间共享req和res对象</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
        <category>Express</category>
      </categories>
  </entry>
  <entry>
    <title>Web和微信小程序中本地存储的差别</title>
    <url>/2022/03/01/Web%E5%92%8C%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E7%9A%84%E5%B7%AE%E5%88%AB/</url>
    <content><![CDATA[<h2 id="Web和微信小程序中本地存储的差别"><a href="#Web和微信小程序中本地存储的差别" class="headerlink" title="Web和微信小程序中本地存储的差别"></a>Web和微信小程序中本地存储的差别</h2><h3 id="使用上"><a href="#使用上" class="headerlink" title="使用上"></a>使用上</h3><p>Web:localStorage.setItem(“key”,”value”)         </p>
<p>​         localStorage.getItem(“key”)</p>
<p>小程序中：wx.setStorageSync(“key”,”value”);</p>
<p>​                    wx.getStorageSync(“key”)</p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>Web:不管存入的是什么类型的数据，最终都会先调用toString()，把数据编程字符串再存进去</p>
<p>小程序：不存在类型转换，存什么类型的数据进去，获取的就是什么类型的数据</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>swiper</title>
    <url>/2022/02/28/swiper/</url>
    <content><![CDATA[<p>swiper存在默认宽度和高度：100%*150px</p>
<p>image存在默认宽度和高度：320px*240px</p>
<p>设计图片和轮播图：</p>
<p>1 先看原图的宽高：750*340</p>
<p>2 让图片的高度自适应    宽度等于100%</p>
<p>3 让swiper标签的高度变成和图片的一样高即可</p>
<p>4 图片标签mode=“widthFix”</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>组件通信</title>
    <url>/2022/02/26/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h2><p>1 父组件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">tabs</span>=<span class="string">&quot;&#123;&#123;tabs&#125;&#125;&quot;</span> <span class="attr">binditemChange</span>=<span class="string">&quot;handleItemChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.子组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">       <span class="attr">tabs</span>:&#123;</span><br><span class="line">           <span class="attr">type</span>:<span class="built_in">Array</span>,</span><br><span class="line">           <span class="attr">value</span>:[]</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="子组件向父组件传递数据："><a href="#子组件向父组件传递数据：" class="headerlink" title="子组件向父组件传递数据："></a>子组件向父组件传递数据：</h2><p>1 子组件：用this.triggerEvent(“事件名”,传递的参数)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">       <span class="function"><span class="title">handle</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">           <span class="keyword">const</span> &#123;index&#125;=e.currentTarget.dataset;</span><br><span class="line">           <span class="built_in">this</span>.triggerEvent(<span class="string">&quot;itemChange&quot;</span>,&#123;index&#125;);</span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>2 父组件：用”bind+事件名”触发自定义方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">tabs</span>=<span class="string">&quot;&#123;&#123;tabs&#125;&#125;&quot;</span> <span class="attr">binditemChange</span>=<span class="string">&quot;handleItemChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Tab</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleItemChange</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//console.log(e)</span></span><br><span class="line">    <span class="keyword">const</span> &#123;index&#125;=e.detail;</span><br><span class="line">    <span class="keyword">let</span> &#123;tabs&#125;=<span class="built_in">this</span>.data;</span><br><span class="line">    tabs.forEach(<span class="function">(<span class="params">v,i</span>)=&gt;</span>i===index?v.isActive=<span class="literal">true</span>:v.isActive=<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">        tabs</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>事件绑定</title>
    <url>/2022/02/25/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="绑定输入事件"><a href="#绑定输入事件" class="headerlink" title="绑定输入事件"></a>绑定输入事件</h2><ul>
<li>用bindinput</li>
<li>获取输入框的值用e.detail.value</li>
<li>输入框赋值用this.setData({num:e.detail.num})</li>
</ul>
<h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><ul>
<li>关键字:bindtap</li>
<li>无法在小程序中的事件直接传参，通过自定义事件传参</li>
<li>事件源中获取自定义属性</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
  </entry>
  <entry>
    <title>路由参数</title>
    <url>/2022/02/06/%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h1 id="query参数："><a href="#query参数：" class="headerlink" title="query参数："></a>query参数：</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;m in messageList&#x27;</span> <span class="attr">:key</span>=<span class="string">&#x27;m.id&#x27;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 通过query传递参数 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">              name:&#x27;messageDetail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">              query:&#123;id:m.id,title:m.title&#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#125;&quot;</span>&gt;</span>&#123;&#123;m.title&#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="params参数"><a href="#params参数" class="headerlink" title="params参数:"></a>params参数:</h1><p>1 配置路由声明接收param参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:Home,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;<span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>:News&#125;,</span><br><span class="line">                &#123;<span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>:Message, </span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;<span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;messageDetail&#x27;</span>,<span class="attr">component</span>:Detail&#125;<span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">                ]&#125;</span><br><span class="line">            ]&#125;,</span><br></pre></td></tr></table></figure>

<p>2 传递参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;m in messageList&#x27;</span> <span class="attr">:key</span>=<span class="string">&#x27;m.id&#x27;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--跳转并携带params参数，to的字符写法--!&gt;</span></span><br><span class="line"><span class="comment">         &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt; </span></span><br><span class="line"><span class="comment">         &lt;!-- 对象写法只能写name不能写path --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- &lt;router-link :to=&quot;</span></span><br><span class="line"><span class="comment">          &#123;name:&#x27;messageDetail&#x27;,</span></span><br><span class="line"><span class="comment">          params:&#123;id:m.id,title:m.title&#125;</span></span><br><span class="line"><span class="comment">          </span></span><br><span class="line"><span class="comment">              &#125;&quot;&gt;&#123;&#123;m.title&#125;&#125;&lt;/router-link&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置项</p>
<h1 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//props第一种写法，值为对象，该对象中的key-value都会以props的形式传给Detail组件</span></span><br><span class="line"><span class="attr">props</span>:&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="string">&#x27;hello&#x27;</span>&#125;,</span><br><span class="line"><span class="comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数以props的形式传给Detail组件</span></span><br><span class="line"><span class="attr">props</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="comment">//第三种写法，值为函数</span></span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;<span class="attr">id</span>:$route.query.id,<span class="attr">title</span>:$route.query.title&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//解构赋值</span></span><br><span class="line"><span class="function"><span class="title">props</span>(<span class="params">&#123;query&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">id</span>:query.id,<span class="attr">title</span>:query.title&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Detail组件接收参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Detail&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Vue3事件总线</title>
    <url>/2022/02/02/Vue3%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h1><p>一种组件间的通信方式，适用于任意组件间的通信。</p>
<p>安装全局事件总线：</p>
<ol>
<li><p>引入/编写事件库</p>
</li>
<li><p>在入口文件中挂载</p>
</li>
<li><p>在组件中引入并使用</p>
<p>安装：npm install –save vue3-eventbus</p>
<p>挂载：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//App.vue</span><br><span class="line">import eventBus from &#x27;vue3-eventbus&#x27;</span><br><span class="line">app.use(eventBus)</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//Button.vue</span><br><span class="line">import bus from &#x27;vue3-eventbus&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">	setup()&#123;</span><br><span class="line">		bus.emit(&#x27;foo&#x27;,&#123;a:&#x27;b&#x27;&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="消息订阅预发布（pubsub"><a href="#消息订阅预发布（pubsub" class="headerlink" title="消息订阅预发布（pubsub)"></a>消息订阅预发布（pubsub)</h1><ol>
<li><p>安装pubsub:npm install pubsub-js</p>
</li>
<li><p>引入：import pubsub from “pubsub-js”</p>
</li>
<li><p>接收数据，A组件想接收数据，则在A组件中订阅消息，订阅回调留在A组件自身。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">	demo(data)&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">mounted()&#123;</span><br><span class="line">this.pid=pubsub.subscribe(&#x27;xxx&#x27;,(msg,data)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;)//订阅消息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>提供数据：pubsub.publish(‘xxx’,数据)</li>
<li>最好在beforeDestroy钩子中，用Pubsub.unsubscribe(pid)取消订阅</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>customRef</title>
    <url>/2022/02/01/customRef/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">        function myRef(value,delay=500)&#123;</span><br><span class="line">            let timeout</span><br><span class="line">            return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    get()&#123;</span><br><span class="line">                        console.log(`有人从myRef中读取了数据:$&#123;value&#125;`)</span><br><span class="line">                        track()//通知Vue追踪value的变化（提前和get商量一下，让它认为这个value是可用的）</span><br><span class="line">                        return value</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set(newValue)&#123;</span><br><span class="line">                        clearTimeout(timeout)</span><br><span class="line">                        console.log(`有人从myRef中修改了数据:$&#123;newValue&#125;`)</span><br><span class="line">                        timeout=setTimeout(()=&gt;&#123;</span><br><span class="line">                            value=newValue</span><br><span class="line">                            trigger()//通知Vue重新解析模板</span><br><span class="line">                        &#125;,delay)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        let val=myRef(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">        return &#123;</span><br><span class="line">            val</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>shallowReactive和shallowRef</title>
    <url>/2022/01/31/shallowReactive%E5%92%8CshallowRef/</url>
    <content><![CDATA[<p>shallowReactive:只处理对象最外层属性的响应式（浅响应式）</p>
<p>shallowRef:只处理基本数据类型的响应式，不进行对象的响应式处理</p>
<p>什么时候使用？</p>
<p>如果有一个对象数据，结构比较深，但变化时只是外层属性变化==&gt;shallowReactive</p>
<p>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换==&gt;shallowRef</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>toRef</title>
    <url>/2022/01/31/toRef/</url>
    <content><![CDATA[<h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef:"></a>toRef:</h1><p>作用：创建一个ref对象，其value值指向另一个对象中的某个属性</p>
<p>语法：const name=toRef(person,’name’)</p>
<p>应用：要将响应式对象中的某个属性单独提供给外部使用时</p>
<p>扩展:toRefs与toRef功能一致，但可以批量创建多个ref对象，语法：toRefs(person),将响应式对象转换为普通对象，其中结果对象的每个 property 都是指向原始对象相应 property 的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref"><code>ref</code></a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  setup()&#123;</span><br><span class="line">        let person=reactive(&#123;</span><br><span class="line">            firstName:&quot;张&quot;,</span><br><span class="line">            lastName:&quot;三&quot;,</span><br><span class="line">            fullName:&#x27;&#x27;,</span><br><span class="line">            job:&#123;</span><br><span class="line">                one:&#x27;doctor&#x27;,</span><br><span class="line">                tow:&#x27;teacher&#x27;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        person.fullName=computed(&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">                return person.firstName+&#x27;-&#x27;+person.lastName</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">                const nameArr=value.split(&#x27;-&#x27;)</span><br><span class="line">                person.firstName=nameArr[0]</span><br><span class="line">                person.lastName=nameArr[1]</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        return &#123;</span><br><span class="line">            person,</span><br><span class="line">            firstName:toRef(person,&#x27;firstName&#x27;),</span><br><span class="line">            lastName:toRef(person,&#x27;lastName&#x27;),</span><br><span class="line">            one:toRef(person.job,&#x27;one&#x27;),</span><br><span class="line">            fullName:toRef(person,&#x27;fullName&#x27;)</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">//toRefs:</span><br><span class="line">/*return &#123;</span><br><span class="line">            person,</span><br><span class="line">            ...toRefs(person),</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">        &#125;*/</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>watchEffect</title>
    <url>/2022/01/30/watchEffect/</url>
    <content><![CDATA[<h1 id="watch和watchEffect区别："><a href="#watch和watchEffect区别：" class="headerlink" title="watch和watchEffect区别："></a>watch和watchEffect区别：</h1><p>watch:既要指明监视的属性，也要指明监视的回调</p>
<p>watchEffect:不用指明监视哪个属性，监视的回调中用到哪个属性就监视哪个属性</p>
<p>watchEffect有点像computed:</p>
<p>但computed注重的是计算出来的值即回调函数的返回值，所以必须要写返回值</p>
<p>而watch注重的是过程即回调函数的函数体，所以不用写返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//watchEffect指定的回调函数中用到的数据只要发生变化，则直接重新执行回调</span><br><span class="line">		let sum=ref(1)</span><br><span class="line">        let msg=ref(&quot;你好呀&quot;)</span><br><span class="line">         watchEffect(()=&gt;&#123;</span><br><span class="line">            const x1=sum.value</span><br><span class="line">            const x2=person.firstName</span><br><span class="line">            console.log(&#x27;watchEffect的回调被调用了&#x27;,x1,x2)</span><br><span class="line">        &#125;)</span><br><span class="line">       </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2022/01/30/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p>大家写二分法经常写乱，主要是因为<strong>对区间的定义没有想清楚，区间的定义就是不变量</strong>。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量</strong>规则。</p>
<p>写二分法，区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。</p>
<p>下面我用这两种区间的定义分别讲解两种不同的二分写法。</p>
<h1 id="二分法第一种写法"><a href="#二分法第一种写法" class="headerlink" title="二分法第一种写法"></a>二分法第一种写法</h1><p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是[left, right] （这个很重要非常重要）</strong>。</p>
<p>区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义target在[left, right]区间，所以有如下两点：</strong></p>
<ul>
<li><p>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</p>
</li>
<li><p>if (nums[middle] &gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 版本一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>; <span class="comment">// 定义target在左闭右闭的区间里，[left, right]</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123; <span class="comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span></span><br><span class="line">            <span class="keyword">int</span> middle = left + ((right - left) / <span class="number">2</span>);<span class="comment">// 防止溢出 等同于(left + right)/2</span></span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle - <span class="number">1</span>; <span class="comment">// target 在左区间，所以[left, middle - 1]</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，所以[middle + 1, right]</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到目标值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="二分法第二种写法"><a href="#二分法第二种写法" class="headerlink" title="二分法第二种写法"></a>二分法第二种写法</h1><p>如果说定义 target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。</p>
<p>有如下两点：</p>
<ul>
<li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li>
<li>if (nums[middle] &gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 版本二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>(); <span class="comment">// 定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123; <span class="comment">// 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span></span><br><span class="line">            <span class="keyword">int</span> middle = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[middle] &gt; target) &#123;</span><br><span class="line">                right = middle; <span class="comment">// target 在左区间，在[left, middle)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>; <span class="comment">// target 在右区间，在[middle + 1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[middle] == target</span></span><br><span class="line">                <span class="keyword">return</span> middle; <span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到目标值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>插槽</title>
    <url>/2022/01/29/%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<p>1 作用：</p>
<p>让父组件可以向子组件指定位置插入html结构，是一种组件间的通信方式，适用于父组件=&gt;子组件</p>
<p>2 使用方式</p>
<p>（1）默认插槽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">	&lt;Category&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            html结构</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">	&lt;/Category&gt;</span><br><span class="line">子组件：</span><br><span class="line">	&lt;template&gt;</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">            &lt;slot&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">	&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>2 具名插槽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">	&lt;Category&gt;</span><br><span class="line">         &lt;template #header&gt;</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">                html结构</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">                html结构</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:footer&gt;</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">                html结构</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">	&lt;/Category&gt;</span><br><span class="line">子组件：</span><br><span class="line">	&lt;template&gt;</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">            &lt;slot name=&quot;center&quot;&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">            &lt;slot name=&quot;footer&quot;&gt;插槽默认内容&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">	&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>3 作用域插槽</p>
<p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者决定，(games数据在Category组件中，但使用数据所遍历的结构由App组件决定)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件：</span><br><span class="line">&lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">    &lt;template v-slot=&quot;&#123;games&#125;&quot;&gt;</span><br><span class="line">         &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;(game,index) in games&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123;game&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;     </span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">&lt;Category title=&quot;游戏&quot;&gt;</span><br><span class="line">    &lt;template v-slot=&quot;&#123;games&#125;&quot;&gt;</span><br><span class="line">         &lt;ol&gt;</span><br><span class="line">        &lt;li v-for=&quot;(game,index) in games&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123;game&#125;&#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;     </span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">    &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;reactive&#125; from &quot;vue&quot;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Category&#x27;,</span><br><span class="line">    props:[&#x27;title&#x27;],</span><br><span class="line">    setup()&#123;</span><br><span class="line">        let games=reactive([&#x27;红色警戒&#x27;,&#x27;超级玛丽&#x27;,&#x27;穿越火线&#x27;,&#x27;魂斗罗&#x27;])</span><br><span class="line">        return&#123;</span><br><span class="line">            games</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>ref函数</title>
    <url>/2022/01/27/ref%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="ref函数："><a href="#ref函数：" class="headerlink" title="ref函数："></a>ref函数：</h1><p>作用：定义一个响应式函数</p>
<p>语法：const xxx=ref(initValue)</p>
<p>创建一个包含响应式数据的引用对象（reference对象，简称ref对象)</p>
<p>JS中操作数据：xxx.value</p>
<p>模板中读取数据，不需要.value,直接<div></div></p>
<p>Ps:</p>
<p>接收的数据类型可以是：基本类型也可以是对象类型</p>
<p>基本类型的数据：响应式依然是靠Object.defineProperty()的get与set完成</p>
<p>对象基本类型的数据：内部是求助了Vue3中的一个新函数——reactive函数</p>
<h2 id="ref与reactive对比："><a href="#ref与reactive对比：" class="headerlink" title="ref与reactive对比："></a>ref与reactive对比：</h2><h3 id="定义数据角度："><a href="#定义数据角度：" class="headerlink" title="定义数据角度："></a>定义数据角度：</h3><p>ref用来定义：基本类型数据</p>
<p>reactive用来定义：对象（或数组类型数据）</p>
<p>PS：ref也可以用来定义对象（或数组）类型数据，它内部会自动通过reactive转为代理对象</p>
<h3 id="从原理角度对比："><a href="#从原理角度对比：" class="headerlink" title="从原理角度对比："></a>从原理角度对比：</h3><p>ref通过Object.defineProperty()的getter和setter来实现响应式（数据劫持）</p>
<p>reactive通过使用Proxy来实现响应式，并通过Reflect操作源对象内部的数据</p>
<h3 id="使用角度对比："><a href="#使用角度对比：" class="headerlink" title="使用角度对比："></a>使用角度对比：</h3><p>ref定义的数据，操作数据需要通过.value,读取数据时模板直接读取不需要.value</p>
<p>reactive定义的数据操作数据与读取数据均不需要.value</p>
<h1 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h1><p>isRef:检查一个值是否为一个ref对象</p>
<p>isReactive:检查一个对象是否由reactive创建的响应式代理</p>
<p>isReadonly:检查一个对象是否由readonly创建的只读代理</p>
<p>isProxy:检查一个对象是否由reactive或者readonly方法创建的代理</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>props</title>
    <url>/2022/01/27/props/</url>
    <content><![CDATA[<p>配置项:props</p>
<p>功能：让组件接收外部传来的数据</p>
<p>（1）传递数据：</p>
<p>第一种方式（只接收）：props:[‘name’]</p>
<p>第二种方式（限制类型）：props:{name:String}</p>
<p>第三种方式（限制类型，限制必要性，指定默认值）：</p>
<p>props:{</p>
<p>​    name:{</p>
<p>​        type:String,//类型</p>
<p>​        required:true,//必要性</p>
<p>​        dedault:’老王’//默认值</p>
<p>​    }</p>
<p>}</p>
<p>Ps:props是只读的，vue底层会监视你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后修改data中的数</p>
<p>eg:data(){</p>
<p>return{</p>
<p>myName:this.myName</p>
<p>}</p>
<p>}</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>生命周期钩子</title>
    <url>/2022/01/26/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/</url>
    <content><![CDATA[<p>beforeCreate,created,beforeMount,mounted,beforeUpdated,updated,beforeUnmount,unmounted</p>
<h1 id="常用生命周期钩子"><a href="#常用生命周期钩子" class="headerlink" title="常用生命周期钩子:"></a>常用生命周期钩子:</h1><p>mounted:发送ajax请求，启动定时器，绑定自定义事件，订阅消息等【初始化操作】</p>
<p>beforeUnmount:清除定时器，解绑自定义事件，取消订阅消息等【收尾工作】</p>
<p>关于销毁实例：</p>
<p>1销毁后借助Vue开发者工具看不到任何信息</p>
<p>2 销毁后自定义事件失效，但原生DOM事件依然有效</p>
<p>3 一般不会在beforeUnmount操作数据，因为即使操作数据，也不会触发更新流程了</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>自定义指令</title>
    <url>/2022/01/25/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="1-语法："><a href="#1-语法：" class="headerlink" title="1.语法："></a>1.语法：</h2><h3 id="（1）-局部指令："><a href="#（1）-局部指令：" class="headerlink" title="（1） 局部指令："></a>（1） 局部指令：</h3><p>​    directives:{指令名：配置对象}或 directives：{指令名:回调函数}</p>
<h3 id="（2）全局指令："><a href="#（2）全局指令：" class="headerlink" title="（2）全局指令："></a>（2）全局指令：</h3><p>Vue.directive(指令名，配置对象)或Vue.directive(指令名，回调函数)</p>
<h2 id="2-配置对象中常用的回调"><a href="#2-配置对象中常用的回调" class="headerlink" title="2.配置对象中常用的回调"></a>2.配置对象中常用的回调</h2><p><code>created</code>：在绑定元素的 attribute 或事件监听器被应用之前调用。在指令需要附加在普通的 <code>v-on</code> 事件监听器调用前的事件监听器中时，这很有用。` </p>
<p><code>beforeMount</code>：当指令第一次绑定到元素并且在挂载父组件之前调用。<code>mounted</code>：指令与元素成功绑定时使用</p>
<p><code>updated</code>:在包含组件的 VNode <strong>及其子组件的 VNode</strong> 更新后调用。</p>
<p><code>beforeUpdate</code>：在更新包含组件的 VNode 之前调用。</p>
<p><code>beforeUnmount</code>：在卸载绑定元素的父组件之前调用</p>
<p><code>unmounted</code>：当指令与元素解除绑定且父组件已卸载时，只调用一次。</p>
<p>PS:指令定义时不加v-,，但是使用时要加v-</p>
<p>指令名如果是多个单词要用kebab-case命名方式，不要用camelCase命名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;当前n:&lt;span v-text=&quot;n&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;放大10倍后的n：&lt;span v-big=&quot;n&quot;&gt;&#123;&#123;n&#125;&#125;&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.createApp(&#123;</span><br><span class="line">            data()&#123;</span><br><span class="line">                return&#123;</span><br><span class="line">                    name:&quot;ann&quot;,</span><br><span class="line">                    n:1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            directives: &#123;</span><br><span class="line">                //v-big被调用：指令与元素成功绑定时（一上来） 指令所在模板重新编译时</span><br><span class="line">                big(element,binding)&#123;</span><br><span class="line">                   element.innerText=binding.value*10</span><br><span class="line">                   </span><br><span class="line">                &#125;,</span><br><span class="line">               /*fbind(element,binding)&#123;</span><br><span class="line">                    element.value=binding.value</span><br><span class="line">                    element.focus()</span><br><span class="line">                &#125;,*/</span><br><span class="line">               fbind:&#123;</span><br><span class="line">                   // 当被绑定的元素挂载到 DOM 中时……</span><br><span class="line">                    mounted(element,binding)&#123;</span><br><span class="line">                        console.log(this)</span><br><span class="line">                        element.value=binding.value</span><br><span class="line">                        element.focus()</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    updated(element,binding)&#123;</span><br><span class="line">                        element.value=binding.value</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).mount(&quot;#root&quot;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>内置指令</title>
    <url>/2022/01/25/%E5%86%85%E7%BD%AE%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="v-html"><a href="#v-html" class="headerlink" title="v-html:"></a>v-html:</h1><p>1 作用：向指定节点中渲染包含html的内容</p>
<p>2 与插值语法的区别：</p>
<p>（1）v-html会替换掉节点中所有内容，则不会</p>
<p>（2）v-html可以识别html结构</p>
<p>3 严重注意：v-html有安全性问题</p>
<p>（1）在网站上动态渲染任意HTML非常危险，容易导致XSS攻击</p>
<p>（2）一定要在可信内容上使用v-html，永远不要用在用户提交的内容上</p>
<h1 id="v-cloak-没有值"><a href="#v-cloak-没有值" class="headerlink" title="v-cloak(没有值)"></a>v-cloak(没有值)</h1><p>1 本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性</p>
<p>2 使用css配合一个v-clock可以解决网速慢时页面展示出的问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        [v-cloak]&#123;</span><br><span class="line">            display:none</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"> &lt;h2 v-cloak&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;script&gt;&lt;/script&gt;//延迟5秒的服务器</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.createApp(&#123;</span><br><span class="line">            data()&#123;</span><br><span class="line">                return&#123;</span><br><span class="line">                    name:&#x27;Ann&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="v-once"><a href="#v-once" class="headerlink" title="v-once:"></a>v-once:</h1><ol>
<li>v-once 节点在初次动态渲染后，就被视为静态内容</li>
<li> 以后数据改变不会引起v-once所在结构的更新，可以用于优化性能</li>
</ol>
<h1 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre:"></a>v-pre:</h1><p>1.跳过其所在节点的编译过程</p>
<p>2.可利用它跳过没有使用指令语法，插值语法的节点，加快编译</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>收集表单数据</title>
    <url>/2022/01/25/%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>收集表单数据：</p>
<p><input type="text">,v-model收集的死是value值，用户输入的是value值</p>
<p><input type="radio">,v-model收集的是value值，且给标签配置value值</p>
<input type="checkbox">

<p>(1）没有配置input的value属性，收集的是checked(true/false)</p>
<p>(2)配置input的value属性：</p>
<p>若v-model的初始值是非数组，收集的是checked(true/false)</p>
<p>若v-model的初始值是数组，收集的是value组成的数组</p>
<p>PS：</p>
<p>v-model有三个修饰符：</p>
<p>lazy:失去焦点再收集数据</p>
<p>number:把输入的字符串转为有效数字</p>
<p>trim: 输入首尾空格过滤</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>Node.js基础</title>
    <url>/2022/01/24/Node-js%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Node.js运行时结构：</p>
<p>1 异步IO</p>
<p>当Node.js执行I/O操作时，会在响应返回后恢复操作，而不是阻止线程并占用额外内存等待</p>
<p>2 单线程</p>
<p>实际JS线程+uv线程池+V8任务线程池+V8inspector线程</p>
<p>优点：不用考虑多线程同步问题，也就不需要锁，同时还能比较高效的利用系统资源</p>
<p>缺点：阻塞会产生负面影响，解决方法：多进程或多线程</p>
<p>3 跨平台</p>
<p>Node.js跨平台+JS无需编译环境（Web跨平台，诊断工具跨平台）</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
  </entry>
  <entry>
    <title>Vue监视数据原理</title>
    <url>/2022/01/24/Vue%E7%9B%91%E8%A7%86%E6%95%B0%E6%8D%AE%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Vue监视数据原理"><a href="#Vue监视数据原理" class="headerlink" title="Vue监视数据原理"></a>Vue监视数据原理</h1><p>1 Vue会监视data中所有层次的数据（递归）</p>
<p>2 如何监视对象中的数据？</p>
<p>通过setter实现监视，且要在new Vue的时候就传入要监测的数据。</p>
<p>（1）对象中后追加的属性，Vue默认不做响应式处理</p>
<p>（2）如需给后续添加的属性左响应式，请使用下面的API:</p>
<p>​    Vue.set(target,propertyName/index,value):target不允许是Vue实例或者vm中的data对象</p>
<p> vm.$set(target,propertyName/index,value)</p>
<p>3 如何监测数组中的数据？</p>
<p>通过包裹数组更新元素的方法实现，本质做了两件事：</p>
<p>（1） 调用原生对应的方法对数组进行更新</p>
<p>（2） 重新解析模板，进而更新页面</p>
<p>4 在Vue中修改数组中的某个元素一定要用如下方法：</p>
<p>（1）使用这些API：push(),shift(),unshift(),splice(),sort(),reverse()</p>
<p>（2）Vue.set()或vm.$set()</p>
<p>非变更方法，例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code>。它们不会变更原始数组，而<strong>总是返回一个新数组</strong>。当使用非变更方法时，可以用新数组替换旧数组：</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>key作用与原理</title>
    <url>/2022/01/24/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="key的内部原理"><a href="#key的内部原理" class="headerlink" title="key的内部原理"></a>key的内部原理</h1><p>1 虚拟DOM中key的作用：</p>
<p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】和【旧虚拟DOM】的对比，对比规则如下：</p>
<p>2 对比规则：</p>
<p>（1）旧虚拟DOM中找到与新虚拟DOM相同的key：</p>
<ul>
<li><p> 若虚拟DOM中内容不变，则直接使用之前的真实DOM</p>
</li>
<li><p>若虚拟DOM中内容变了，则生成新的真实DOM，随后替换页面中的真实    DOM    </p>
</li>
</ul>
<p>（2）旧虚拟DOM中未找到与新虚拟DOM相同的key，创建新的真实DOM，随后渲染到页面</p>
<p>3 用index作为key可能会引发的问题：</p>
<p>（1）若对数据进行逆序添加，逆序删除等操作：</p>
<p>会产生没有必要的真实DOM更新==&gt;界面效果没问题，但是效率低</p>
<p>（2）如果结构中还包含输入类DOM：</p>
<p>会产生错误的DOM更新==&gt;界面有问题</p>
<p>4 开发中如何选择key?</p>
<p>(1)最好使用每条数据的唯一标识作为key,比如id,身份证号，手机号等唯一值</p>
<p>(2)如果不存在对数据的逆序添加，逆序删除等破坏顺序的操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</p>
<p><img src="/2022/01/24/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/id_key.png" alt="id_key"></p>
<p><img src="/2022/01/24/key%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86/index_key.png" alt="index_key"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>条件渲染</title>
    <url>/2022/01/24/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><p>1 v-if:</p>
<p>写法：</p>
<p>(1). v-if=”表达式”</p>
<p>(2) v-else-if=”表达式”</p>
<p>(3) v-else</p>
<p>适用于：切换频率较低的情景</p>
<p>特点：不展示的DOM元素直接被移除</p>
<p>注意：v-if和v-else-if,v-else一起使用时要求结构不能被打断</p>
<p>2 v-show</p>
<p>写法： v-show=”表达式”</p>
<p>适用于：切换频率较高的场景</p>
<p>特点：不展示的DOM元素未被移除，使用display=none隐藏掉</p>
<p>PS：</p>
<p>1 使用v-if时，元素可能无法获取到，而使用v-show一定可以获取到</p>
<p>2 v-if可以和template配合使用</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>绑定class样式</title>
    <url>/2022/01/24/%E7%BB%91%E5%AE%9Aclass%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="绑定class样式"><a href="#绑定class样式" class="headerlink" title="绑定class样式"></a>绑定class样式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--字符串写法，适用于样式类名不确定。需要动态确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定，名字也不确定 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定，名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">        &lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line">        Vue.createApp(&#123;</span><br><span class="line">            data()&#123;</span><br><span class="line">                return&#123;</span><br><span class="line">                    name:&#x27;Ann&#x27;,</span><br><span class="line">                    mood:&#x27;normal&#x27;,</span><br><span class="line">                    classArr:[&#x27;c1&#x27;,&#x27;c2&#x27;,&#x27;c3&#x27;],</span><br><span class="line">                    classObj:&#123;</span><br><span class="line">                        &#x27;c1&#x27;:false,</span><br><span class="line">                        &#x27;c2&#x27;:false,</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                changeMood()&#123;</span><br><span class="line">                    const arr=[&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">                    this.mood=arr[Math.floor(Math.random()*3)]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;).mount(&#x27;#demo&#x27;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="绑定style样式"><a href="#绑定style样式" class="headerlink" title="绑定style样式"></a>绑定style样式</h1><p>1 :style=”{fontSize: xxx}”,其中xxx是动态值</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>watch和computed区别</title>
    <url>/2022/01/24/watch%E5%92%8Ccomputed%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别:"></a>computed和watch的区别:</h1><p>1 computed能完成的功能watch也能完成</p>
<p>2 watch能完成的功能computed不一定能完成，例如watch能完成异步操作</p>
<p>PS：</p>
<p>1 所有被Vue管理的函数要写成普通函数，这样new Vue的实例的时候this才能绑定到新创建的vm或组件实例对象</p>
<p>2 所有不被Vue管理的函数比如（定时器的回调函数，ajax的回调函数和Promise的回调函数）最好写成箭头函数，箭头函数的this绑定会继承外层函数的this绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">	data()&#123;</span><br><span class="line">		return &#123;</span><br><span class="line">		firstName:&quot;张&quot;,</span><br><span class="line">		lastName:&quot;三&quot;,</span><br><span class="line">		fullName:&quot;张三&quot;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	watch:&#123;</span><br><span class="line">		firstName(val)&#123;</span><br><span class="line">			setTimeout(()=&gt;&#123;</span><br><span class="line">			this.fullName=val+this.lastName&#125;,1000)</span><br><span class="line">		&#125;,</span><br><span class="line">		lastName(val)&#123;</span><br><span class="line">			setTimeout(()=&gt;&#123;</span><br><span class="line">			this.fullName=thia.firstName+val&#125;,1000)</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>computed</title>
    <url>/2022/01/23/computed/</url>
    <content><![CDATA[<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>1 定义： 要用的属性不存在，要通过已有的属性计算得来</p>
<p>2 原理： 底层借助了Object.defineproperty()方法提供的getter和setter。</p>
<p>3 get函数什么时候执行</p>
<p>(1) 初次读取时会执行一次</p>
<p>(2)当依赖的数据发生改变时会被再次调用</p>
<p>4 优势：与methods相比。内部有缓存机制，效率更高，调试方便</p>
<p>5 计算属性最终会出现在vm中，直接读取使用即可</p>
<p>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</p>
<p>简写：函数</p>
<h1 id="Vue3中"><a href="#Vue3中" class="headerlink" title="Vue3中"></a>Vue3中</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">	//计算属性简写</span><br><span class="line">let fullName=computed(()=&gt;&#123;</span><br><span class="line">	return person.firstName+&quot;-&quot;+person.lastName</span><br><span class="line">&#125;)</span><br><span class="line">//计算属性完整</span><br><span class="line">let fullName=comouted(&#123;</span><br><span class="line">	get()&#123;</span><br><span class="line">		return person.firstName+&quot;-&quot;+person.lastName</span><br><span class="line">	&#125;</span><br><span class="line">	set(val)&#123;</span><br><span class="line">		const nameArr=value.split(&quot;-&quot;)</span><br><span class="line">		person.firstName=nameArr[0]</span><br><span class="line">		person.lastName=nameArr[1]</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>事件处理</title>
    <url>/2022/01/23/%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="事件的基本使用："><a href="#事件的基本使用：" class="headerlink" title="事件的基本使用："></a>事件的基本使用：</h1><ol>
<li><p>使用v-on:xxx或@xxx绑定事件，其中xxx是事件名</p>
</li>
<li><p>事件的回调需要配置在methods对象中，最终会在vm上</p>
</li>
<li><p>methods中配置的函数，不要用箭头函数，否则this就不是vm</p>
</li>
<li><p>methods中配置的函数，都是被Vue管理的函数，this的指向是vm或组件实例对象</p>
</li>
<li><p>@click=”demo”和@click=”demo($event)”效果一致，但后者可以传参</p>
</li>
</ol>
<h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><p>prevent:阻止默认事件</p>
<p>stop：阻止事件冒泡</p>
<p>once:事件只触发一次</p>
<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><p>1 Vue常用按键别名：</p>
<p>回车：enter</p>
<p>删除：delete</p>
<p>退出：esc</p>
<p>空格：space</p>
<p>换行：tab(特殊，必须配合keydown使用)</p>
<p>上：up</p>
<p>下:down</p>
<p>左:left</p>
<p>右:right</p>
<p>2 Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为keb-case(短横线命名)</p>
<p>3 系统修饰符(用法特殊):ctrl,alt,shift,meta</p>
<p>(1)配合keyup使用：按下修饰键的同时再按下其他键，随后释放其他键，事件才被触发</p>
<p>(2)配合keydown使用：正常触发事件</p>
<p>4 也可以使用keyCode去指定具体的键</p>
<p>5 Vue.config.keyCode自定义键名=键码，可以定制按键别名</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>数据代理</title>
    <url>/2022/01/23/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读或写</p>
</li>
<li><p>Vue中数据代理的好处：更加方便操作data中的数据</p>
</li>
<li><p>基本原理</p>
<p>​    通过Object.defineProperty()把data对象中的所有属性添加到vm上中，为每一个添加到vm上的属性都指定一个getter()setter()函数，在getter()setter()函数；里面去操作data中对应的数据</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> const vm=Vue.createApp(&#123;</span><br><span class="line">            data()&#123;</span><br><span class="line">                return&#123;</span><br><span class="line">                    name:&#x27;Ann&#x27;,</span><br><span class="line">                    address:&#x27;06404&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">vm</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">_data&#123;</span><br><span class="line">	 name:(...),</span><br><span class="line">     address:(...),   </span><br><span class="line">	&#125;</span><br><span class="line">name:(...)</span><br><span class="line">address:(...)//Object.defineProperty()</span><br><span class="line">Object.defineProperty(vm,&#x27;name&#x27;,&#123;</span><br><span class="line">	value:_data.name.get()</span><br><span class="line">	enumerable:</span><br><span class="line">	writable:</span><br><span class="line">	configurable://默认为false,控制属性是否可以被删除</span><br><span class="line"></span><br><span class="line">	get()&#123;</span><br><span class="line">		return _data.name.get()</span><br><span class="line">	&#125;</span><br><span class="line">	set(value)&#123;</span><br><span class="line">		_data.name.set(value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(vm,&#x27;address&#x27;,&#123;</span><br><span class="line">	value:_data.address.get()</span><br><span class="line">	enumerable:</span><br><span class="line">	writable:</span><br><span class="line">	configurable://默认为false,控制属性是否可以被删除</span><br><span class="line">	get()&#123;</span><br><span class="line">		return _data.address.get()</span><br><span class="line">	&#125;</span><br><span class="line">	set(value)&#123;</span><br><span class="line">		_data.address.set(value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>MVVM</title>
    <url>/2022/01/23/MVVM/</url>
    <content><![CDATA[<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><ol>
<li><p>M:模型(Model) data中的数据</p>
</li>
<li><p>V：视图(View) 模板代码</p>
</li>
<li><p>VM:视图模型（ViewModel):Vue实例</p>
</li>
</ol>
<p>data中的所有属性最后都出现在vm身上</p>
<p>vm上的所有属性及Vue原型上的所有属性，在Vue模板中都可以直接使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">View</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">const vm=Vue.createApp(&#123;//vm:VM</span><br><span class="line">	data()&#123;</span><br><span class="line">		return&#123;</span><br><span class="line">		Model</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>数据绑定</title>
    <url>/2022/01/23/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h3 id="1-单向绑定"><a href="#1-单向绑定" class="headerlink" title="1. 单向绑定"></a>1. 单向绑定</h3><p>v-bind:数据只能从data流向页面</p>
<h3 id="2-双向绑定"><a href="#2-双向绑定" class="headerlink" title="2.双向绑定"></a>2.双向绑定</h3><p>v-model:数据不仅能从data流向页面，还能从页面流向data</p>
<p>v-model:value的value可以简写为v-model,因为v-model默认收集的就是value值</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>模板语法</title>
    <url>/2022/01/23/%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Vue-模板语法"><a href="#Vue-模板语法" class="headerlink" title="Vue 模板语法"></a>Vue 模板语法</h1><h3 id="1-插值语法"><a href="#1-插值语法" class="headerlink" title="1 插值语法"></a>1 插值语法</h3><p>功能：用于解析标签体内容</p>
<p>写法：，xxx是js表达式，直接读取js中的所有data属性</p>
<h3 id="2-指令语法"><a href="#2-指令语法" class="headerlink" title="2 指令语法"></a>2 指令语法</h3><p>功能： 用于解析标签（包括标签属性，标签内容等）</p>
<p>举例：v-bind:href=”xxx”,简写为:href=”xxx”,xxx同样可以写js表达式，且可以直接读取到data里的所有属性</p>
<p>写法：v-xxx</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>高阶函数</title>
    <url>/2022/01/17/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="高阶函数模板"><a href="#高阶函数模板" class="headerlink" title="高阶函数模板"></a>高阶函数模板</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HoF0</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">..args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fn)&#123;</span><br><span class="line">            <span class="keyword">const</span> ret=fn.apply(<span class="built_in">this</span>,args);</span><br><span class="line">            fn=<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Throttle"><a href="#Throttle" class="headerlink" title="Throttle"></a>Throttle</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,time=<span class="number">500</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer==<span class="literal">null</span>)&#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>.args);</span><br><span class="line">            timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                timer=<span class="literal">null</span>;</span><br><span class="line">            &#125;,time)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">btn.onclick=throttle(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    circle.innerHTML=<span class="built_in">parseInt</span>(circle.innerHTML)+<span class="number">1</span>;</span><br><span class="line">    circle.className=<span class="string">&#x27;fade&#x27;</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>circle.className=<span class="string">&#x27;&#x27;</span>,<span class="number">250</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Debouce"><a href="#Debouce" class="headerlink" title="Debouce"></a>Debouce</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debouce</span>(<span class="params">fn,dur</span>)</span>&#123;</span><br><span class="line">    dur=dur||<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer=setTimeOut(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">        &#125;,dur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="iterative"><a href="#iterative" class="headerlink" title="iterative"></a>iterative</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterative</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">subject,...rest</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isIterable(subject))&#123;</span><br><span class="line">            <span class="keyword">const</span> ret=[];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> obj <span class="keyword">of</span> subject)&#123;</span><br><span class="line">                ret.push(fn.apply(<span class="built_in">this</span>,[obj,...rest]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>,[subject,...rest]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过程抽象</p>
<p>HOF </p>
<p>装饰器</p>
<p>命令式/声明式</p>
<h1 id="洗牌算法："><a href="#洗牌算法：" class="headerlink" title="洗牌算法："></a>洗牌算法：</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>*<span class="title">draw</span>(<span class="params">cards</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> c=[...cards];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=c.length;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">const</span> pIdx=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*i);</span><br><span class="line">        [c[pIdx],c[i-<span class="number">1</span>]]=[c[i-<span class="number">1</span>],c[pIdx]];</span><br><span class="line">        <span class="keyword">yield</span> c[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">amount,count</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(count&lt;=<span class="number">1</span>)<span class="keyword">return</span> [amount];</span><br><span class="line">    <span class="keyword">const</span> cards=<span class="built_in">Array</span>(amount-<span class="number">1</span>).fill(<span class="number">0</span>).map(<span class="function">(<span class="params">_,i</span>)=&gt;</span>i+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">const</span> pick=draw(cards);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">        result.push(pick.next().value);</span><br><span class="line">    &#125;</span><br><span class="line">    result.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a-b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=count-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        result[i]=result[i]-result[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>CSS组合</title>
    <url>/2022/01/17/%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="组合："><a href="#组合：" class="headerlink" title="组合："></a>组合：</h1><p>直接组合： AB 满足A同时满足B eg:input:focus</p>
<p>后代组合：A B 选中B，如果它是A的子孙 eg:nav a</p>
<p>亲子组合：A&gt;B 选中B如果它是A的子元素 eg:section&gt;p</p>
<p>兄弟选择器 A<del>B 选中B如果它在A后且和A同级 eg:h2</del>p</p>
<p>相邻选择器： A+B 选中B，如果它紧跟在A后面 eg:h2+p</p>
]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
  </entry>
  <entry>
    <title>watch</title>
    <url>/2022/01/15/watch/</url>
    <content><![CDATA[<h1 id="watch"><a href="#watch" class="headerlink" title="watch()"></a>watch()</h1><p>监视属性watch：</p>
<p>1 当被监视的属性变化时（也可以监视计算属性），回调函数自动调用，进行相关操作</p>
<p>2 监视的属性必须存在才能好进行监视</p>
<p>3 监视的两种写法：</p>
<p>（1）在Vue.createApp时传入watch配置</p>
<p>（2）通过vm.$watch监视</p>
<p>4 深度监视</p>
<p>（1）Vue中的watch默认不监视对象内部值的改变（一层）</p>
<p>（2）配置deep为true,可以检测对象内部值改变（多层）</p>
<p>监视多级结构中某个属性的变化：’number.a’</p>
<p>监视多级结构中所有属性第1变化，用deep:true</p>
<p>PS：（1）Vue自身可以检测对象内部值的改变但是Vue提供的watch默认不可以</p>
<p>（2）使用watch时根据数据的具体结构，决定是否采用深度监视</p>
<p>vm.$watch(expOrFn,callback,[options])</p>
<ul>
<li>expOrFn:{string/Function}</li>
<li>callback:{Function/Object}</li>
<li>options:{Object}<ol>
<li> deep:{boolean}</li>
<li>immediate:{boolean}</li>
</ol>
</li>
</ul>
<p>返回值：unwatch函数</p>
<p>用处：观察Vue实例上的一个表达式或者一个函数计算结果的变化，回调函数得到的参数为新值和旧值。表达式只接受简单的键路径，对于复杂表达式，用函数取代</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HTML</span></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        &#123;&#123;a&#125;&#125;,&#123;&#123;b&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">//键路径</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">var</span> vm=<span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">a</span>:&#123;<span class="attr">value1</span>:<span class="string">&#x27;hello&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">               <span class="attr">b</span>:&#123;<span class="attr">value2</span>:<span class="string">&#x27;beautiful&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        </span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.$watch(<span class="string">&#x27;b.value2&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="built_in">console</span>.log(newVal,oldVal);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.b.value2=<span class="string">&#x27;bind&#x27;</span>;<span class="comment">//bind beautiful</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       <span class="comment">//修改对象内部的值但是侦听的是对象，对其属性或元素的更改不会触发侦听器，因为他们引用相同对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="built_in">console</span>.log(newVal,oldVal);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.a.value1=<span class="string">&#x27;hei&#x27;</span>;<span class="comment">//没有侦听到</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//为了发现对象内部值的变化，可以在选项参数中指定 deep: true。这个选项同样适用于监听数组变更。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="built_in">console</span>.log(newVal,oldVal);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.a.value1=<span class="string">&#x27;hei&#x27;</span>;<span class="comment">//</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">//在选项参数中指定 immediate: true 将立即以表达式的当前值触发回调</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.$watch(<span class="string">&#x27;a&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">           <span class="built_in">console</span>.log(newVal,oldVal);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       vm.a=&#123;&#125;<span class="comment">//&#123;_ob_:Observer&#125;undefined &#123;_ob_:Observer&#125;&#123;_ob_:Observer&#125;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在带有immediate选项时不能在第一次回调时取消侦听给定的property</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> unwatch=vm.$watch(</span><br><span class="line">          <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">          <span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(newVal,oldVal);</span><br><span class="line">           unwatch()</span><br><span class="line">          &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;</span><br><span class="line">      )<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<p>要在回调函数里调用一个取消侦听的函数应该先检查其函数的可用性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unwatch=<span class="literal">null</span>;</span><br><span class="line">       unwatch=vm.$watch(</span><br><span class="line">           <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">           <span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newVal,oldVal);</span><br><span class="line">            <span class="keyword">if</span>(unwatch)&#123;unwatch();&#125;</span><br><span class="line">           &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;</span><br><span class="line">       )</span><br></pre></td></tr></table></figure>

<h1 id="Vue3中的watch"><a href="#Vue3中的watch" class="headerlink" title="Vue3中的watch"></a>Vue3中的watch</h1><h2 id="两个“坑”："><a href="#两个“坑”：" class="headerlink" title="两个“坑”："></a>两个“坑”：</h2><ol>
<li><p>watch监视的是reactive定义的响应式数据则无法正确获得oldValue，watch监视的是reactive定义的响应式数据则强制开启深度监视,只能获取newValue,无法获取oldValue</p>
</li>
<li><p>监视reactive定义的某个对象中的属性（也是对象）,deep有效,仍然无法获取oldValue</p>
</li>
</ol>
<h2 id="关于-value"><a href="#关于-value" class="headerlink" title="关于.value:"></a>关于.value:</h2><ol>
<li>如果ref定义的是一个数字或者字符，比如ref(0)不能用.value</li>
<li>如果ref定义的是一个对象，则里面的属性本质上是由reactive定义，如果要监视里面的属性则得用.value，.value后由reactive定义，则自动开启深度监视，或者开启深度监视</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> setup()&#123;</span><br><span class="line">        let person=reactive(&#123;</span><br><span class="line">            firstName:&quot;张&quot;,</span><br><span class="line">            lastName:&quot;三&quot;,</span><br><span class="line">            fullName:&#x27;&#x27;,</span><br><span class="line">            job:&#123;</span><br><span class="line">                one:&#x27;doctor&#x27;,</span><br><span class="line">                tow:&#x27;teacher&#x27;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        let sum=ref(0)</span><br><span class="line">        let msg=ref(&quot;你好呀&quot;)</span><br><span class="line">//情况一：监视ref定义的响应式数据</span><br><span class="line">        watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">            console.log(&quot;sum变化了&quot;,newValue,oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line">       //情况二：监视多个ref定义的响应式数据</span><br><span class="line">        watch([sum,msg],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">            console.log(&quot;sum或msg变化了&quot;,newValue,oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        //情况三：监视reactive定义的响应式数据：若watch监视的是reactive定义的响应式数据则无法正确获得oldValue，watch监视的是reactive定义的响应式数据则强制开启深度监视,只能获取newValue,无法获取oldValue</span><br><span class="line">        watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">            console.log(&quot;person变化了&quot;,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;deep:false&#125;)//deep配置无效</span><br><span class="line">        //情况四:监视reactive定义的响应式数据中的某个属性</span><br><span class="line">         watch(()=&gt;person.firstName,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">            console.log(&quot;person的firstName变化了&quot;,newValue,oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line">       </span><br><span class="line">        //情况五：监视reactive定义的一个响应式数据中的某些属性</span><br><span class="line">        watch([()=&gt;person.firstName,()=&gt;person.lastName],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">            console.log(&quot;person的firstName/lastName变化了&quot;,newValue,oldValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        //特殊情况监视reactive定义的某个对象中的属性（也是对象）,deep有效,仍然无法获取oldValue</span><br><span class="line">         watch(()=&gt;person.job,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">            console.log(&quot;person的job变化了&quot;,newValue,oldValue)</span><br><span class="line">        &#125;,&#123;deep:true&#125;)</span><br><span class="line"> person.fullName=computed(&#123;</span><br><span class="line">            get()&#123;</span><br><span class="line">                return person.firstName+&#x27;-&#x27;+person.lastName</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123;</span><br><span class="line">                const nameArr=value.split(&#x27;-&#x27;)</span><br><span class="line">                person.firstName=nameArr[0]</span><br><span class="line">                person.lastName=nameArr[1]</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        watch()</span><br><span class="line">        return &#123;</span><br><span class="line">            person,</span><br><span class="line">            sum,</span><br><span class="line">            msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>watch</tag>
      </tags>
  </entry>
  <entry>
    <title>addLoadEvent</title>
    <url>/2022/01/10/addLoadEvent/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> oldonload=<span class="built_in">window</span>.onload;</span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">typeof</span> oldonload!=<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">           <span class="built_in">window</span>.onload=func;<span class="comment">//如果处理函数还没有绑定任何函数，就添加新函数</span></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               oldonload();</span><br><span class="line">               func();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>reduce</title>
    <url>/2022/01/07/reduce/</url>
    <content><![CDATA[<blockquote>
<p>arr.reduce(callback(accumulator,currentValue,index,array),InitValue)</p>
</blockquote>
<p>callback:执行数组中的每个值的函数，包括4个参数：</p>
<p><strong><code>accumulator</code></strong></p>
<ul>
<li><p><code>currentValue</code></p>
<p>数组中正在处理的元素。</p>
</li>
<li><p><code>index</code> 可选</p>
<p>数组中正在处理的当前元素的索引。 如果提供了<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</p>
</li>
<li><p><code>array</code>可选</p>
<p>调用<code>reduce()</code>的数组</p>
</li>
</ul>
<p><code>initialValue</code>可选</p>
<p>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>
<p>返回累计处理后的结果</p>
<h1 id="求数组中的所有值的和"><a href="#求数组中的所有值的和" class="headerlink" title="求数组中的所有值的和"></a>求数组中的所有值的和</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator,currentValue</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> accumulator+currentValue;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="comment">//累加对象数组里的值</span></span><br><span class="line"><span class="keyword">var</span> InitValue=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum=[&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">x</span>:<span class="number">2</span>&#125;,&#123;<span class="attr">x</span>:<span class="number">3</span>&#125;].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator,currentValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accumulator+currentValue;</span><br><span class="line">&#125;,InitValue);</span><br><span class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<h1 id="将二维数组转为一维"><a href="#将二维数组转为一维" class="headerlink" title="将二维数组转为一维"></a>将二维数组转为一维</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened=[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a.concat(b);&#125;,[])</span><br></pre></td></tr></table></figure>

<h1 id="计算数组中每个元素出现的个数"><a href="#计算数组中每个元素出现的个数" class="headerlink" title="计算数组中每个元素出现的个数"></a>计算数组中每个元素出现的个数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names=[<span class="string">&#x27;Alice&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Ann&#x27;</span>,<span class="string">&#x27;Alice&#x27;</span>,<span class="string">&#x27;Bob&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> countNames=names.reduce(<span class="function">(<span class="params">allNames,name</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name <span class="keyword">in</span> allNames)&#123;</span><br><span class="line">            allNames[name]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            allNames[name]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allNames;</span><br><span class="line">    &#125;,&#123;&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(countNames);</span><br></pre></td></tr></table></figure>

<h1 id="按照属性对object分类"><a href="#按照属性对object分类" class="headerlink" title="按照属性对object分类"></a>按照属性对object分类</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> people=[</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;Alice&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;Max&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">&#x27;Jane&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">groupBy</span>(<span class="params">objectArray,property</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectArray.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc,obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> key=obj[property];</span><br><span class="line">            <span class="keyword">if</span>(!acc[key])&#123;</span><br><span class="line">                acc[key]=[];</span><br><span class="line">            &#125;</span><br><span class="line">            acc[key].push(obj);</span><br><span class="line">            <span class="keyword">return</span> acc;</span><br><span class="line"></span><br><span class="line">        &#125;,&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> groupedPeople=groupBy(people,<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(groupedPeople);</span><br></pre></td></tr></table></figure>

<h1 id="使用扩展运算符绑定包含在对象数组中的数组"><a href="#使用扩展运算符绑定包含在对象数组中的数组" class="headerlink" title="使用扩展运算符绑定包含在对象数组中的数组"></a>使用扩展运算符绑定包含在对象数组中的数组</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> friends=[&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;Anna&#x27;</span>,</span><br><span class="line">        <span class="attr">books</span>:[<span class="string">&#x27;Bible&#x27;</span>,<span class="string">&#x27;Harry Potter&#x27;</span>],</span><br><span class="line">        <span class="attr">age</span>:<span class="number">21</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;Bob&#x27;</span>,<span class="attr">books</span>:[<span class="string">&#x27;War and Peace&#x27;</span>],<span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;Mike&#x27;</span>,<span class="attr">books</span>:[<span class="string">&#x27;The Shining&#x27;</span>,<span class="string">&#x27;The Lord of the Rings&#x27;</span>],<span class="attr">age</span>:<span class="number">18</span>&#125;];</span><br><span class="line">    <span class="keyword">var</span> allBooks=friends.reduce(<span class="function">(<span class="params">prev,curr</span>)=&gt;</span>&#123;<span class="keyword">return</span> [...prev,...curr.books]&#125;,[<span class="string">&#x27;Alphabet&#x27;</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(allBooks);</span><br></pre></td></tr></table></figure>

<h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myArray=[<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">let</span> myOrderedArray=myArray.reduce(<span class="function">(<span class="params">accumulator,currval</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(accumulator.indexOf(currval)==-<span class="number">1</span>)&#123;</span><br><span class="line">          accumulator.push(currval);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> accumulator;</span><br><span class="line"></span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="built_in">console</span>.log(myOrderedArray);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2022/01/06/Promise/</url>
    <content><![CDATA[<h1 id="期约状态机"><a href="#期约状态机" class="headerlink" title="期约状态机"></a>期约状态机</h1><p>Promise可以通过 new 操作符来实例化。创建新期约时需要传入<br>执行器（executor）函数作为参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p); <span class="comment">// Promise &lt;pending&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在把一个期约实例传给 console.log()时，控制台输出（可能因浏览器不同而略有差异）表明该实例处于待定（pending）状态。如前所述，期约是一个有状态的对象，可能处于如下 3 种状态之一：</p>
<ul>
<li><p><strong>待定</strong>（pending）是期约的最初始状态。在待定状态下，<strong>期约可以落定（settled）为代表成功的兑现（fulfilled）状态，或者代表失败的拒绝（rejected）状态。</strong>无论落定为哪种状态都是不可逆的。只要从待定转换为兑现或拒绝，期约的状态就不再改变。而有时候也称为“解决”，resolved）</p>
</li>
<li><p><strong>兑现</strong>（fulfilled)每个期约只要状态切换为兑现，就会有一个私有的内部值（value）</p>
</li>
<li><p><strong>拒绝</strong>（rejected）如果期约被拒绝，程序就会期待期约状态改变时可以拿到拒绝的理由</p>
<h2 id="期约用途"><a href="#期约用途" class="headerlink" title="期约用途"></a>期约用途</h2><p>期约主要有两大用途。首先是抽象地表示一个异步操作。期约的状态代表期约是否完成。某些情况下，这个状态机就是期约可以提供的最有用的信息。</p>
</li>
</ul>
<h1 id="通过执行函数控制期约状态"><a href="#通过执行函数控制期约状态" class="headerlink" title="通过执行函数控制期约状态"></a>通过执行函数控制期约状态</h1><p>期约的状态是私有的，所以只能在内部进行操作。内部操作在期约的执行器函数中完成。执行器函数主要有两项职责：<strong>初始化期约的异步行为和控制状态的最终转换</strong>。其中，控制期约状态的转换是<br>通过调用它的两个函数参数实现的。这两个函数参数通常都命名为 resolve()和 reject()。调用resolve()会把状态切换为兑现，调用 reject()会把状态切换为拒绝。另外，调用 reject()也会抛出错误</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>resolve());</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log,<span class="number">0</span>,p1);<span class="comment">//Promise &lt;resolved&gt;</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject());</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;rejected&gt;</span></span><br><span class="line"><span class="comment">// Uncaught error (in promise)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在前面的例子中，并没有什么异步操作，因为在初始化期约时，执行器函数已经改变了每个期约的状态，执行器函数是同步执行的。这是因为执行器函数是期约的初始化程序。</p>
<p>添加 setTimeout 可以推迟切换状态：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line"><span class="comment">// 在 console.log 打印期约实例的时候，还不会执行超时回调（即 resolve()）</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p); <span class="comment">// Promise &lt;pending&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>无论 resolve()和 reject()中的哪个被调用，状态转换都不可撤销了。于是继续修改状态会静默失败，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">resolve();</span><br><span class="line">reject(); <span class="comment">// 没有效果</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p); <span class="comment">// Promise &lt;resolved&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h1><p>下面两个期约实例实际上是一样的：</p>
<blockquote>
<p>let p1 = new Promise((resolve, reject) =&gt; resolve());<br>let p2 = Promise.resolve();</p>
</blockquote>
<p>这个解决的期约的值对应着传给 Promise.resolve()的第一个参数。使用这个静态方法，实际上可以把任何值都转换为一个期约</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log,<span class="number">0</span>,<span class="built_in">Promise</span>.resolve());</span><br><span class="line"><span class="comment">// Promise &lt;resolved&gt;: undefined</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="built_in">Promise</span>.resolve(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// Promise &lt;resolved&gt;: 3</span></span><br><span class="line"><span class="comment">// 多余的参数会忽略</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="built_in">Promise</span>.resolve(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line"><span class="comment">// Promise &lt;resolved&gt;: 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对这个静态方法而言，如果传入的参数本身是一个期约，那它的行为就类似于一个空包装。因此，Promise.resolve()可以说是一个幂等方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p === <span class="built_in">Promise</span>.resolve(p));</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p === <span class="built_in">Promise</span>.resolve(<span class="built_in">Promise</span>.resolve(p)));</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="comment">//这个幂等性会保留传入期约的状态：</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p); <span class="comment">// Promise &lt;pending&gt;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="built_in">Promise</span>.resolve(p)); <span class="comment">// Promise &lt;pending&gt;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p === <span class="built_in">Promise</span>.resolve(p)); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意，这个静态方法能够包装任何非期约值，包括错误对象，并将其转换为解决的期约。因此，也可能导致不符合预期的行为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.resolve(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;foo&#x27;</span>));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p);</span><br><span class="line"><span class="comment">// Promise &lt;resolved&gt;: Error: foo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h1><p>与 Promise.resolve()类似，Promise.reject()会实例化一个拒绝的期约并抛出一个异步错误（这个错误不能通过 try/catch 捕获，而只能通过拒绝处理程序捕获）。下面的两个期约实例实际上是一样的：</p>
<blockquote>
<p>let p1 = new Promise((resolve, reject) =&gt; reject());<br>let p2 = Promise.reject();</p>
</blockquote>
<p>这个拒绝的期约的理由就是传给 Promise.reject()的第一个参数。这个参数也会传给后续的拒绝处理程序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.reject(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p); <span class="comment">// Promise &lt;rejected&gt;: 3</span></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, e)); <span class="comment">// 3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关键在于，Promise.reject()并没有照搬 Promise.resolve()的幂等逻辑。如果给它传一个期约对象，则这个期约会成为它返回的拒绝期约的理由：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="built_in">Promise</span>.reject(<span class="built_in">Promise</span>.resolve()));</span><br><span class="line"><span class="comment">// Promise &lt;rejected&gt;: Promise &lt;resolved&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="同步-异步执行的二元性"><a href="#同步-异步执行的二元性" class="headerlink" title="同步/异步执行的二元性"></a>同步/异步执行的二元性</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// Error: foo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;bar&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught (in promise) Error: bar</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一个 try/catch 抛出并捕获了错误，第二个 try/catch 抛出错误却没有捕获到,这里的同步代码之所以没有捕获期约抛出的错误，是因为它没有通过异步模式捕获错误。从这里就可以看出期约真正的异步特性：它们是<strong>同步对象（</strong>在同步执行模式中使用），但也是<strong>异步执行模式</strong><br>的媒介。<br>在前面的例子中，<strong>拒绝期约的错误并没有抛到执行同步代码的线程里，而是通过浏览器异步消息队列来处理的</strong>。因此，try/catch 块并不能捕获该错误。代码一旦开始以异步模式执行，则唯一与之交互<br>的方式就是使用异步结构——更具体地说，就是期约的方法。</p>
<h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h1><p>Promise.prototype.then()是为期约实例添加处理程序的主要方法。这个 then()方法接收最多 两个参数：onResolved 处理程序和 onRejected 处理程序。这两个参数都是<strong>可选</strong>的，如果提供的话，则会在期约分别进入“兑现”和“拒绝”状态时执行。传给 then()的任何<strong>非函数类型的参数都会被静 默忽略</strong>。如果想只提供 onRejected 参数，那就要在 onResolved 参数的位置上传入 undefined。这 样有助于避免在内存中创建多余的对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolved</span>(<span class="params">id</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, id, <span class="string">&#x27;resolved&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">id</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, id, <span class="string">&#x27;rejected&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>)); </span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">3000</span>)); </span><br><span class="line">p1.then(<span class="function">() =&gt;</span> onResolved(<span class="string">&#x27;p1&#x27;</span>), </span><br><span class="line"> <span class="function">() =&gt;</span> onRejected(<span class="string">&#x27;p1&#x27;</span>)); </span><br><span class="line">p2.then(<span class="function">() =&gt;</span> onResolved(<span class="string">&#x27;p2&#x27;</span>), </span><br><span class="line"> <span class="function">() =&gt;</span> onRejected(<span class="string">&#x27;p2&#x27;</span>)); </span><br><span class="line"><span class="comment">//（3 秒后）</span></span><br><span class="line"><span class="comment">// p1 resolved </span></span><br><span class="line"><span class="comment">// p2 rejected</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolved</span>(<span class="params">id</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, id, <span class="string">&#x27;resolved&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">id</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, id, <span class="string">&#x27;rejected&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>)); </span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">3000</span>)); </span><br><span class="line"><span class="comment">// 非函数处理程序会被静默忽略，不推荐</span></span><br><span class="line">p1.then(<span class="string">&#x27;gobbeltygook&#x27;</span>); </span><br><span class="line"><span class="comment">// 不传 onResolved 处理程序的规范写法</span></span><br><span class="line">p2.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> onRejected(<span class="string">&#x27;p2&#x27;</span>)); </span><br><span class="line"><span class="comment">// p2 rejected（3 秒后</span></span><br></pre></td></tr></table></figure>

<p>Promise.prototype.then()方法返回一个新的期约实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1 === p2); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

<p>这个新期约实例基于 onResovled 处理程序的返回值构建。换句话说，该处理程序的返回值会通过 Promise.resolve()包装来生成新期约。如果没有提供这个处理程序，则 Promise.resolve()就会 包装上一个期约解决之后的值。如果没有显式的返回语句，则 Promise.resolve()会包装默认的返回 值 undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;foo&#x27;</span>); </span><br><span class="line"><span class="comment">// 若调用 then()时不传处理程序，则原样向后传</span></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="comment">// 这些都一样</span></span><br><span class="line"><span class="keyword">let</span> p3 = p1.then(<span class="function">() =&gt;</span> <span class="literal">undefined</span>); </span><br><span class="line"><span class="keyword">let</span> p4 = p1.then(<span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line"><span class="keyword">let</span> p5 = p1.then(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve()); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p3); <span class="comment">// Promise &lt;resolved&gt;: undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p4); <span class="comment">// Promise &lt;resolved&gt;: undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p5); <span class="comment">// Promise &lt;resolved&gt;: undefined </span></span><br><span class="line"><span class="comment">//如果有显式的返回值，则 Promise.resolve()会包装这个值：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些都一样</span></span><br><span class="line"><span class="keyword">let</span> p6 = p1.then(<span class="function">() =&gt;</span> <span class="string">&#x27;bar&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> p7 = p1.then(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;bar&#x27;</span>)); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p6); <span class="comment">// Promise &lt;resolved&gt;: bar </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p7); <span class="comment">// Promise &lt;resolved&gt;: bar </span></span><br><span class="line"><span class="comment">// Promise.resolve()保留返回的期约</span></span><br><span class="line"><span class="keyword">let</span> p8 = p1.then(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)); </span><br><span class="line"><span class="keyword">let</span> p9 = p1.then(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.reject()); </span><br><span class="line"><span class="comment">// Uncaught (in promise): undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p8); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p9); <span class="comment">// Promise &lt;rejected&gt;: undefined</span></span><br><span class="line"><span class="comment">//抛出异常会返回拒绝的期约：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> p10 = p1.then(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> <span class="string">&#x27;baz&#x27;</span>; &#125;); </span><br><span class="line"><span class="comment">// Uncaught (in promise) baz </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p10); <span class="comment">// Promise &lt;rejected&gt; baz </span></span><br><span class="line"><span class="comment">//注意，返回错误值不会触发上面的拒绝行为，而会把错误对象包装在一个解决的期约中：</span></span><br><span class="line">... </span><br><span class="line"><span class="keyword">let</span> p11 = p1.then(<span class="function">() =&gt;</span> <span class="built_in">Error</span>(<span class="string">&#x27;qux&#x27;</span>)); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p11); <span class="comment">// Promise &lt;resolved&gt;: Error: qux </span></span><br></pre></td></tr></table></figure>

<p>onRejected 处理程序也与之类似：onRejected 处理程序返回的值也会<strong>被 Promise.resolve() 包装</strong>。乍一看这可能有点违反直觉，但是想一想，onRejected 处理程序的任务不就是捕获异步错误吗？ 因此，拒绝处理程序在捕获错误后不抛出异常是符合期约的行为，应该返回一个解决期约</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;foo&#x27;</span>); </span><br><span class="line"><span class="comment">// 调用 then()时不传处理程序则原样向后传</span></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(); </span><br><span class="line"><span class="comment">// Uncaught (in promise) foo</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;rejected&gt;: foo </span></span><br><span class="line"><span class="comment">// 这些都一样</span></span><br><span class="line"><span class="keyword">let</span> p3 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="literal">undefined</span>); </span><br><span class="line"><span class="keyword">let</span> p4 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line"><span class="keyword">let</span> p5 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve()); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p3); <span class="comment">// Promise &lt;resolved&gt;: undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p4); <span class="comment">// Promise &lt;resolved&gt;: undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p5); <span class="comment">// Promise &lt;resolved&gt;: undefined </span></span><br><span class="line"><span class="comment">// 这些都一样</span></span><br><span class="line"><span class="keyword">let</span> p6 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="string">&#x27;bar&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> p7 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;bar&#x27;</span>)); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p6); <span class="comment">// Promise &lt;resolved&gt;: bar </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p7); <span class="comment">// Promise &lt;resolved&gt;: bar </span></span><br><span class="line"><span class="comment">// Promise.resolve()保留返回的期约</span></span><br><span class="line"><span class="keyword">let</span> p8 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)); </span><br><span class="line"><span class="keyword">let</span> p9 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.reject()); </span><br><span class="line"><span class="comment">// Uncaught (in promise): undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p8); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p9); <span class="comment">// Promise &lt;rejected&gt;: undefined </span></span><br><span class="line"><span class="keyword">let</span> p10 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> <span class="string">&#x27;baz&#x27;</span>; &#125;); </span><br><span class="line"><span class="comment">// Uncaught (in promise) baz </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p10); <span class="comment">// Promise &lt;rejected&gt;: baz </span></span><br><span class="line"><span class="keyword">let</span> p11 = p1.then(<span class="literal">null</span>, <span class="function">() =&gt;</span> <span class="built_in">Error</span>(<span class="string">&#x27;qux&#x27;</span>)); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p11); <span class="comment">// Promise &lt;resolved&gt;: Error: qux </span></span><br></pre></td></tr></table></figure>

<h1 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h1><p>Promise.prototype.catch()方法用于<strong>给期约添加拒绝处理程序</strong>。这个方法只接收一个参数： onRejected 处理程序。事实上，这个方法就是一个语法糖，调用它就相当于<strong>调用 Promise.prototype.  then(null, onRejected)</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.reject(); </span><br><span class="line"><span class="keyword">let</span> onRejected = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">&#x27;rejected&#x27;</span>); </span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">// 这两种添加拒绝处理程序的方式是一样的：</span></span><br><span class="line">p.then(<span class="literal">null</span>, onRejected); <span class="comment">// rejected </span></span><br><span class="line">p.catch(onRejected); <span class="comment">// rejected</span></span><br></pre></td></tr></table></figure>

<p>Promise.prototype.catch()返回一个新的期约实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line"><span class="keyword">let</span> p2 = p1.catch(); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1 === p2); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

<h1 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h1><p>Promise.prototype.finally()方法用于给期约添加 onFinally 处理程序，这个处理程序在期 约转换为解决或拒绝状态时都会执行。这个方法可以避免 onResolved 和 onRejected 处理程序中出 现冗余代码。但 onFinally 处理程序没有办法知道期约的状态是解决还是拒绝，所以这个方法主要用清理代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(); </span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.reject(); </span><br><span class="line"><span class="keyword">let</span> onFinally = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, <span class="string">&#x27;Finally!&#x27;</span>) </span><br><span class="line">&#125; </span><br><span class="line">p1.finally(onFinally); <span class="comment">// Finally </span></span><br><span class="line">p2.finally(onFinally); <span class="comment">// Finally</span></span><br></pre></td></tr></table></figure>

<p>Promise.prototype.finally()方法返回一个新的期约实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line"><span class="keyword">let</span> p2 = p1.finally();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1 === p2); <span class="comment">// false </span></span><br></pre></td></tr></table></figure>

<p>这个新期约实例不同于 then()或 catch()方式返回的实例。因为 onFinally 被设计为一个状态 无关的方法，所以在大多数情况下它<strong>将表现为父期约的传递</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;foo&#x27;</span>); </span><br><span class="line"><span class="comment">// 这里都会原样后传</span></span><br><span class="line"><span class="keyword">let</span> p2 = p1.finally(); </span><br><span class="line"><span class="keyword">let</span> p3 = p1.finally(<span class="function">() =&gt;</span> <span class="literal">undefined</span>); </span><br><span class="line"><span class="keyword">let</span> p4 = p1.finally(<span class="function">() =&gt;</span> &#123;&#125;); </span><br><span class="line"><span class="keyword">let</span> p5 = p1.finally(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve()); </span><br><span class="line"><span class="keyword">let</span> p6 = p1.finally(<span class="function">() =&gt;</span> <span class="string">&#x27;bar&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> p7 = p1.finally(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;bar&#x27;</span>)); </span><br><span class="line"><span class="keyword">let</span> p8 = p1.finally(<span class="function">() =&gt;</span> <span class="built_in">Error</span>(<span class="string">&#x27;qux&#x27;</span>)); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p3); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p4); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p5); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p6); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p7); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p8); <span class="comment">// Promise &lt;resolved&gt;: foo </span></span><br><span class="line"><span class="comment">//如果返回的是一个待定的期约，或者 onFinally 处理程序抛出了错误（显式抛出或返回了一个拒绝期约），则会返回相应的期约（待定或拒绝）</span></span><br><span class="line"><span class="comment">// Promise.resolve()保留返回的期约</span></span><br><span class="line"><span class="keyword">let</span> p9 = p1.finally(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;)); </span><br><span class="line"><span class="keyword">let</span> p10 = p1.finally(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.reject()); </span><br><span class="line"><span class="comment">// Uncaught (in promise): undefined </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p9); <span class="comment">// Promise &lt;pending&gt; </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p10); <span class="comment">// Promise &lt;rejected&gt;: undefined </span></span><br><span class="line"><span class="keyword">let</span> p11 = p1.finally(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> <span class="string">&#x27;baz&#x27;</span>; &#125;); </span><br><span class="line"><span class="comment">// Uncaught (in promise) baz </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p11); <span class="comment">// Promise &lt;rejected&gt;: baz </span></span><br></pre></td></tr></table></figure>

<h1 id="非重入期约方法"><a href="#非重入期约方法" class="headerlink" title="非重入期约方法"></a>非重入期约方法</h1><p>当期约进入<strong>落定状态</strong>时，与该状态相关的处理程序仅仅会被<strong>排期</strong>，而非立即执行。跟在添加这个处 理程序的代码之后的<strong>同步代码</strong>一定会在处理程序之前先执行。即使期约一开始就是与附加处理程序关联 的状态，执行顺序也是这样的。这个特性由 JavaScript 运行时保证，被称为“非重入”（non-reentrancy） 特性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> synchronousResolve; </span><br><span class="line"><span class="comment">// 创建一个期约并将解决函数保存在一个局部变量中</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; </span><br><span class="line"> synchronousResolve = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;1: invoking resolve()&#x27;</span>); </span><br><span class="line"> resolve(); </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;2: resolve() returns&#x27;</span>); </span><br><span class="line"> &#125;; </span><br><span class="line">&#125;); </span><br><span class="line">p.then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;4: then() handler executes&#x27;</span>)); </span><br><span class="line">synchronousResolve(); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3: synchronousResolve() returns&#x27;</span>); </span><br><span class="line"><span class="comment">// 实际的输出：</span></span><br><span class="line"><span class="comment">// 1: invoking resolve() </span></span><br><span class="line"><span class="comment">// 2: resolve() returns </span></span><br><span class="line"><span class="comment">// 3: synchronousResolve() returns </span></span><br><span class="line"><span class="comment">// 4: then() handler executes</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，即使期约状态变化发生在添加处理程序之后，处理程序也会等到运行的消息队列让 它出列时才会执行。</p>
<h1 id="传递解决值和拒绝理由"><a href="#传递解决值和拒绝理由" class="headerlink" title="传递解决值和拒绝理由"></a>传递解决值和拒绝理由</h1><p>到了落定状态后，期约会提供其解决值（如果兑现）或其拒绝理由（如果拒绝）给相关状态的处理 程序。拿到返回值后，就可以进一步对这个值进行操作。比如，第一次网络请求返回的 JSON 是发送第 二次请求必需的数据，那么第一次请求返回的值就应该传给 onResolved 处理程序继续处理。当然，失 败的网络请求也应该把 HTTP 状态码传给 onRejected 处理程序。</p>
<p>在执行函数中，解决的值和拒绝的理由是分别作为 resolve()和 reject()的第一个参数往后传 的。然后，这些值又会传给它们各自的处理程序，作为 onResolved 或 onRejected 处理程序的唯一 参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(<span class="string">&#x27;foo&#x27;</span>)); </span><br><span class="line">p1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="built_in">console</span>.log(value)); <span class="comment">// foo </span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">&#x27;bar&#x27;</span>)); </span><br><span class="line">p2.catch(<span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="built_in">console</span>.log(reason)); <span class="comment">// bar </span></span><br></pre></td></tr></table></figure>

<p>then()和 catch()的 onRejected 处理程序在语义上相当于 try/catch。出发点都是捕获错误之 后将其隔离，同时不影响正常逻辑执行。为此，onRejected 处理程序的任务应该是在捕获异步错误之 后返回一个解决的期约。下面的例子中对比了同步错误处理与异步错误处理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;begin synchronous execution&#x27;</span>); </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line"> <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;foo&#x27;</span>); </span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;caught error&#x27;</span>, e); </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;continue synchronous execution&#x27;</span>); </span><br><span class="line"><span class="comment">// begin synchronous execution </span></span><br><span class="line"><span class="comment">// caught error Error: foo </span></span><br><span class="line"><span class="comment">// continue synchronous execution </span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;begin asynchronous execution&#x27;</span>); </span><br><span class="line"> reject(<span class="built_in">Error</span>(<span class="string">&#x27;bar&#x27;</span>)); </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;caught error&#x27;</span>, e); </span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;continue asynchronous execution&#x27;</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// begin asynchronous execution </span></span><br><span class="line"><span class="comment">// caught error Error: bar </span></span><br><span class="line"><span class="comment">// continue asynchronous execution </span></span><br></pre></td></tr></table></figure>

<h1 id="期约连锁"><a href="#期约连锁" class="headerlink" title="期约连锁"></a>期约连锁</h1><p>每个后续的处理程序都会等待前一个期约解决，然后实例化一个新期约并返回它。这种结构可以简 洁地将异步任务串行化，解决之前依赖回调的难题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delayedResolve</span>(<span class="params">str</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(str); </span><br><span class="line"> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>); </span><br><span class="line"> &#125;); </span><br><span class="line">&#125;</span><br><span class="line">delayedResolve(<span class="string">&#x27;p1 executor&#x27;</span>) </span><br><span class="line"> .then(<span class="function">() =&gt;</span> delayedResolve(<span class="string">&#x27;p2 executor&#x27;</span>)) </span><br><span class="line"> .then(<span class="function">() =&gt;</span> delayedResolve(<span class="string">&#x27;p3 executor&#x27;</span>)) </span><br><span class="line"> .then(<span class="function">() =&gt;</span> delayedResolve(<span class="string">&#x27;p4 executor&#x27;</span>)) </span><br><span class="line"><span class="comment">// p1 executor（1 秒后）</span></span><br><span class="line"><span class="comment">// p2 executor（2 秒后）</span></span><br><span class="line"><span class="comment">// p3 executor（3 秒后）</span></span><br><span class="line"><span class="comment">// p4 executor（4 秒后）</span></span><br></pre></td></tr></table></figure>

<h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h1><p><code>Promise.all</code>方法用于将多个 Promise 实例，这个静态方法接收一个可迭代对象，将参数转为 Promise 实例，再包装成一个新的 Promise 实例。</p>
<ul>
<li>合成的期约只会在每个包含的期约都解决之后才解决</li>
<li>如果至少有一个包含的期约待定，则合成的期约也会待定。如果有一个包含的期约拒绝，则合成的 期约也会拒绝</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//永远待定</span></span><br><span class="line"><span class="keyword">let</span> p1=<span class="built_in">Promise</span>.all([<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">()=&gt;</span>&#123;&#125;)]);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log,<span class="number">0</span>,p1);<span class="comment">//Promise &lt;pending&gt;</span></span><br><span class="line"><span class="comment">//一次拒绝会导致最终期约拒绝</span></span><br><span class="line"><span class="keyword">let</span> p2=<span class="built_in">Promise</span>.all([<span class="built_in">Promise</span>.resolve(),<span class="built_in">Promise</span>.reject(),<span class="built_in">Promise</span>.resolve()]);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log,<span class="number">0</span>,p2);<span class="comment">//Promise &lt;rejected&gt;</span></span><br><span class="line"><span class="comment">//Uncaught (in promise) undefined</span></span><br></pre></td></tr></table></figure>

<p>如果所有期约都成功解决，则合成期约的解决值就是所有包含期约解决值的数组，按照迭代器顺序:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.all([ </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">3</span>), </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(), </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">4</span>) </span><br><span class="line">]); </span><br><span class="line">p.then(<span class="function">(<span class="params">values</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, values)); <span class="comment">// [3, undefined, 4] </span></span><br><span class="line"><span class="comment">// 虽然只有第一个期约的拒绝理由会进入 </span></span><br><span class="line"><span class="comment">// 拒绝处理程序，第二个期约的拒绝也</span></span><br><span class="line"><span class="comment">// 会被静默处理，不会有错误跑掉</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">Promise</span>.all([ </span><br><span class="line"> <span class="built_in">Promise</span>.reject(<span class="number">3</span>), </span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">1000</span>)) </span><br><span class="line">]); </span><br><span class="line">p.catch(<span class="function">(<span class="params">reason</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, reason)); <span class="comment">// 3 </span></span><br></pre></td></tr></table></figure>

<h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p>Promise.race()静态方法返回一个包装期约，是一组集合中最先解决或拒绝的期约的镜像。这个 方法接收一个可迭代对象，返回一个新期约</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解决先发生，超时后的拒绝被忽略</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.race([ </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">3</span>), </span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(reject, <span class="number">1000</span>)) </span><br><span class="line">]); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p1); <span class="comment">// Promise &lt;resolved&gt;: 3 </span></span><br><span class="line"><span class="comment">// 拒绝先发生，超时后的解决被忽略</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.race([ </span><br><span class="line"> <span class="built_in">Promise</span>.reject(<span class="number">4</span>), </span><br><span class="line"> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>)) </span><br><span class="line">]); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p2); <span class="comment">// Promise &lt;rejected&gt;: 4 </span></span><br><span class="line"><span class="comment">// 迭代顺序决定了落定顺序</span></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="built_in">Promise</span>.race([ </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">5</span>), </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">6</span>), </span><br><span class="line"> <span class="built_in">Promise</span>.resolve(<span class="number">7</span>) </span><br><span class="line">]); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="built_in">console</span>.log, <span class="number">0</span>, p3); <span class="comment">// Promise &lt;resolved&gt;: 5</span></span><br></pre></td></tr></table></figure>

<h1 id="串行期约合成"><a href="#串行期约合成" class="headerlink" title="串行期约合成"></a>串行期约合成</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwo</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addThree</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x+<span class="number">3</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFive</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x+<span class="number">5</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTen</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [addTwo,addThree,addFive].reduce(<span class="function">(<span class="params">promise,fn</span>)=&gt;</span>promise.then(fn),<span class="built_in">Promise</span>.resolve(x));</span><br><span class="line">&#125;</span><br><span class="line">addTen(<span class="number">8</span>).then(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>

<h1 id="done"><a href="#done" class="headerlink" title="done"></a>done</h1><p>Promise 对象的回调链，不管以<code>then</code>方法或<code>catch</code>方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为 Promise 内部的错误不会冒泡到全局）。因此，我们可以提供一个<code>done</code>方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">asyncFunc()</span><br><span class="line">  .then(f1)</span><br><span class="line">  .catch(r1)</span><br><span class="line">  .then(f2)</span><br><span class="line">  .done();</span><br><span class="line"><span class="built_in">Promise</span>.prototype.done=<span class="function"><span class="keyword">function</span>(<span class="params">onResolved,onRejected</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.then(onResolved,onRejected)</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//抛出一个全局错误</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;<span class="keyword">throw</span> reason&#125;,<span class="number">0</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">           </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h1><p>finally()f方法用于指定不管Promise对象最后状态如何，都会执行的操作，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server.listen(<span class="number">0</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// run test</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(server.stop);</span><br><span class="line"><span class="built_in">Promise</span>.prototype.finally=<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> P=<span class="built_in">this</span>.constructor;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">            <span class="function"><span class="params">value</span>=&gt;</span>P.resolve(callback()).then(<span class="function">()=&gt;</span>value),</span><br><span class="line">            <span class="function"><span class="params">reason</span>=&gt;</span>P.resolve(callback()).then(<span class="function">()=&gt;</span>&#123;<span class="keyword">throw</span> reason&#125;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>将图片的加载写成一个Promise，一旦加载完成，Promise的状态发生变化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载图片</span></span><br><span class="line">    <span class="keyword">const</span> preloadImage=<span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> image=<span class="keyword">new</span> Image();</span><br><span class="line">            image.onload=resolve;</span><br><span class="line">            image.onerror=reject;</span><br><span class="line">            image.src=path;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>json</title>
    <url>/2022/01/04/json/</url>
    <content><![CDATA[<p>把它当成一种数据格式，而不是编程语言。JSON 不属于 JavaScript，<br>它们只是拥有相同的语法而已。JSON 也不是只能在 JavaScript 中使用，它是一种通用数据格式。很多语言都有解析和序列化 JSON 的内置能力。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><ul>
<li>简单值：字符串、数值、布尔值和 null 可以在 JSON 中出现，就像在 JavaScript 中一样。特殊值 undefined 不可以。</li>
<li>对象：第一种复杂数据类型，对象表示有序键/值对。每个值可以是简单值，也可以是复杂类型。</li>
<li>数组：第二种复杂数据类型，数组表示可以通过数值索引访问的值的有序列表。数组的值可以是任意类型，包括简单值、对象，甚至其他数组。</li>
</ul>
<h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>JavaScript 字符串与 JSON 字符串的主要区别是，JSON 字符串必须使用双引号（单引号会导致语法错误）。布尔值和 null 本身也是有效的 JSON 值</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>与 JavaScript 对象字面量相比，JSON 主要有两处不同。首先，<strong>没有变量声明</strong>（JSON 中没有变量）。其次，<strong>最后没有分号（</strong>不需要，因为不是 JavaScript 语句）。同样，用引号将属性名包围起来才是有效的JSON。属性的值可以是简单值或复杂数据类型值，后者可以在对象中再嵌入对象.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line"><span class="attr">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line"><span class="attr">&quot;school&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Merrimack College&quot;</span>,</span><br><span class="line"><span class="attr">&quot;location&quot;</span>: <span class="string">&quot;North Andover, MA&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组在 JSON 中使用 JavaScript 的数组字面量形式表示.</p>
<p>JavaScript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">25</span>, <span class="string">&quot;hi&quot;</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="number">25</span>,<span class="string">&quot;hi&quot;</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<h1 id="JavaScript序列化为Json"><a href="#JavaScript序列化为Json" class="headerlink" title="JavaScript序列化为Json"></a>JavaScript序列化为Json</h1><p>stringfy()：在序列化 JavaScript 对象时，所有函数和原型成员都会有意地在结果中省略。此外，值为 undefined的任何属性也会被跳过。最终得到的就是所有实例属性均为有效 JSON 数据类型的表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line"><span class="attr">authors</span>: [</span><br><span class="line"><span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line"><span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">year</span>: <span class="number">2017</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：</p>
<p>{“title”:”Professional JavaScript”,”authors”:[“Nicholas C. Zakas”,”Matt Frisbie”],<br>“edition”:4,”year”:2017}</p>
</blockquote>
<p>还可以接收两个参数。这两个参数可以用于指定其他序列化 JavaScript 对象的方式。第一个参数是<strong>过滤器</strong>，可以是<strong>数组或函数</strong>；第二个参数是用于<strong>缩进结果 JSON 字符串的选项</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line"><span class="attr">authors</span>: [</span><br><span class="line"><span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line"><span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">year</span>: <span class="number">2017</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(book, [<span class="string">&quot;title&quot;</span>, <span class="string">&quot;edition&quot;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>如果第二个参数是一个函数，则行为又有不同。提供的函数接收两个参数：属性名（key）和属性值（value）。可以根据这个 key 决定要对相应属性执行什么操作。这个 key 始终是字符串，只是在值<br>不属于某个键/值对时会是空字符串</li>
<li>返回的值就是相应 key 应该包含的结果。注意，返回 undefined 会导致属性被忽略</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line"><span class="attr">authors</span>: [</span><br><span class="line"><span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line"><span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">year</span>: <span class="number">2017</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">switch</span>(key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;authors&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> value.join(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;year&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;edition&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*&#123;&quot;title&quot;:&quot;Professional JavaScript&quot;,&quot;authors&quot;:&quot;Nicholas C. Zakas,Matt</span></span><br><span class="line"><span class="comment">Frisbie&quot;,&quot;year&quot;:5000&#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JSON.stringify()方法的第三个参数控制缩进和空格。在这个参数是数值时，表示每一级缩进的空格数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line"><span class="attr">authors</span>: [</span><br><span class="line">	<span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line">	<span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">year</span>: <span class="number">2017</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>toJSON():在要序列化的对象中添加 toJSON()方法，序列化时会基于这个方法返回适当的 JSON 表示:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line"><span class="attr">authors</span>: [</span><br><span class="line"><span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line"><span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">year</span>: <span class="number">2017</span>,</span><br><span class="line"><span class="attr">toJSON</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//箭头函数不能定义toJSON(),因为剪头函数的词法作用域是全局作用域，在这种情况不合适</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(book);<span class="comment">//book对象返回图书的书名(this.title)</span></span><br></pre></td></tr></table></figure>

<p>toJSON()方法可以与过滤函数一起使用，在把对象传给 JSON.stringify()时会执行如下步骤。</p>
<p>(1) 如果可以获取实际的值，则调用 toJSON()方法获取实际的值，否则使用默认的序列化。<br>(2) 否则，使用默认序列化时，如果提供了第二个参数，则应用过滤。<br>(3) 第(2)步返回的每个值都会相应地进行序列化。<br>(4) 如果提供了第三个参数，则相应地进行缩进。</p>
<h1 id="ES6中堆JSON-stringfy的改造"><a href="#ES6中堆JSON-stringfy的改造" class="headerlink" title="ES6中堆JSON.stringfy的改造"></a>ES6中堆JSON.stringfy的改造</h1><p>UTF-8 标准规定，<code>0xD800</code>到<code>0xDFFF</code>之间的码点，不能单独使用，必须配对使用。比如，<code>\uD834\uDF06</code>是两个码点，但是必须放在一起配对使用，代表字符<code>𝌆</code>。这是为了表示码点大于<code>0xFFFF</code>的字符的一种变通方法。单独使用<code>\uD834</code>和<code>\uDFO6</code>这两个码点是不合法的，或者颠倒顺序也不行，因为<code>\uDF06\uD834</code>并没有对应的字符。</p>
<p><code>JSON.stringify()</code>的问题在于，它可能返回<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.stringify(&#x27;\u&#123;D834&#125;&#x27;) // &quot;\u&#123;D834&#125;&quot;</span><br></pre></td></tr></table></figure>

<p>为了确保返回的是合法的 UTF-8 字符，<a href="https://github.com/tc39/proposal-well-formed-stringify">ES2019</a> 改变了<code>JSON.stringify()</code>的行为。如果遇到<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.stringify(&#x27;\u&#123;D834&#125;&#x27;) // &quot;&quot;\\uD834&quot;&quot;JSON.stringify(&#x27;\uDF06\uD834&#x27;) // &quot;&quot;\\udf06\\ud834&quot;&quot;</span><br></pre></td></tr></table></figure>

<h1 id="解析选项"><a href="#解析选项" class="headerlink" title="解析选项"></a>解析选项</h1><p>JSON.parse():接收一个参数，这个函数称为还原函数，还原函数接收两个参数，属性名key和属性名value，如果还原函数返回undefined，则结果中删除相应键，如果返回了其他任何值，则该值就会成为相应键的值插入到结果中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line"><span class="attr">authors</span>: [</span><br><span class="line"><span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line"><span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">edition</span>: <span class="number">4</span>,</span><br><span class="line"><span class="attr">year</span>: <span class="number">2017</span>,</span><br><span class="line"><span class="attr">releaseDate</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"><span class="keyword">let</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText,</span><br><span class="line"><span class="function">(<span class="params">key, value</span>) =&gt;</span> key == <span class="string">&quot;releaseDate&quot;</span> ? <span class="keyword">new</span> <span class="built_in">Date</span>(value) : value);</span><br><span class="line">alert(bookCopy.releaseDate.getFullYear());<span class="comment">//对象仙贝序列化为JSON字符串，又被重新解析为一个对象bookCopy,还原函数查找&quot;releaseDate&quot;键，找到后根虎日期字符创建新的Date对象，得到的bookCopy.releaseDate属性又变回Date对象，可以调用其getFullYear()方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>字符表示</title>
    <url>/2022/01/04/%E5%AD%97%E7%AC%A6%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<h1 id="JavaScript字符表示"><a href="#JavaScript字符表示" class="headerlink" title="JavaScript字符表示"></a>JavaScript字符表示</h1><p>JavaScript 字符串由 16 位码元（code unit）组成。对多数字符来说，每 16 位码元对应一个字符。换<br>句话说，字符串的 length 属性表示字符串包含多少 16 位码元</p>
<p>JavaScript 字符串使用了两种 Unicode 编码混合的策略：UCS-2 和 UTF-16。对于可以采用 16 位编码<br>的字符（U+0000~U+FFFF），这两种编码实际上是一样的。</p>
<h2 id="查看指定码元"><a href="#查看指定码元" class="headerlink" title="查看指定码元"></a>查看指定码元</h2><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="comment">// Unicode &quot;Latin small letter C&quot;的编码是 U+0063</span></span><br><span class="line"><span class="built_in">console</span>.log(message.charCodeAt(<span class="number">2</span>)); <span class="comment">// 99</span></span><br><span class="line"><span class="comment">// 十进制 99 等于十六进制 63</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">99</span> === <span class="number">0x63</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个对应关系在扩展到 Unicode 增补字符平面时就不成立了。即 16 位只能唯一表示,65 536 个字符。这对于大多数语言字符集是足够了，在 Unicode 中称为基本多语言平面（BMP）。为了表示更多的字符，Unicode 采用了一个策略，即每个字符使用另外 16 位去选择一个增补平面。这种每个字符使用两个 16 位码元的策略称为代理对。</p>
<h3 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h3><p>为正确解析既包含单码元字符又包含代理对字符的字符串，可以使用 codePointAt()来代替charCodeAt()。跟使用 charCodeAt()时类似，codePointAt()接收 16 位码元的索引并返回该索引位置上的码点（code point）。码点是 Unicode 中一个字符的完整标识。比如，”c”的码点是 0x0063，而”☺”的码点是 0x1F60A。码点可能是 16 位，也可能是 32 位，而 codePointAt()方法可以从指定码元位置识别完整的码点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;ab☺de&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">1</span>)); <span class="comment">// 98</span></span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">2</span>)); <span class="comment">// 128522</span></span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">3</span>)); <span class="comment">// 56842</span></span><br><span class="line"><span class="built_in">console</span>.log(message.codePointAt(<span class="number">4</span>)); <span class="comment">// 100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="给定UTF-16码原创建字符"><a href="#给定UTF-16码原创建字符" class="headerlink" title="给定UTF-16码原创建字符"></a>给定UTF-16码原创建字符</h2><h3 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode()"></a>fromCharCode()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Unicode &quot;Latin small letter A&quot;的编码是 U+0061</span></span><br><span class="line"><span class="comment">// Unicode &quot;Latin small letter B&quot;的编码是 U+0062</span></span><br><span class="line"><span class="comment">// Unicode &quot;Latin small letter C&quot;的编码是 U+0063</span></span><br><span class="line"><span class="comment">// Unicode &quot;Latin small letter D&quot;的编码是 U+0064</span></span><br><span class="line"><span class="comment">// Unicode &quot;Latin small letter E&quot;的编码是 U+0065</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>, <span class="number">0x65</span>)); <span class="comment">// &quot;abcde&quot;</span></span><br><span class="line"><span class="comment">// 0x0061 === 97</span></span><br><span class="line"><span class="comment">// 0x0062 === 98</span></span><br><span class="line"><span class="comment">// 0x0063 === 99</span></span><br><span class="line"><span class="comment">// 0x0064 === 100</span></span><br><span class="line"><span class="comment">// 0x0065 === 101</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>)); <span class="comment">// &quot;abcde&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="fromCodePoint"><a href="#fromCodePoint" class="headerlink" title="fromCodePoint()"></a>fromCodePoint()</h3><p>fromCodePoint()：这个方法接收任意数量的码点，返回对应字符拼接起来的字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">98</span>, <span class="number">55357</span>, <span class="number">56842</span>, <span class="number">100</span>, <span class="number">101</span>)); <span class="comment">// ab☺de</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">97</span>, <span class="number">98</span>, <span class="number">128522</span>, <span class="number">100</span>, <span class="number">101</span>)); <span class="comment">// ab☺de</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="normalize-规范化"><a href="#normalize-规范化" class="headerlink" title="normalize()规范化"></a>normalize()规范化</h2><p>Unicode提供了 4种规范化形式，可以将类似上面的字符规范化为一致的格式，无论底层字符的代码是什么。这 4种规范化形式是：NFD（Normalization Form D）、NFC（Normalization Form C）、<br>NFKD（Normalization Form KD）和 NFKC（Normalization Form KC）。可以使用 normalize()方法对字符串应用上述规范化形式，使用时需要传入表示哪种形式的字串：”NFD”、”NFC”、”NFKD”或”NFKC”。</p>
<p>通过比较字符串与其调用 normalize()的返回值，就可以知道该字符串是否已经规范化了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>),</span><br><span class="line">a2 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>),</span><br><span class="line">a3 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>);</span><br><span class="line"><span class="comment">// U+00C5 是对 0+212B 进行 NFC/NFKC 规范化之后的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFD&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFKD&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a1.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// U+212B 是未规范化的</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFD&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFC&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFKD&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a2.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// U+0041/U+030A 是对 0+212B 进行 NFD/NFKD 规范化之后的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFD&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFC&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFKD&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a3 === a3.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>未规范化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>),</span><br><span class="line">a2 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>),</span><br><span class="line">a3 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1, a2, a3); <span class="comment">// Å, Å, Å</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a2); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a1 === a3); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(a2 === a3); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>选择同一种规范化形式可以让比较操作符返回正确的结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x00C5</span>),</span><br><span class="line">a2 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x212B</span>),</span><br><span class="line">a3 = <span class="built_in">String</span>.fromCharCode(<span class="number">0x0041</span>, <span class="number">0x030A</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a1.normalize(<span class="string">&quot;NFD&quot;</span>) === a2.normalize(<span class="string">&quot;NFD&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a2.normalize(<span class="string">&quot;NFKC&quot;</span>) === a3.normalize(<span class="string">&quot;NFKC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a1.normalize(<span class="string">&quot;NFC&quot;</span>) === a3.normalize(<span class="string">&quot;NFC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>媒体查询</title>
    <url>/2022/01/03/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>媒体查询常被用于以下目的：</p>
<ul>
<li><p>有条件的通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media"><code>@media</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@import"><code>@import</code></a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule">at-rules</a> 用<a href="https://developer.mozilla.org/en-US/docs/Web/CSS">CSS</a> 装饰样式。</p>
</li>
<li><p>用<code>media=</code> 属性为<style>,<link>,<source>和其他<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a>元素指定特定的媒体类型。</p>
</li>
</ul>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>媒体类型和任意数量的媒体特性表达式构成。</p>
<p>当媒体类型（如果指定）与在其上显示文档的设备匹配并且所有媒体功能表达式都计算为true时，媒体查询将计算为true。 涉及未知媒体类型的查询始终为false。</p>
<h2 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h2><p>描述设备的一般类别。除非使用 <code>not</code> 或 <code>only</code> 逻辑操作符，媒体类型是可选的，并且会（隐式地）应用 <code>all</code> 类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all</span><br></pre></td></tr></table></figure>

<p>适用于所有设备。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print</span><br></pre></td></tr></table></figure>

<p>适用于在打印预览模式下在屏幕上查看的分页材料和文档。 （有关特定于这些格式的格式问题的信息，请参阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Paged_Media">分页媒体</a>。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen</span><br></pre></td></tr></table></figure>

<p>主要用于屏幕。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">speech</span><br></pre></td></tr></table></figure>

<p>主要用于语音合成器。</p>
<h3 id="定位媒体类型"><a href="#定位媒体类型" class="headerlink" title="定位媒体类型"></a>定位媒体类型</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen, print &#123; ... &#125;</span><br><span class="line"><span class="comment">/*用两个媒体查询来同时定位屏幕和打印设备*/</span></span><br></pre></td></tr></table></figure>

<h2 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h2><p>描述了 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent">user agent</a>、输出设备，或是浏览环境的具体特征。媒体特性表达式是完全可选的，它负责测试这些特性或特征是否存在、值为多少。每条媒体特性表达式都必须用括号括起来。</p>
<h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><p> <code>not</code>, <code>and</code>, 和 <code>only</code> 可用于联合构造复杂的媒体查询，您还可以通过用逗号分隔多个媒体查询，将它们组合为一个规则。</p>
<h4 id="and"><a href="#and" class="headerlink" title="and"></a><code>and</code></h4><p> <code>and</code> 操作符用于将多个媒体查询规则组合成单条媒体查询，当每个查询规则都为真时则该条媒体查询为真，它还用于将媒体功能与媒体类型结合在一起。</p>
<h4 id="not"><a href="#not" class="headerlink" title="not"></a><code>not</code></h4><p><code>not</code>运算符用于否定媒体查询，如果不满足这个条件则返回true，否则返回false。 如果出现在以逗号分隔的查询列表中，它将仅否定应用了该查询的特定查询。 如果使用not运算符，则还必须指定媒体类型。</p>
<p><strong>注意：</strong>在Level 3中，<code>not</code>关键字不能用于否定单个媒体功能表达式，而只能用于否定整个媒体查询。</p>
<h4 id="only"><a href="#only" class="headerlink" title="only"></a><code>only</code></h4><p><code>only</code>运算符仅在整个查询匹配时才用于应用样式，并且对于防止较早的浏览器应用所选样式很有用。 当不使用<code>only</code>时，旧版本的浏览器会将<code>screen and (max-width: 500px)</code>简单地解释为<code>screen</code>，忽略查询的其余部分，并将其样式应用于所有屏幕。 如果使用<code>only</code>运算符，则<em>还必须指定</em>媒体类型。</p>
<h4 id="逗号"><a href="#逗号" class="headerlink" title=", (逗号)"></a><code>,</code> (逗号)</h4><p>逗号用于将多个媒体查询合并为一个规则。 逗号分隔列表中的每个查询都与其他查询分开处理。 因此，如果列表中的任何查询为true，则整个media语句均返回true。 换句话说，列表的行为类似于逻辑或<code>or</code>运算符。</p>
<h3 id="定位媒体特性"><a href="#定位媒体特性" class="headerlink" title="定位媒体特性"></a>定位媒体特性</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*当用户的主要输入机制（例如鼠标）可以悬停在元素上*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">hover</span>: <span class="attribute">hover</span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">12450px</span>) &#123; ... &#125;</span><br><span class="line"><span class="comment">/*CSS将适用于任何带有彩色屏幕的设备*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">color</span>) &#123; ... &#125;</span><br><span class="line"><span class="comment">/*限制为带有屏幕的设备,宽度至少为30 em的横向的设备*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">30em</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

</style></p></li></ul>]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
  </entry>
  <entry>
    <title>toggle</title>
    <url>/2022/01/03/toggle/</url>
    <content><![CDATA[<h1 id="DOMTokenList-toggle"><a href="#DOMTokenList-toggle" class="headerlink" title="DOMTokenList.toggle()"></a>DOMTokenList.toggle()</h1><p>DOMTokenList接口的toggle()方法从列表中删除一个给定的标记并返回false,如果标记不存在，则添加并且函数返回true</p>
<blockquote>
<p>tokenList.toggle(token,force);</p>
</blockquote>
<h4 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h4><p>token:标记列表中你想探查并切换的DOMSring</p>
<p>force(可选):Boolean值，设置后会将方法变成单向操作，如果设置为false，则会删除标记列表中匹配的给定标记，且不会再添加，如设置为true，则将在标记中添加给定标记，且不会再度删除</p>
<h4 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h4><p>为布尔值</p>
<h1 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h1><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;a b&quot;</span>&gt;</span>classList is &#x27;a b&#x27;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JavaScript</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">&quot;span&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> classes = span.classList;</span><br><span class="line">span.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = classes.toggle(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(result) &#123;</span><br><span class="line">    span.textContent = <span class="string">&quot;&#x27;c&#x27; added; classList is now &#x27;&quot;</span> + classes + <span class="string">&quot;&#x27;.&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    span.textContent = <span class="string">&quot;&#x27;c&#x27; removed; classList is now &#x27;&quot;</span> + classes + <span class="string">&quot;&#x27;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>align-self,align-item,align-content</title>
    <url>/2022/01/03/%E5%AF%B9%E9%BD%90%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h1 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h1><p>CSS属性 <strong><code>align-self</code></strong> 会对齐当前 grid 或 flex 行中的元素，并覆盖已有的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items"><code>align-items</code></a> 的值。In Grid, it aligns the item inside the <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Areas">grid area</a>. 在 Flexbox 中，会按照 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Cross_Axis">cross axis</a>（当前 flex 元素排列方向的垂直方向）进行排列。</p>
<h2 id="值"><a href="#值" class="headerlink" title="值"></a>值</h2><p>auto:设置为父元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items"><code>align-items</code></a> 值。</p>
<p>normal:</p>
<p>效果取决于当前的布局模式:</p>
<ul>
<li><p>绝对定位布局中，normal在绝对定位的替代元素上表现为<code>start</code>，在<em>所有其他</em>绝对定位元素上表现为<code>stretch</code>。</p>
</li>
<li><p>在绝对定位的静态元素上表现为<code>stretch</code>。</p>
</li>
<li><p>flex布局中表现为stretch。</p>
</li>
<li><p>在网格布局中表现为stretch,除了有部分比例或者一个固定大小的盒子的效果像<code>start</code>。</p>
</li>
<li><p>在块级和表格单元中无效。</p>
</li>
</ul>
<p>flex-start:对齐到cross-axis的首端</p>
<p>flex-end:对齐到cross-axis的尾端</p>
<p>center:对齐到cross-axis的中间，如果该元素的 cross-size 尺寸大于 flex 容器，将在两个方向均等溢出。</p>
<p>safe:如果元素大小溢出对齐的容器，则将元素改为对齐，就像start</p>
<p>unsafe:无论元素和对齐容器的相对大小如何都遵循给定的对齐值</p>
<h2 id="eg"><a href="#eg" class="headerlink" title="eg"></a>eg</h2><p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Item#1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Item#2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Item#3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">background</span>: beige;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">background</span>: cyan;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h1><p>CSS align-items属性将所有直接子节点上的align-self值设置为一个组。 目前，Flexbox和CSS网格布局支持此属性。在Flexbox中，它控制十字轴上项目的对齐方式，在网格布局中，它控制块轴上项目的对齐方式。</p>
<h1 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h1><p><strong><code>align-content</code></strong> 属性设置了浏览器如何沿着<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout">弹性盒子布局</a>的纵轴和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout">网格布局</a>的主轴在内容项之间和周围分配空间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 基本位置对齐 */</span></span><br><span class="line"><span class="comment">/*align-content不采用左右值 */</span></span><br><span class="line">align-content: center;     <span class="comment">/* 将项目放置在中点 */</span></span><br><span class="line">align-content: start;      <span class="comment">/* 最先放置项目 */</span></span><br><span class="line">align-content: end;        <span class="comment">/* 最后放置项目 */</span></span><br><span class="line">align-content: flex-start; <span class="comment">/* 从起始点开始放置flex元素 */</span></span><br><span class="line">align-content: flex-end;   <span class="comment">/* 从终止点开始放置flex元素 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 默认对齐 */</span></span><br><span class="line">align-content: normal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基线对齐*/</span></span><br><span class="line">align-content: baseline;</span><br><span class="line">align-content: first baseline;</span><br><span class="line">align-content: last baseline;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分布式对齐 */</span></span><br><span class="line">align-content: space-between; <span class="comment">/* 均匀分布项目</span></span><br><span class="line"><span class="comment">                                 第一项与起始点齐平，</span></span><br><span class="line"><span class="comment">                                 最后一项与终止点齐平 */</span></span><br><span class="line">align-content: space-around;  <span class="comment">/* 均匀分布项目</span></span><br><span class="line"><span class="comment">                                 项目在两端有一半大小的空间*/</span></span><br><span class="line">align-content: space-evenly;  <span class="comment">/* 均匀分布项目</span></span><br><span class="line"><span class="comment">                                 项目周围有相等的空间 */</span></span><br><span class="line">align-content: stretch;       <span class="comment">/* 均匀分布项目</span></span><br><span class="line"><span class="comment">                                 拉伸‘自动’-大小的项目以充满容器 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 溢出对齐 */</span></span><br><span class="line">align-content: safe center;</span><br><span class="line">align-content: unsafe center;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局属性 */</span></span><br><span class="line">align-content: inherit; <span class="comment">/* 继承 */</span></span><br><span class="line">align-content: initial;  <span class="comment">/* 初始值 */</span></span><br><span class="line">align-content: unset; <span class="comment">/* 未设置 */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="justify-items"><a href="#justify-items" class="headerlink" title="justify-items"></a>justify-items</h1><p><strong><code>justify-items</code></strong> 属性为所有盒中的项目定义了默认的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-self"><code>justify-self</code></a> ， 可以使这些项目以默认方式沿适当轴线对齐到每个盒子。</p>
<h1 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h1><p><strong><code>justify-content</code></strong> 属性定义了浏览器之间，如何分配顺着弹性容器主轴(或者网格行轴) 的元素之间及其周围的空间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Positional alignment */</span></span><br><span class="line">justify-content: center;     <span class="comment">/* 居中排列 */</span></span><br><span class="line">justify-content: start;      <span class="comment">/* Pack items from the start */</span></span><br><span class="line">justify-content: end;        <span class="comment">/* Pack items from the end */</span></span><br><span class="line">justify-content: flex-start; <span class="comment">/* 从行首起始位置开始排列 */</span></span><br><span class="line">justify-content: flex-end;   <span class="comment">/* 从行尾位置开始排列 */</span></span><br><span class="line">justify-content: left;       <span class="comment">/* Pack items from the left */</span></span><br><span class="line">justify-content: right;      <span class="comment">/* Pack items from the right */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Baseline alignment */</span></span><br><span class="line">justify-content: baseline;</span><br><span class="line">justify-content: first baseline;</span><br><span class="line">justify-content: last baseline;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Distributed alignment */</span></span><br><span class="line">justify-content: space-between;  <span class="comment">/* 均匀排列每个元素</span></span><br><span class="line"><span class="comment">                                   首个元素放置于起点，末尾元素放置于终点 */</span></span><br><span class="line">justify-content: space-around;  <span class="comment">/* 均匀排列每个元素</span></span><br><span class="line"><span class="comment">                                   每个元素周围分配相同的空间 */</span></span><br><span class="line">justify-content: space-evenly;  <span class="comment">/* 均匀排列每个元素</span></span><br><span class="line"><span class="comment">                                   每个元素之间的间隔相等 */</span></span><br><span class="line">justify-content: stretch;       <span class="comment">/* 均匀排列每个元素</span></span><br><span class="line"><span class="comment">                                   &#x27;auto&#x27;-sized 的元素会被拉伸以适应容器的大小 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Overflow alignment */</span></span><br><span class="line">justify-content: safe center;</span><br><span class="line">justify-content: unsafe center;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line">justify-content: inherit;</span><br><span class="line">justify-content: initial;</span><br><span class="line">justify-content: unset;</span><br></pre></td></tr></table></figure>

<h1 id="justify-self"><a href="#justify-self" class="headerlink" title="justify-self"></a>justify-self</h1><h2 id="justify-self-在-Flexbox布局中失效"><a href="#justify-self-在-Flexbox布局中失效" class="headerlink" title="[justify-self 在 Flexbox布局中失效]"></a>[justify-self 在 Flexbox布局中失效]</h2><p>在主轴上，Flexbox将我们的内容作为一个组进行处理。 计算布置子元素所需的空间量，然后剩余空间可用于分配。 <code>justify-content</code>属性控制剩余空间的使用方式。 设置<code>justify-content：flex-end</code>，额外空间放在所有子元素之前，<code>justify-content：space-around</code>，它放在该维度的子元素的两侧，等等。</p>
<p>这意味着在Flexbox中，<code>justify-self</code>属性没有意义，因为我们总是处理移动整个元素组。</p>
<p>在十字轴上，<code>align-self</code>是有意义的，因为我们可能在该维度中的flex容器中有额外的空间，其中单个元素可以移动到开始和结束位置。</p>
]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
  </entry>
  <entry>
    <title>富文本</title>
    <url>/2021/12/13/%E5%AF%8C%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="富文本编辑"><a href="#富文本编辑" class="headerlink" title="富文本编辑"></a>富文本编辑</h1><p>在空白 HTML 文件中嵌入一个iframe。通过 designMode 属性，可以将这个空白文档变成可以编辑的，实际编辑的则是<body>元素<br>的 HTML。designMode 属性有两个可能的值：”off”（默认值）和”on”。设置为”on”时</body></p>
<h1 id="富文本交互"><a href="#富文本交互" class="headerlink" title="富文本交互"></a>富文本交互</h1><p>使用 document.execCommand()。这个方法在文档上执行既定<br>的命令，可以实现大多数格式化任务。document.execCommand()可以接收 3 个参数：要执行的命令、表示浏览器是否为命令提供用户界面的布尔值和执行命令必需的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在内嵌窗格中切换粗体文本样式</span></span><br><span class="line">frames[<span class="string">&quot;richedit&quot;</span>].document.execCommand(<span class="string">&quot;bold&quot;</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 在内嵌窗格中切换斜体文本样式</span></span><br><span class="line">frames[<span class="string">&quot;richedit&quot;</span>].document.execCommand(<span class="string">&quot;italic&quot;</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 在内嵌窗格中创建指向 www.wrox.com 的链接</span></span><br><span class="line">frames[<span class="string">&quot;richedit&quot;</span>].document.execCommand(<span class="string">&quot;createlink&quot;</span>, <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;http://www.wrox.com&quot;</span>);</span><br><span class="line"><span class="comment">// 在内嵌窗格中为内容添加&lt;h1&gt;标签</span></span><br><span class="line">frames[<span class="string">&quot;richedit&quot;</span>].document.execCommand(<span class="string">&quot;formatblock&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;&lt;h1&gt;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="富文本选择"><a href="#富文本选择" class="headerlink" title="富文本选择"></a>富文本选择</h1><p>在内嵌窗格中使用 getSelection()方法，可以获得富文本编辑器的选区。这个方法暴露在document 和 window 对象上，返回表示当前选中文本的 Selection 对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> selection = frames[<span class="string">&quot;richedit&quot;</span>].getSelection();</span><br><span class="line"><span class="comment">// 取得选中的文本</span></span><br><span class="line"><span class="keyword">let</span> selectedText = selection.toString();</span><br><span class="line"><span class="comment">// 取得表示选区的范围</span></span><br><span class="line"><span class="keyword">let</span> range = selection.getRangeAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 高亮选中的文本</span></span><br><span class="line"><span class="keyword">let</span> span = frames[<span class="string">&quot;richedit&quot;</span>].document.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">span.style.backgroundColor = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">range.surroundContents(span);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="通过表单提交富文本"><a href="#通过表单提交富文本" class="headerlink" title="通过表单提交富文本"></a>通过表单提交富文本</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">form.addEventListener(<span class="string">&quot;submit&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target=event.target;</span><br><span class="line">   target.elements[<span class="string">&quot;comments&quot;</span>].value=frames[<span class="string">&quot;richedit&quot;</span>].document.body.innerHTML;<span class="comment">//使用内嵌窗格 </span></span><br><span class="line">    <span class="comment">//target.elements[&quot;comments&quot;].value=document.getElementById(&quot;richedit&quot;).innerHTML;//使用contenteditable</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>表单序列化</title>
    <url>/2021/12/12/%E8%A1%A8%E5%8D%95%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>表单在js中可以使用表单字段的type属性连同其name属性和value属性来进行序列化</p>
<ul>
<li><p>字段名和值是 URL 编码的并以和号（&amp;）分隔。</p>
</li>
<li><p> 禁用字段不会发送。</p>
</li>
<li><p>复选框或单选按钮只在被选中时才发送。</p>
</li>
<li><p>类型为”reset”或”button”的按钮不会发送。</p>
</li>
<li><p>多选字段的每个选中项都有一个值。</p>
</li>
<li><p>通过点击提交按钮提交表单时，会发送该提交按钮；否则，不会发送提交按钮。类型为”image”<br>的<input>元素视同提交按钮。</p>
</li>
<li><p>select元素的值是被选中option元素的 value 属性。如果<option>元素没有 value 属<br>性，则该值是它的文本</option></p>
<p>返回的结果是查询字符串的格式</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">form</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> parts=[];</span><br><span class="line">    <span class="keyword">let</span> optValue;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> field <span class="keyword">of</span> form.elements)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(field.type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;select-one&quot;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;select-multiple&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span>(field.name.length)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">let</span> option <span class="keyword">of</span> field.options)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(option.selected)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(option.hasAttribute)&#123;</span><br><span class="line">                                optValue=(option.hasAttribute(<span class="string">&quot;value&quot;</span>)?option.value:option.text);</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                optValue=(option.attributes[<span class="string">&quot;value&quot;</span>].specified?option.value:option.text);</span><br><span class="line">                            &#125;</span><br><span class="line">                            parts.push(<span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(field.name)&#125;</span>=`</span>+<span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(optValue)&#125;</span>`</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="literal">undefined</span>:<span class="comment">//字段集</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;file&quot;</span>:<span class="comment">//文件输入</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;submit&quot;</span>:<span class="comment">//提交按钮</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;reset&quot;</span>:<span class="comment">//重置按钮</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;button&quot;</span>:<span class="comment">//自定义按钮</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;radio&quot;</span>:<span class="comment">//单选按钮</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;checkbox&quot;</span>:<span class="comment">//复选框</span></span><br><span class="line">                <span class="keyword">if</span>(!field.checked)&#123;<span class="comment">//没被选中，跳出switch，否则进入default分支，将字段的名字和值编码后添加进parts数组</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="comment">//不包含没有名字的表单字段</span></span><br><span class="line">                <span class="keyword">if</span>(field.name.length)&#123;</span><br><span class="line">                    parts.push(<span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(field.name)&#125;</span>=`</span>+<span class="string">`<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(field.value)&#125;</span>`</span>)</span><br><span class="line">                &#125;          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parts.join(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>DOM编程</title>
    <url>/2021/12/12/DOM-DOM%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h1><h2 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script=<span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    script.type=<span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        script.appendChild(<span class="built_in">document</span>.createTextNode(code));<span class="comment">//旧版本的IE浏览器可能出问题</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        script.text=code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">loadScriptString(<span class="string">&quot;function sayHi()&#123;alert(&#x27;hi&#x27;);&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> style=<span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">    style.type=<span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        style.styleSheet.cssText=css;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> head=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line">loadStyleString(<span class="string">&quot;body[background-color:red&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>对于IE，要小心使用styleSheet.cssText，如果重用同一个style元素并设置该属性超过一次，则可能导致浏览器崩溃，将cssText设置为空字符串也可能导致浏览器崩溃</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> table=<span class="built_in">document</span>.createElement(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">table.border=<span class="number">1</span>;</span><br><span class="line">table.width=<span class="string">&quot;100%&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tbody=<span class="built_in">document</span>.createElement(<span class="string">&quot;tbody&quot;</span>);</span><br><span class="line">table.appendChild(tbody);</span><br><span class="line"></span><br><span class="line">table.insertRow(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 1,1&quot;</span>));</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 2,1&quot;</span>));</span><br><span class="line"></span><br><span class="line">table.insertRow(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 1,2&quot;</span>));</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 2,2&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(table);</span><br></pre></td></tr></table></figure>

<h2 id="NodeList"><a href="#NodeList" class="headerlink" title="NodeList"></a>NodeList</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=divs.length;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> div=doocument.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;<span class="comment">//避免导致无穷循环</span></span><br></pre></td></tr></table></figure>

<h1 id="Mutationobserver接口"><a href="#Mutationobserver接口" class="headerlink" title="Mutationobserver接口"></a>Mutationobserver接口</h1><p>在DOM被修改时异步执行回调，使用MutationObserver可以观察整个文档，DOM树的一部分或某个元素</p>
<p>MutationObserver的实例通过调用MutationObserver构造函数并传入一个回调函数创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;DOM was mutated&#x27;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="observe-方法"><a href="#observe-方法" class="headerlink" title="observe()方法"></a>observe()方法</h2><p>接收两个参数：要观察其变化的DOM节点，以及一个MutationObserverInit对象（用于控制观察哪些方面的变化，是一个键值对形式配置选项的字典）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;&lt;body&gt; attributes changed&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure>

<p>body元素上任何属性发生变化都会被这个MutationObserver实例发现，然后异步执行注册的回调函数,body元素后代修改或其他非属性修改不会触发回调进入任务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;&lt;body&gt; attributes changed&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Changed body class&#x27;</span>);</span><br><span class="line"><span class="comment">//Changed body class</span></span><br><span class="line"><span class="comment">//&lt;body&gt; attributes changed</span></span><br></pre></td></tr></table></figure>

<h2 id="回调与MutationRecord"><a href="#回调与MutationRecord" class="headerlink" title="回调与MutationRecord"></a>回调与MutationRecord</h2><p>每次回调都会收到一个MutationRecord实例的数组,包含的信息发生了什么变化以及DOM哪一部分受到影响</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));[</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.setAttributeNS(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="comment">//连续修改多个MutationRecord实例，回调函数就会受到包含这些实例的数组，顺序为变化事件的顺序</span></span><br><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="comment">//[MutationRecord, MutationRecord]</span></span><br></pre></td></tr></table></figure>

<h2 id="disconnect-方法"><a href="#disconnect-方法" class="headerlink" title="disconnect()方法"></a>disconnect()方法</h2><p>会停止此后变化事件的回调，也会抛弃已经加入任务队列要异步执行的回调</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;&lt;body&gt;attributes changed&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">observer.disconnect();</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;<span class="comment">//无日志输出</span></span><br><span class="line"><span class="comment">//让已经入队的回调函数执行完毕后再调用disconnect()</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    observer.disconnect();</span><br><span class="line">    <span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h2 id="复用MutationObserver"><a href="#复用MutationObserver" class="headerlink" title="复用MutationObserver"></a>复用MutationObserver</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords.map(<span class="function">(<span class="params">x</span>)=&gt;</span>x.target)));</span><br><span class="line"><span class="keyword">let</span> childA=<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    childB=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(childA);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(childB);</span><br><span class="line">observer.observe(childA,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">observer.observe(childB,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">childA.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">childB.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="comment">//[div, span]</span></span><br></pre></td></tr></table></figure>

<h2 id="重用MutationObserver"><a href="#重用MutationObserver" class="headerlink" title="重用MutationObserver"></a>重用MutationObserver</h2><p>调用diaconnect()不会结束MutationObserver的生命，还可以重新使用这个观察者，再将它关联到新的目标结点</p>
<h1 id="MutationObserverInit与观察范围"><a href="#MutationObserverInit与观察范围" class="headerlink" title="MutationObserverInit与观察范围"></a>MutationObserverInit与观察范围</h1><h2 id="观察属性"><a href="#观察属性" class="headerlink" title="观察属性"></a>观察属性</h2><p>设置attributes为true,观察所有属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="comment">//添加属性</span></span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line"><span class="built_in">document</span>.body.removeAttribute(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用attributeFilter添加白名单属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributeFilter</span>:[<span class="string">&#x27;foo&#x27;</span>]&#125;);</span><br><span class="line"><span class="comment">//添加白名单属性</span></span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="comment">//添加被排除的属性</span></span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;baz&#x27;</span>,<span class="string">&#x27;qux&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>在记录中保存属性原来的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords.map(<span class="function">(<span class="params">x</span>)=&gt;</span>x.oldValue)));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributeOldValue</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;qux&#x27;</span>);</span><br><span class="line"><span class="comment">//[null, &#x27;bar&#x27;, &#x27;baz&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="观察字符数据"><a href="#观察字符数据" class="headerlink" title="观察字符数据"></a>观察字符数据</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="built_in">document</span>.body.firstChild,&#123;<span class="attr">characterData</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;foo&#x27;</span>;<span class="comment">//创建要观察的文本节点</span></span><br><span class="line">observer.observe(<span class="built_in">document</span>.body.firstChild,&#123;<span class="attr">characterData</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line"><span class="comment">//使用characterDataOldValue</span></span><br><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords.map(<span class="function">(<span class="params">x</span>)=&gt;</span>x.oldValue)));</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;foo&#x27;</span>;<span class="comment">//创建要观察的文本节点</span></span><br><span class="line">observer.observe(<span class="built_in">document</span>.body.firstChild,&#123;<span class="attr">characterDataOldValue</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.textContent=<span class="string">&#x27;baz&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="观察子节点"><a href="#观察子节点" class="headerlink" title="观察子节点"></a>观察子节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line"><span class="comment">//创建两个初始子节点</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">childList</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.insertBefore(<span class="built_in">document</span>.body.lastChild,<span class="built_in">document</span>.body.firstChild);</span><br><span class="line"><span class="comment">//发生两次变化，先移除节点再添加节点</span></span><br></pre></td></tr></table></figure>

<h2 id="观察子树"><a href="#观察子树" class="headerlink" title="观察子树"></a>观察子树</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>,<span class="attr">subtree</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.firstChild.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="异步回调与记录队列"><a href="#异步回调与记录队列" class="headerlink" title="异步回调与记录队列"></a>异步回调与记录队列</h2><h3 id="takeRecords-方法"><a href="#takeRecords-方法" class="headerlink" title="takeRecords()方法"></a>takeRecords()方法</h3><p>清空记录队列，取出并·返回其中的所有MutationRecord实例,可以用在希望断开与观察目标的联系，但又希望处理由于disconnect()而被抛弃的记录队列中的MutationRecord实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(observer.takeRecords());</span><br><span class="line"><span class="built_in">console</span>.log(observer.takeRecords());</span><br><span class="line"><span class="comment">//[MutationRecord, MutationRecord]</span></span><br><span class="line"><span class="comment">//[]</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>DOM-节点层级</title>
    <url>/2021/12/12/DOM-%E8%8A%82%E7%82%B9%E5%B1%82%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h2><p>DOM Level 描述为名为Node的接口，Node接口在JavaScript中被实现为Node类型，所有结点都继承Node类型，因此所有类型都共享相同的基本属性和方法。</p>
<p>节点类型可通过与这些常量比较来确定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//节点类型可通过与这些常量比较确定，如果两者相等，则意味着someNode是一个元素节点</span></span><br><span class="line"><span class="keyword">if</span>(someNode.nodeType==Node.ELEMENT_NODE)&#123;</span><br><span class="line">    alert(<span class="string">&quot;Node is an element&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nodeName和nodeValue保存着有关节点的信息</span></span><br><span class="line"><span class="keyword">if</span>(someNode.nodeType==<span class="number">1</span>)&#123;</span><br><span class="line">    value=someNode.nodeName;<span class="comment">//会显示元素的标签名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h4><p>节点与其他节点的关系可形容为家族关系，每个节点有一个childNodes属性其中包含一个NodeList的实例，NodeList是一个类数组对象，它是DOM结构的查询，DOM结构的变化会自动地在NodeList中反映出来，用于存储可以按位置存取的有序节点。可以使用中括号或者item()方法访问它的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> firstChild=someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> secondChild=someNode.childNodes.item(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> count=someNode.childNodes.length;</span><br><span class="line"><span class="keyword">let</span> arrayofNodes=<span class="built_in">Array</span>.from(someNode.childNodes);</span><br></pre></td></tr></table></figure>

<p>parentNode指向DOM树中的父元素，childNode中所有节点都有同一个父元素，parentNode指向同一个节点，childNodes列表中每个结点都是同一列表中其他节点的同胞节点，使用previousSibling和nextSibling可以在这个列表的节点间导航。</p>
<p>hasChildNodes()节点返回true则说明节点有一个或多个子节点。</p>
<p>ownerDocument属性是一个指向代表整个文档的文档节点的指针</p>
<h4 id="操纵节点"><a href="#操纵节点" class="headerlink" title="操纵节点"></a>操纵节点</h4><p>appendChild():用于在childNodes列表末尾添加节点，返回新添加的节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> returnedNode=someNode.appendChild(newNode);</span><br><span class="line">alert(returnedNode==newNode);<span class="comment">//true</span></span><br><span class="line">alert(someNode.lastChild==newNode);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>inserBefore():接收两个参数，要插入的节点和参照节点。要插入的节点会变成参照节点的前一个同胞节点，并被返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">returnedNode=someNode.insertBefore(newNode,<span class="literal">null</span>);</span><br><span class="line">alert(newNode==someNode.lastChild);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//作为新的第一个子节点插入</span></span><br><span class="line">retunedNode=someNode.insertBefore(newNode,someNode.firstChild);</span><br><span class="line">alert(returnedNode==newNode);<span class="comment">//true</span></span><br><span class="line">alert(newNode==someNode.fiestChild);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//插入最后一个子节点的前面</span></span><br><span class="line">returnedNode==someNode.insertBefore(newNode,someNode.lastChild);</span><br><span class="line">alert(newNode==someNode.childNodes[someNode.childNodes.length-<span class="number">2</span>]);<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>replaceChild():接收两个参数，要插入的节点和要替换的节点。要替换的节点被返回并从文档中被移除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">returnedNode=someNode.replaceChild(newNode,someNode.lastChild);<span class="comment">//替换最后一个子节点</span></span><br></pre></td></tr></table></figure>

<p>removeChild():接收一个参数，即要被移除的节点，被移除的节点会被返回</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formerFirstChild=someNode.removeChild(someNode.firstChild);</span><br></pre></td></tr></table></figure>

<p>cloneNode():传入true参数会进行深复制，即复制节点和整个子DOM树；传入false进行浅复制，只会复制该方法的节点。复制返回的节点属于文档所有，但未指定父节点，称为孤儿节点，通过appendChild()和insertBefore()，replaceChild()方法把孤儿节点添加到文档中</p>
<p>normalize():处理文本节点，如果发现空文本节点则将其删除否则如果两个同胞节点相邻则将其合并为一个文本节点</p>
<h2 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h2><p>表示文档节点的类型,document是HTMLDocument的实例（HTMLDocument继承Document）,表示整个HTML页面，document是window对象的属性是一个全局对象。</p>
<ul>
<li><p>nodetype等于9</p>
</li>
<li><p>nodeName值为“#document”</p>
</li>
<li><p>nodevalue值为null</p>
</li>
<li><p>parentNode值为null</p>
</li>
<li><p>ownerDocument值为null</p>
</li>
<li><p>子节点可以使DocumentType(最多一个)，Element(最多一个)，ProcessingInstruction或Comment类型</p>
</li>
</ul>
<h4 id="文档子节点"><a href="#文档子节点" class="headerlink" title="文档子节点"></a>文档子节点</h4><p>documentElement:始终指向HTML页面中的<html>元素</html></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="keyword">let</span> html=<span class="built_in">document</span>.documentElement;<span class="comment">//取得对&lt;html&gt;的引用</span></span><br><span class="line">alert(html===<span class="built_in">document</span>.childNodes[<span class="number">0</span>]);</span><br><span class="line">alert(html===<span class="built_in">document</span>.firstChild);</span><br></pre></td></tr></table></figure>

<p>document.body:直接指向body元素，取得对body的引用</p>
<h4 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h4><p>title:显示浏览器窗口或标签页的标题栏</p>
<p>URL:包含当前页面的完整URL</p>
<p>domain:包含页面的域名</p>
<p>referrer:包含空字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//document.URL=&quot;http://www.wrox.com/WileyCDA/&quot;,document.domain就是www.wrox.com</span></span><br><span class="line"><span class="built_in">document</span>=<span class="string">&quot;wrrox.com&quot;</span>;<span class="comment">//成功</span></span><br><span class="line"><span class="built_in">document</span>=<span class="string">&quot;nczonline.net&quot;</span>;<span class="comment">//出错,不能给这个属性设置URL中不包含的值</span></span><br></pre></td></tr></table></figure>

<p>当页面中包含来自某个不同子域的窗格（<frame>)或内嵌窗格(<iframe>)设置document.domain是有用的，比如一个加载自<a href="http://www.wrox.com的页面包含一个内嵌窗格其中的页面加载自p2p.wrox.com,这两个页面包含不同的字符串,内部和外部不能相互访问对方的javascript对象,如果每个页面都把document.domain设置为wrox.com,那两个页面就可以相互通信/">www.wrox.com的页面包含一个内嵌窗格其中的页面加载自p2p.wrox.com，这两个页面包含不同的字符串，内部和外部不能相互访问对方的JavaScript对象，如果每个页面都把document.domain设置为wrox.com,那两个页面就可以相互通信</a></iframe></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain=<span class="string">&quot;wrox.com&quot;</span>;<span class="comment">//放松，成功</span></span><br><span class="line"><span class="built_in">document</span>.doman=<span class="string">&quot;p2p2.wrox.com&quot;</span>;<span class="comment">//收紧，失败,一旦放松就不能收紧</span></span><br></pre></td></tr></table></figure>

<h4 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h4><p>getElementById()：接收一个要获取元素的ID，如果找到这个元素则返回，没找到返回null。参数I必须跟元素在页面中大的id属性完全匹配，包括大小写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myDiv&quot;</span>&gt;ome text&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> div=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>);<span class="comment">//取得对&lt;div&gt;的引用,如果存在多个相同ID的元素则返回在文档中的第一个元素</span></span><br></pre></td></tr></table></figure>

<p>getElementsByTagName():接收一个参数，即要获取元素的标签名,返回包含0个或多个元素的NodeList，在HTML文档中返回一个HTMLCollection对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> images=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">alert(images.length);<span class="comment">//图片数量</span></span><br><span class="line">alert(images[<span class="number">0</span>].src);<span class="comment">//第一张图片的src属性</span></span><br><span class="line">alert(images.item(<span class="number">0</span>).src);</span><br><span class="line"><span class="comment">//通过name属性获得引用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;myImage.gif&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myImage&quot;</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">let myImage=images.namedItem(&quot;myImage&quot;);</span></span><br><span class="line"><span class="xml">//images[&quot;myImage&quot;]</span></span><br><span class="line"><span class="xml">//取得文档的所有元素</span></span><br><span class="line"><span class="xml">let allElements=document.getElementsByTagName(&quot;*&quot;);</span></span><br></pre></td></tr></table></figure>

<p>getElementsByName():返回具有给定name属性的所有元素，常用于单选按钮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;fieldset&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>Which color do you prefer?<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span></span><br><span class="line">	&lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; value=&quot;red&quot; name=&quot;color&quot; id=&quot;colorRed&quot;&gt;&lt;label for=&quot;colorRed&quot;&gt;Red&lt;/label&gt;</span><br><span class="line">    	&lt;/li&gt;</span><br><span class="line">    	&lt;li&gt; &lt;input type=&quot;radio&quot; value=&quot;blue&quot; name=&quot;color&quot; id=&quot;colorBlue&quot;&gt;&lt;label for=&quot;colorBlue&quot;&gt;Blue&lt;/label&gt;</span><br><span class="line">    	&lt;/li&gt;</span><br><span class="line">    let radios=document.getElementsByName(&quot;color&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h2><ul>
<li><p>nodeType=1</p>
</li>
<li><p>nodeName值为元素的标签名</p>
</li>
<li><p>nodeValue的值为null</p>
</li>
<li><p>parentNode值为Document或Element对象</p>
</li>
<li><p>子节点可以是Element,Text,Comment,ProcessingInstruction等类型</p>
</li>
</ul>
<p>通过nodeName或tagName属性获得元素的标签名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用对象属性</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;div id=&quot;myDiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       let div=document.getElementById(&quot;myDiv&quot;);</span><br><span class="line">	alert(div.tagName);//&quot;DIV&quot;</span><br><span class="line">	alert(div.tagName==div.nodeName);//true</span><br><span class="line">	if(element.tagName.toLowerCase()==&quot;div&quot;)&#123;</span><br><span class="line">    //,HTML中，元素标签名以答谢表示，XML中标签名与代码中的大小写一致，不确定脚本是HTML还是XML运行，推荐将标签名转换为小写形式，适合所有文档</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h4><ul>
<li><p>id:元素在文档中的唯一标识符</p>
</li>
<li><p>title：包含元素的额外信息，通常以提示条形式展示</p>
</li>
<li><p>lang：元素内容的语言代码</p>
</li>
<li><p>dir：语言的书写方向（ltr从左到右，rtl从右到左)</p>
</li>
<li><p>className:相当于class属性，用于指定元素的CSS类</p>
</li>
</ul>
<h5 id="取得属性"><a href="#取得属性" class="headerlink" title="取得属性"></a>取得属性</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用对象属性</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;div id=&quot;myDiv&quot; class=&quot;bd&quot; title=&quot;Body text&quot; lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var div=document.getElementById(&quot;myDiv&quot;);</span><br><span class="line">        alert(div.id);</span><br><span class="line">        alert(div.className);</span><br><span class="line">        alert(div.title);</span><br><span class="line">        alert(div.lang);</span><br><span class="line">        alert(div.dir);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">//使用getAttribute()方法</span><br><span class="line">alert(div.getAttribute(&quot;class&quot;));</span><br></pre></td></tr></table></figure>

<p>getAttribute()主要用于取得自定义属性的值，其他情况使用对象属性</p>
<h5 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h5><p>setAttribute():接收两个参数，要设置的属性名和属性值,如果属性存在则用指定的值替换原来的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接给对象属性赋值</span></span><br><span class="line">div.id=<span class="string">&quot;someOtherId&quot;</span></span><br><span class="line"><span class="comment">//在对象属性上添加自定义属性，不会让它变成元素的属性</span></span><br><span class="line">div.mycolor=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">alert(div.getAttribute(<span class="string">&quot;mycolor&quot;</span>));<span class="comment">//null</span></span><br><span class="line"><span class="comment">//使用setAttribute赋值</span></span><br><span class="line">div.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;someOtherId&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="attributes属性"><a href="#attributes属性" class="headerlink" title="attributes属性"></a>attributes属性</h5><p>attributes属性包含一个NamedNodeMap实例，是一个类似NodeList的“实时”集合，元素的每个属性都表示为一个Attr节点，并保存在NamedNodeMap对象中</p>
<p>attributed属性中的每个节点的nodeName是对应属性的名字，nodeValue是属性的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputAttributes</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pairs=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=element.attributes.length;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">const</span> attribute=element.attributes[i];</span><br><span class="line">        pairs.push(<span class="string">`<span class="subst">$&#123;attribute.nodeName&#125;</span>=<span class="subst">$&#123;attribute.nodeValue&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> pairs.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h5><p>document.createElement():一个参数，即要创建元素的标签名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> div=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.id=<span class="string">&quot;myNewDiv&quot;</span>;</span><br><span class="line">div.className=<span class="string">&quot;box&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);</span><br></pre></td></tr></table></figure>

<h2 id="Text-类型"><a href="#Text-类型" class="headerlink" title="Text 类型"></a>Text 类型</h2><p>Text节点由Text类型表示，包含按字面解释的纯文本，也可能包含转义后的HTML字符，Text节点中包含的文本可以通过nodeValue或者data属性访问</p>
<ul>
<li><p>nodetype=3</p>
</li>
<li><p>nodeName=”#text”</p>
</li>
<li><p>nodeValue值为节点中包含的文本</p>
</li>
<li><p>parentNode值为Element对象</p>
</li>
<li><p>不支持子节点</p>
</li>
<li><p>appendData(text):向节点末尾添加文本text</p>
</li>
<li><p>deleteData(offset,count),从位置offset开始删除count个字符</p>
</li>
<li><p>insertData(offset,text),在位置offset插入text；</p>
</li>
<li><p>replaceData(offset,count,text)，用text替换从位置offset到offset+count大的文本</p>
</li>
<li><p>splitText(offset),在位置offset将当前文本节点拆分为两个文本节点</p>
</li>
<li><p>substringData(offset,count),提取从位置offset到offset+count的文本</p>
</li>
</ul>
<p>包含文本内容的每个元素最多只能有一个文本节点</p>
<h4 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h4><p>document.createTextNode():创建新文本节点，接收一个参数，即要插入节点的文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">element.className=<span class="string">&quot;message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="keyword">let</span> anotherTextNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Yippee&quot;</span>);</span><br><span class="line">element.appendChild(anotherTextNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="规范化文本节点"><a href="#规范化文本节点" class="headerlink" title="规范化文本节点"></a>规范化文本节点</h4><h5 id="合并文本节点"><a href="#合并文本节点" class="headerlink" title="合并文本节点"></a>合并文本节点</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">element.className=<span class="string">&quot;message&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="keyword">let</span> anotherTextNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Yippee&quot;</span>);</span><br><span class="line">element.appendChild(anotherTextNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line">alert(element.childNodes.length);<span class="comment">//2</span></span><br><span class="line">element.normalize();</span><br><span class="line">alert(element.childNodes.length);<span class="comment">//1</span></span><br><span class="line">alert(element.firstChild.nodeValue);</span><br></pre></td></tr></table></figure>

<h5 id="拆分文本节点"><a href="#拆分文本节点" class="headerlink" title="拆分文本节点"></a>拆分文本节点</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">element.className=<span class="string">&quot;message&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"><span class="keyword">let</span> newNode=element.firstChild.splitText(<span class="number">5</span>);</span><br><span class="line">alert(element.fiestChild.nodeValue);<span class="comment">//&quot;Hello&quot;</span></span><br><span class="line">alert(newNode.nodeValue);<span class="comment">//&quot;world&quot;</span></span><br><span class="line">alert(element.chileNodes.length);<span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h2><ul>
<li><p>nodeType=8</p>
</li>
<li><p>nodeName=”#comment”</p>
</li>
<li><p>nodeValue值为注释内容</p>
</li>
<li><p>parentNode值为Document或Element对象</p>
</li>
<li><p>不支持子节点</p>
</li>
</ul>
<p>Comment类型与Text类型继承自同一个基类(CharacterData),因此拥有除splitText之外的Text节点所有的字符串操作方法</p>
<h2 id="CDATASection类型"><a href="#CDATASection类型" class="headerlink" title="CDATASection类型"></a>CDATASection类型</h2><p>继承Text类型，拥有除splitText之外的Text节点所有的字符串操作方法</p>
<h2 id="DocumentType类型"><a href="#DocumentType类型" class="headerlink" title="DocumentType类型"></a>DocumentType类型</h2><ul>
<li><p>在DOM Level1中不支持动态创建，只能在解析文档代码时创建，DocumentType对象保存在document.doctype属性中.</p>
</li>
<li><p>DocumentType对象有3个属性：name,entities,notations.</p>
</li>
<li><p>name是文档名称，entities是这个文档类型描述实体的NameNodeMap,而notations是这个文档类型描述的表示法的NamedNodeMap.</p>
</li>
<li><p>浏览器文档通常是HTML或XHTML类型，所以entities和notations列表为空，只有name属性有用，包含文档类型的名称</p>
</li>
</ul>
<h2 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h2><ul>
<li><p>nodeType=11</p>
</li>
<li><p>nodeName=”#document-fragment”</p>
</li>
<li><p>nodeValue=null</p>
</li>
<li><p>parentNode=null</p>
</li>
<li><p>子节点可以是Element,ProcessingInstruction,Comment,Text,CDATASection</p>
</li>
</ul>
<p>充当其他要被添加的文档节点的仓库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;myList&quot;</span>&gt;&lt;/ul&gt;</span><br><span class="line"><span class="keyword">let</span> fragment=<span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">let</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myList&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> li=<span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">`Item <span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>));</span><br><span class="line">    fragment.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure>

<h2 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h2><p>属性是存在于元素attributes属性中的节点</p>
<ul>
<li><p>nodeType=2</p>
</li>
<li><p>nodeName值为属性名</p>
</li>
<li><p>nodeValue值为属性值</p>
</li>
<li><p>parentNode值为null</p>
</li>
</ul>
<p>Attr对象上3个属性</p>
<ul>
<li><p>name包含属性名</p>
</li>
<li><p>value包含属性值</p>
</li>
<li><p>specified是一个布尔值，表示属性使用的是默认值和还是被指定的值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> attr=<span class="built_in">document</span>.createAttribute(<span class="string">&quot;align&quot;</span>);<span class="comment">//创建新的Attr节点，参数为属性名</span></span><br><span class="line">attr.value=<span class="string">&quot;left&quot;</span>;</span><br><span class="line">element.setAttributeNode(attr);<span class="comment">//添加属性节点</span></span><br><span class="line">alert(element.attributes[<span class="string">&quot;align&quot;</span>].value);<span class="comment">//返回对应属性节点</span></span><br><span class="line">alert(element.getAttributeNode(<span class="string">&quot;align&quot;</span>).value);<span class="comment">//返回对应属性节点</span></span><br><span class="line">alert(element.getAttribute(<span class="string">&quot;align&quot;</span>));<span class="comment">//只返回属性值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>选择框编程</title>
    <url>/2021/12/12/%E9%80%89%E6%8B%A9%E6%A1%86%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="选项处理"><a href="#选项处理" class="headerlink" title="选项处理"></a>选项处理</h1><p>使用选择框的selectedIndex属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  &lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span> <span class="attr">id</span>=<span class="string">&quot;selLocation&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Sunnyvalue,CA&quot;</span>&gt;</span>Sunnyvalue<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Los Angeles,CA&quot;</span>&gt;</span>Los Angeles<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mountain View,CA&quot;</span>&gt;</span>Mountain View<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>China<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">option</span> &gt;</span>Australia<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">     &lt;/form&gt;</span><br><span class="line">     </span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;example3.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> selectbox=<span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">&quot;location&quot;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelectedOptions</span>(<span class="params">selectbox</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> option <span class="keyword">of</span> selectbox.options)&#123;</span><br><span class="line">        <span class="keyword">if</span>(option.selected)&#123;</span><br><span class="line">            result.push(option);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> selectedOptions=getSelectedOptions(selectbox);</span><br><span class="line"><span class="keyword">let</span> message=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> option <span class="keyword">of</span> selectedOptions)&#123;</span><br><span class="line">    message+=<span class="string">`Selected index:<span class="subst">$&#123;option.index&#125;</span>\n`</span>+<span class="string">`Selected text:<span class="subst">$&#123;option.text&#125;</span>\n`</span>+<span class="string">`Selected value:<span class="subst">$&#123;option.value&#125;</span>\n`</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure>

<h1 id="添加选项"><a href="#添加选项" class="headerlink" title="添加选项"></a>添加选项</h1><h2 id="动态创建选项"><a href="#动态创建选项" class="headerlink" title="动态创建选项"></a>动态创建选项</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newOption=<span class="built_in">document</span>.createElement(<span class="string">&quot;option&quot;</span>);</span><br><span class="line">newOption.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Option text&quot;</span>));</span><br><span class="line">newOption.setAttribute(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;Option value&quot;</span>);</span><br><span class="line">selectbox.appendChild(newOption);</span><br></pre></td></tr></table></figure>

<p>使用Option构造函数创建选项,接收两个参数：text和value，用选择框的add方法添加选项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> newOption=<span class="keyword">new</span> Option(<span class="string">&quot;Option text&quot;</span>,<span class="string">&quot;Option value&quot;</span>);</span><br><span class="line">selectbox.add(newOption,<span class="literal">undefined</span>);<span class="comment">//在列表末尾添加选项</span></span><br></pre></td></tr></table></figure>

<h2 id="移除选项"><a href="#移除选项" class="headerlink" title="移除选项"></a>移除选项</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectbox.removeChild(selectbox.options[<span class="number">0</span>]);<span class="comment">//移除第一项</span></span><br><span class="line">selectbox.remove(<span class="number">0</span>);<span class="comment">//移除第一项</span></span><br><span class="line">selectbox.options[<span class="number">0</span>]=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//清除选项框的所有选项</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearSelectbox</span>(<span class="params">selectbox</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> option <span class="keyword">of</span> selectbox.options)&#123;</span><br><span class="line">        selectbox.remove(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="移动和重排选项"><a href="#移动和重排选项" class="headerlink" title="移动和重排选项"></a>移动和重排选项</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> selectbox1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;selLocations1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> selectbox2=<span class="built_in">document</span>.getElementById(<span class="string">&quot;selLocations2&quot;</span>);</span><br><span class="line">selectbox2.appendChild(selectbox1.options[<span class="number">0</span>]);<span class="comment">//将选项从第一个选择框移动到另一个选择框</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重排选项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> selectbox1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;selLocations1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> optionToMove=selectbox1.options[<span class="number">1</span>];</span><br><span class="line">selectbox1.insertBefore(optionToMove,selectbox1.options[optionToMove.index-<span class="number">1</span>]);<span class="comment">//将要重排的选项移动到它原先位置的前前面</span></span><br><span class="line"><span class="keyword">let</span> selectbox1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;selLocations1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> optionToMove=selectbox1.options[<span class="number">1</span>];</span><br><span class="line">selectbox1.insertBefore(optionToMove,selectbox1.options[optionToMove.index+<span class="number">2</span>]);<span class="comment">//将要重排的选项移动到它原先位置的后面一位</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>文本框编程</title>
    <url>/2021/12/09/%E6%96%87%E6%9C%AC%E6%A1%86/</url>
    <content><![CDATA[<h1 id="文本框编程"><a href="#文本框编程" class="headerlink" title="文本框编程"></a>文本框编程</h1><h2 id="表示文本框的两种方式"><a href="#表示文本框的两种方式" class="headerlink" title="表示文本框的两种方式"></a>表示文本框的两种方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> size=<span class="string">&quot;25&quot;</span> maxlength=<span class="string">&quot;50&quot;</span> value=<span class="string">&quot;initial value&quot;</span>&gt;</span><br><span class="line"> <span class="comment">//创建多行文本框</span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;5&quot;</span>&gt;</span>initial value<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="comment">//用使用value属性读写文本框</span></span><br><span class="line"><span class="keyword">let</span> textbox=<span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="string">&quot;textbox1&quot;</span>];</span><br><span class="line">textbox.value=<span class="string">&quot;Some new value&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="选择文本"><a href="#选择文本" class="headerlink" title="选择文本"></a>选择文本</h2><p>select()用于全选文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> form=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line"> <span class="keyword">let</span> textbox=form.elements[<span class="number">0</span>];</span><br><span class="line"> textbox.addEventListener(<span class="string">&quot;focus&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">     event.target.select();</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`Text selected:<span class="subst">$&#123;textbox.value&#125;</span>`</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>setSelectionRange()用于部分选择文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> form=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> textbox=form.elements[<span class="number">0</span>];</span><br><span class="line">textbox.addEventListener(<span class="string">&quot;focus&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    event.target.select();</span><br><span class="line">    textbox.setSelectionRange(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Text selected:<span class="subst">$&#123;textbox.value&#125;</span>`</span>);    </span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="屏蔽按键"><a href="#屏蔽按键" class="headerlink" title="屏蔽按键"></a>屏蔽按键</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">textbox.addEventListener(<span class="string">&quot;keypress&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/\d/</span>.test(<span class="built_in">String</span>.fromCharCode(event.charCode))&amp;&amp;event.charCode&gt;<span class="number">9</span>&amp;&amp;!event.ctrlKey)&#123;<span class="comment">//屏蔽非数字字符但允许同样触发keypress事件的所有基础按键以及ctrl键</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="自动切换"><a href="#自动切换" class="headerlink" title="自动切换"></a>自动切换</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=&quot;text &quot; name=&quot;tel1&quot; id=&quot;textTel1&quot; maxlength=&quot;3&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;tel2&quot; id=&quot;textTel2&quot; maxlength=&quot;3&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;tel3&quot; id=&quot;textTel3&quot; maxlength=&quot;4&quot;&gt;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">     &lt;/form&gt;</span><br><span class="line">     let inputIds=[&quot;textTel1&quot;,&quot;textTel2&quot;,&quot;textTel3&quot;];</span><br><span class="line">for(let id of inputIds)&#123;</span><br><span class="line">    let textbox=document.getElementById(id);</span><br><span class="line">    textbox.addEventListener(&quot;keyup&quot;,(event)=&gt;&#123;</span><br><span class="line">        let target=event.target;</span><br><span class="line">    if(target.value.length==target.maxLength)&#123;</span><br><span class="line">        let form=target.form;</span><br><span class="line">        for(let i=0,len=form.elements.length;i&lt;len;i++)&#123;</span><br><span class="line">            if(form.elements[i]==target)&#123;</span><br><span class="line">                if(form.elements[i+1])&#123;</span><br><span class="line">                    form.elements[i+1].focus();</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>表单</title>
    <url>/2021/12/09/%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="禁用表单"><a href="#禁用表单" class="headerlink" title="禁用表单"></a>禁用表单</h2><p>避免多次提交表单可以在第一次点击后禁用表单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> form=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line">form.addEventListener(<span class="string">&quot;submit&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> target=event.target;</span><br><span class="line">    <span class="comment">//取得提交按钮</span></span><br><span class="line">    <span class="keyword">let</span> btn=target.elements[<span class="string">&quot;submit-btn&quot;</span>];</span><br><span class="line">    <span class="comment">//禁用提交按钮</span></span><br><span class="line">    btn.disabled=<span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="focus"><a href="#focus" class="headerlink" title="focus()"></a>focus()</h2><p>把焦点设置到表单字段,这意味着该字段会变成活动字段并可以响应键盘事件,autofocus()会自动为带有该属性的元素设置焦点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> form=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;load&quot;</span>,<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> element=form.elements[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">if</span>(element.autofocus!==<span class="literal">true</span>)&#123;</span><br><span class="line">         element.focus();</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&quot;JS focus&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="表单的公共事件"><a href="#表单的公共事件" class="headerlink" title="表单的公共事件"></a>表单的公共事件</h2>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>BOM</title>
    <url>/2021/11/25/BOM/</url>
    <content><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>提供当前窗口加载文档的信息，以及通常的导航功能，它既是window的属性也是document的属性。</p>
<h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getQueryStringArgs=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取得没有开头问号的查询字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> qs=(location.search.length&gt;<span class="number">0</span>)?location.search.substring(<span class="number">1</span>):<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> args=&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span>(qs.split(<span class="string">&#x27;&amp;&#x27;</span>).map(<span class="function"><span class="params">kv</span>=&gt;</span>kv.split(<span class="string">&#x27;=&#x27;</span>))))&#123;</span><br><span class="line">        <span class="keyword">let</span> name=item[<span class="number">0</span>];</span><br><span class="line">            value=item[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(name.length)&#123;</span><br><span class="line">            args[name]=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//qs=&quot;?q=javaScript&amp;num=10&quot;;</span></span><br><span class="line"><span class="keyword">let</span> args=getQueryStringArgs();</span><br><span class="line">alert(args[<span class="string">&quot;q&quot;</span>]);</span><br><span class="line">alert(args[<span class="string">&#x27;num&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>使用USLSearchParams检查和修改查询字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> qs=<span class="string">&quot;?q=javaScript&amp;num=10&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> searchParams=<span class="keyword">new</span> URLSearchParams(qs);</span><br><span class="line">alert(searchParams.toString());</span><br><span class="line">searchParams.has(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">searchParams.get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">searchParams.set(<span class="string">&quot;page&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">alert(searchParams.toString());</span><br><span class="line">searchParams.delete(<span class="string">&quot;q&quot;</span>);</span><br><span class="line">alert(searchParams.toString());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> param <span class="keyword">of</span> searchParams)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="操作地址"><a href="#操作地址" class="headerlink" title="操作地址"></a>操作地址</h3><p>通过修改location对象修改浏览器地址，使用assign方法传进一个URL,会导航到新URL同时在浏览器历史记录增加一条记录，下面三种方法功能相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.assign(<span class="string">&quot;http://www.wrox.com&quot;</span>);</span><br><span class="line"><span class="built_in">window</span>.location=<span class="string">&quot;http://www.wrox.com&quot;</span>;</span><br><span class="line">location.href=<span class="string">&quot;http://www.wrox.com&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>通过修改location属性可以修改当前加载的页面,hash,search,hostname,pathname.port属性被设置为新值后会修改当前的URL</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设当前URL为http://www.wrox.com/WileyCDA/</span></span><br><span class="line">location.assign(<span class="string">&quot;http://www.wrox.com/WileyCDA&quot;</span>);</span><br><span class="line"><span class="comment">//把URL修改为http://www.wrox.com/WileyCDA/#section1</span></span><br><span class="line">location.hash=<span class="string">&quot;#section1&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.wrox.com/WileyCDA/?q=javascript</span></span><br><span class="line">location.search=<span class="string">&quot;?q=javascript&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.somewhere.com/WileyCDA/</span></span><br><span class="line">location.hostname=<span class="string">&quot;www.somewhere.com&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.somewhere.com/mydir/</span></span><br><span class="line">location.pathname=<span class="string">&quot;mydir&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.somewhere.com:8080/WileyCDA/</span></span><br><span class="line">location.port=<span class="number">8080</span>;</span><br></pre></td></tr></table></figure>

<p>以上的修改会在浏览器中增加记录，点击后退即可导航到前一个界面，不希望增加历史记录可以使用replace()方法，reload()可以重新加载当前页面，如果页面自从上次请求后没有修改过，则浏览器可能会从缓存中加载页面，如果想强制从服务器中加载，必须传入true</p>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>history用来导航历史记录，同时不会暴露用户访问过的URL。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.go(-<span class="number">1</span>);<span class="comment">//后退一页</span></span><br><span class="line">history.go(<span class="number">1</span>);<span class="comment">//前进一页</span></span><br><span class="line">history.go(<span class="string">&quot;wrox.com&quot;</span>)<span class="comment">//导航到最近的wrox.com页面</span></span><br><span class="line"><span class="comment">//go有两个简写方法：back()和forward()</span></span><br><span class="line">history.back();<span class="comment">//后退一页</span></span><br><span class="line">history.forward()<span class="comment">//前进一页</span></span><br><span class="line"><span class="comment">//history的length属性记录历史记录有多少条目</span></span><br><span class="line"><span class="keyword">if</span>(history.length==<span class="number">1</span>)&#123;<span class="comment">//这是用户窗口第一个页面&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator对象通常用来确定浏览器的类型</p>
<h3 id="检测插件"><a href="#检测插件" class="headerlink" title="检测插件"></a>检测插件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    name=name.toLowerCase();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> plugin <span class="keyword">of</span> <span class="built_in">window</span>.navigator.plugins)&#123;</span><br><span class="line">        <span class="keyword">if</span>(plugin.name.toLowerCase().indexOf(name)&gt;-<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//alert(hasPlugin(&quot;Flash&quot;));</span></span><br><span class="line"><span class="comment">//alert(hasPlugin(&quot;QuickTime&quot;));</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ActiveXObject(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在所有浏览器中检测插件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasFlash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=hasPlugin(<span class="string">&quot;Flash&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        result=hasIEPlugin(<span class="string">&quot;ShockwaveFlash.ShockwaveFlash&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasQuickTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res=hasPlugin(<span class="string">&quot;QuickTime&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!res)&#123;</span><br><span class="line">        res=hasIEPlugin(<span class="string">&quot;QuickTime.QuickTime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">alert(hasFlash());</span><br><span class="line">alert(hasQuickTime());</span><br></pre></td></tr></table></figure>

<h3 id="注册处理程序"><a href="#注册处理程序" class="headerlink" title="注册处理程序"></a>注册处理程序</h3><p>registerProtocolHandler()方法可以把一个网站注册处理为某种特定类型信息应用程序，传入3个参数：要处理的协议（“mailto或ftp),处理该协议的URL，以及应用名称</p>
<p>例如，把一个Web应用程序注册为默认客户端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.registerProtocolHandler(<span class="string">&quot;mailto&quot;</span>,<span class="string">&quot;http://www.somemailclient.com?cmd=%s&quot;</span>,<span class="string">&quot;Some Mail Client&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>HTML+CSS</title>
    <url>/2021/11/25/HTML+CSS/</url>
    <content><![CDATA[<h2 id="定位："><a href="#定位：" class="headerlink" title="定位："></a><strong>定位</strong>：</h2><h3 id="定位总结："><a href="#定位总结：" class="headerlink" title="定位总结："></a><strong>定位总结：</strong></h3><ol>
<li>static: 不脱标，不能使用边偏移</li>
<li>relative:不脱标（占有位置），可用margin,相对于自身位置移动</li>
<li>absolute:脱标（不占有位置）,不可用margin,带有定位的父级</li>
<li>fixed：脱标（不占有位置），浏览器可视区</li>
<li>sticky:不脱标（占有位置），浏览器可视区</li>
</ol>
<ul>
<li><p>绝对定位特点：如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位 </p>
</li>
<li><p> 如果祖先元素有定位（相对，绝对，固定定位）则以最近一级的有定位的祖先元素为参考点移动位置 </p>
</li>
<li><p>绝对定位不占有原先的位置（脱标） </p>
</li>
</ul>
<h3 id="叠放次序-z-index"><a href="#叠放次序-z-index" class="headerlink" title="叠放次序 z-index"></a><strong>叠放次序 z-index</strong></h3><p>在使用定位布局时，可以使用z-index来控制盒子的前后次序</p>
<p>语法：</p>
<h4 id="选择器-z-index-1"><a href="#选择器-z-index-1" class="headerlink" title="选择器{z-index:1;}"></a>选择器{z-index:1;}</h4><ul>
<li>数值可以是正整数，负整数或者0，默认是auto，数值越大，盒子越靠上</li>
<li>如果属性相同，则按照书写顺序，后来居上</li>
<li>数字后面不能加单位</li>
<li>只有定位的盒子才有z-index属性</li>
</ul>
<h2 id="定位的拓展"><a href="#定位的拓展" class="headerlink" title="定位的拓展"></a>定位的拓展</h2><h4 id="1-绝对定位盒子居中"><a href="#1-绝对定位盒子居中" class="headerlink" title="1.绝对定位盒子居中"></a>1.<strong>绝对定位盒子居中</strong></h4><ul>
<li><code>left:50%</code></li>
<li><code>margin-left:-100px;</code></li>
</ul>
<h4 id="2-定位特殊性："><a href="#2-定位特殊性：" class="headerlink" title="2.定位特殊性："></a>2.<strong>定位特殊性：</strong></h4><p>绝对定位固定定位和浮动相似</p>
<ol>
<li><p>行内元素添加绝对或者固定定位，可以直接设置高度和宽度（span)</p>
</li>
<li><p>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</p>
</li>
<li><p>脱标的盒子不会触发外边距合并问题</p>
</li>
</ol>
<h4 id="3-绝对定位（固定定位）会完全压住盒子"><a href="#3-绝对定位（固定定位）会完全压住盒子" class="headerlink" title="3.绝对定位（固定定位）会完全压住盒子"></a><strong>3.绝对定位（固定定位）会完全压住盒子</strong></h4><p>浮动元素只会压住下面标准流的盒子，但是不会压住下面标准流的文字（图片）但是绝对定位（固定定位）会压住下面标准流的所有内容</p>
<p>浮动之所以不会压住下面文字是因为浮动最初的目的是为了做文字环绕效果</p>
<h2 id="元素里的显示和隐藏"><a href="#元素里的显示和隐藏" class="headerlink" title="元素里的显示和隐藏"></a>元素里的显示和隐藏</h2><p>display 显示隐藏元素 但是不保留位置 隐藏元素不想要原来位置，用none，否则用block</p>
<p>visibility显示隐藏元素 但是保留原来的位置,visible为元素可见，hidden为元素隐藏</p>
<p>overflow 溢出显示隐藏 但是只是对于溢出的部分处理,scoll:溢出的部分显示滚动条，visible:溢出部分可见,hidden:溢出部分不可见,auto:没溢出则不显示滚动条，溢出则超出部分显示滚动条。</p>
<h2 id="用户界面样式"><a href="#用户界面样式" class="headerlink" title="用户界面样式"></a>用户界面样式</h2><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p><code>li &#123;cursor: pointer; &#125;</code></p>
<p><code>default 默认小白鼠标</code></p>
<p><code>pointer 小手</code></p>
<p><code>move 移动</code></p>
<p><code>text 文本</code></p>
<p><code>not-allowed 禁止</code></p>
<h3 id="vertical-align实现行内块和文字居中对齐"><a href="#vertical-align实现行内块和文字居中对齐" class="headerlink" title="vertical-align实现行内块和文字居中对齐"></a>vertical-align实现行内块和文字居中对齐</h3><p><code>vertical-align:middle</code></p>
<h4 id="解决图片底部默认空白空隙：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐"><a href="#解决图片底部默认空白空隙：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐" class="headerlink" title="解决图片底部默认空白空隙：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐"></a>解决图片底部默认空白空隙：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐</h4><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>1.给图片添加vertical-align:middle或者top或者bottom</p>
<p>2.把图片转为块级元素 display:block</p>
<h3 id="单行文字溢出显示省略号"><a href="#单行文字溢出显示省略号" class="headerlink" title="单行文字溢出显示省略号"></a>单行文字溢出显示省略号</h3><p><code>white-space:nomal:如果文字显示不开自动换行</code></p>
<p><code>white-space:nowrap:如果文字显示不开强制一行内显示</code></p>
<p><code>overflow:hidden(溢出部分隐藏)</code></p>
<p><code>text-overflow:ellipsis(文字溢出部分用省略号显示)</code></p>
<h3 id="多行文本溢出显示省略号"><a href="#多行文本溢出显示省略号" class="headerlink" title="多行文本溢出显示省略号"></a>多行文本溢出显示省略号</h3><p>​    <code>width: 150px;</code></p>
<p>​      <code>height: 65px;</code></p>
<p>​      <code>background-color: pink;</code></p>
<p>​      <code>margin: 100px auto;</code></p>
<p>​      <code>overflow: hidden;</code></p>
<p>​      <code>text-overflow: ellipsis;</code></p>
<p>​      <code>display: -webkit-box;</code></p>
<p>​      <code>/* 从第几行开始省略 */</code></p>
<p>​      <code>-webkit-line-clamp: 3;</code></p>
<p>​      <code>-webkit-box-orient: vertical;</code></p>
<h2 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h2><h4 id="margin负值使用"><a href="#margin负值使用" class="headerlink" title="margin负值使用"></a>margin负值使用</h4><p>让每个盒子margin往左移动-1px，正好压住相邻盒子的边框</p>
<p>鼠标经过盒子提高当前盒子层级（如果没有定位，则加相对定位（保留位置）如果都有定位则用z-index)</p>
<h4 id="文字围绕浮动元素"><a href="#文字围绕浮动元素" class="headerlink" title="文字围绕浮动元素"></a>文字围绕浮动元素</h4><p>三角形制作</p>
<p><code>weight:0;</code></p>
<p><code>height:0;</code></p>
<p><code>border-color:transparent red transparent transprent;</code></p>
<p><code>border-style:solid;</code></p>
<p><code>border-width:22px 8px 0 0;(上面的宽，右边的小一些)</code></p>
<h2 id="HTML新标签"><a href="#HTML新标签" class="headerlink" title="HTML新标签"></a>HTML新标签</h2><p>header:头部标签</p>
<p>nav：导航标签</p>
<p>article:内容标签</p>
<p>section:定义文档某个区域</p>
<p>aside:侧边栏标签</p>
<p>footer：尾部标签</p>
<p>主要针对搜索引擎，这些新标签页面中可以使用多次，在IE9中，需要把这些元素转换为块级元素</p>
<h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频<video></video></h3><p>用mp4格式</p>
<video>
</video>

<p>autoplay:自动播放</p>
<p>controls:向用户使用播放控件</p>
<p>width:设置播放器宽度</p>
<p>height:设置高度</p>
<p>loop:是否循环播放</p>
<p>src：url（视频url地址）</p>
<p>poster:加载等待的画面图片</p>
<p>muted：静音播放</p>
<h3 id="新增input表单"><a href="#新增input表单" class="headerlink" title="新增input表单"></a>新增input表单</h3><p>type=”email”</p>
<p>type=”url”</p>
<p>type=”date”</p>
<p>type=”time”</p>
<p>type=”month”</p>
<p>type=”week”</p>
<p>type=”numbers”</p>
<p>type=”tel”</p>
<p>type=”search”</p>
<p>type=”color”</p>
<p>input属性</p>
<p>required=”requied”表示该内容不能为空，必填</p>
<p>placeholder=”placeholder”提示文本，表单提示信息</p>
<p>autofocus=”autofocus”自动聚焦属性，页面加载完成自动聚焦到指定表单</p>
<p>autocomplete：默认为on，当用户键入字段时基于之前键入的值显示出字段，关闭为off</p>
<p>multiple:可以多选文件提交</p>
<h3 id="新增选择器"><a href="#新增选择器" class="headerlink" title="新增选择器"></a>新增选择器</h3><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>E[att]选择具有att属性的E元素</p>
<p>E[att=”val”]选择具有att属性且属性值等于val的E元素</p>
<p>E[att^=”val”]选择具有att属性且属性值以val开头</p>
<p>E[att$=”val”]选择具有att属性且属性值中含有val的E元素</p>
<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>E:first-child:匹配父元素的第一个子元素</p>
<p>E:last-child:匹配父元素的最后一个元素</p>
<p>E:nth-child(n)匹配父元素的第n个元素</p>
<p>E:nth-child(even)匹配父元素的第偶数个元素，odd则第奇数个元素</p>
<p>E:nth-child(n)，从0开始计算，但是第0个元素或者超出元素个数会被忽略</p>
<p>nth-child(2n):偶数，2n+1:奇数 5n:5 10 15… </p>
<p>n+5:从第5个开始到最后</p>
<p>-n+5：前5个（包含第5个）</p>
<p>nth-of-type():会把指定孩子排序号，执行的时候先看E指定的元素，之后根据E回去看是第几个孩子</p>
<p>nth-child:对于父元素里面所有孩子进行排序选择，先找到第n个孩子，然后看着是否和E匹配</p>
<p>无序列表用nth-child比较多</p>
<p>类选择器，属性选择器和伪类选择器权重为10</p>
<h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>::before:在元素内部的前面插入内容</p>
<p>::after:在元素内部的后面插入内容</p>
<ul>
<li>before和after创建一个元素，属于行内元素</li>
<li>新创建的这个元素在文档树中找不到，因此称为伪元素</li>
<li>语法：element::before{},</li>
<li>before和after必须有content属性</li>
<li>伪元素和标签选择器一样，权重为1</li>
</ul>
<h5 id="伪元素选择器：清除浮动"><a href="#伪元素选择器：清除浮动" class="headerlink" title="伪元素选择器：清除浮动"></a>伪元素选择器：清除浮动</h5><p>.clearfix:after {</p>
<p>content:’’;</p>
<p>display:block;//插入的元素必须是块级</p>
<p>height:0;//不要看见这个元素</p>
<p>clear:both;</p>
<p>visibility:hidden;//不要看见这个元素</p>
<p>}</p>
<p>.clearfix:before,.clearfix:after {</p>
<p>content:’’;</p>
<p>diaplay:table;//元素在一行显示且转化为块级元素</p>
<p>}</p>
<h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p>box-sizing:content-box，盒子大小为width+padding+border(CSS3之前默认)</p>
<p>box-sizing:border-box,盒子大小为width</p>
<p>如果盒子模型我们改为了box-sizing：border-box，那padding和border就不会撑大盒子（前提padding和border不会超过width宽度）</p>
<h3 id="CSS过渡（重点）"><a href="#CSS过渡（重点）" class="headerlink" title="CSS过渡（重点）"></a>CSS过渡（重点）</h3><p>transition:要过渡的属性  花费时间   运动曲线  何时开始</p>
<p>1属性：想要变化的CSS属性，宽度高度 背景颜色内外边距都可以 如果想要所有属性都变化过度则用all</p>
<p>2花费时间：单位是秒（必需写单位</p>
<p>3运动曲线默认为ease</p>
<p>4何时开始：单位是秒 可以设置延迟触发时间 默认是0s</p>
<h1 id="CSS-filter属性"><a href="#CSS-filter属性" class="headerlink" title="CSS filter属性"></a>CSS filter属性</h1><p>修改图片的颜色为黑白</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">img&#123;filter:grayscale(100%)&#125;</span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>HTML+CSS</category>
      </categories>
  </entry>
  <entry>
    <title>DOM扩展</title>
    <url>/2021/11/25/DOM%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h1 id="Selectors-API"><a href="#Selectors-API" class="headerlink" title="Selectors API"></a>Selectors API</h1><h2 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h2><p>接收CSS选择符参数，返回匹配模式的第一个后代元素，如果没有匹配项则返回null</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> body=<span class="built_in">document</span>.querySelector(<span class="string">&quot;body&quot;</span>);</span><br><span class="line"><span class="comment">//取得id名为myDiv的元素</span></span><br><span class="line"><span class="keyword">let</span> myDiv=<span class="built_in">document</span>.querySelector(<span class="string">&quot;#myDiv&quot;</span>);</span><br><span class="line"><span class="comment">//取得类名为“selector&quot;的第一个元素</span></span><br><span class="line"><span class="keyword">let</span> selected=<span class="built_in">document</span>.querySelector(<span class="string">&quot;.selected&quot;</span>);</span><br><span class="line"><span class="comment">//取得类名为&quot;button&quot;的图片</span></span><br><span class="line"><span class="keyword">let</span> img=<span class="built_in">document</span>.querySelector(<span class="string">&quot;img.button&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h2><p>接收一个查询参数，返回所有匹配的节点，即一个NodeList的静态实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得id为&#x27;myDiv&#x27;的&lt;div&gt;元素中的所有&lt;em&gt;元素</span></span><br><span class="line"><span class="keyword">let</span> ems=<span class="built_in">document</span>.getElementByid(<span class="string">&#x27;myDiv&#x27;</span>).querySelectorAll(<span class="string">&quot;em&quot;</span>);</span><br><span class="line"><span class="comment">//取得所有类名中包含&#x27;selected&#x27;的元素</span></span><br><span class="line"><span class="keyword">let</span> selecteds=<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.selected&quot;</span>);</span><br><span class="line"><span class="comment">//取得所有是&lt;p&gt;元素子元素的&lt;strong&gt;元素</span></span><br><span class="line"><span class="keyword">let</span> strongs=<span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p strong&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> strong <span class="keyword">of</span> strongs)&#123;</span><br><span class="line">    strong.className=<span class="string">&quot;important&quot;</span>;</span><br><span class="line">    <span class="comment">//strong.item(i).className=&quot;important&quot;;</span></span><br><span class="line">    <span class="comment">//strong[i].className=&quot;important&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h2><p>接收一个参数，即包含一个或多个类名的字符串，返回类名中包含相应类的元素的NodeList</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得所有类名中包含&#x27;username&#x27;和&#x27;current&#x27;元素</span></span><br><span class="line"><span class="keyword">let</span> allCurrentUsernames=<span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;username current&quot;</span>);</span><br><span class="line"><span class="comment">//取得id为“myDiv&quot;的元素子树中所有包含&#x27;selected’类的元素</span></span><br><span class="line"><span class="keyword">let</span> selected=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).getElementsByClassName(<span class="string">&quot;selected&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这个方法返回以调用它的对象为根元素的子树中所有匹配的元素，在document上调用getElementsByClassName()返回文档中所有匹配的元素，而在特定元素中调用getElementsByClassName()返回该元素后代中匹配的元素</p>
<h2 id="classList属性"><a href="#classList属性" class="headerlink" title="classList属性"></a>classList属性</h2><ul>
<li><p>add(value)</p>
</li>
<li><p>contains(value)</p>
</li>
<li><p>remove(value)</p>
</li>
<li><p>toggle(value)：如果类名列表中已经存在指定的value，则删除，如果不存在，添加</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">div.classList.remove(<span class="string">&quot;disabled&quot;</span>);</span><br><span class="line">div.classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line"><span class="comment">//检测类名</span></span><br><span class="line"><span class="keyword">if</span>(div.classList.contains(<span class="string">&quot;bd&quot;</span>)&amp;&amp;!div.classList.contains(<span class="string">&quot;disabled&quot;</span>))&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> button=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myButton&quot;</span>);</span><br><span class="line">button.focus();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.activeElement===button);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.hasFocus());<span class="comment">//true文档已经拥有焦点</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
</search>
