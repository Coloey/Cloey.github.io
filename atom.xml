<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2023-05-30T14:30:04.118Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>npm,yarn,pnpm区别</title>
    <link href="https://coloey.github.io/2023/05/30/npm-yarn-pnpm%E5%8C%BA%E5%88%AB/"/>
    <id>https://coloey.github.io/2023/05/30/npm-yarn-pnpm%E5%8C%BA%E5%88%AB/</id>
    <published>2023-05-30T14:12:53.000Z</published>
    <updated>2023-05-30T14:30:04.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm:"></a>npm:</h1><h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a><strong>嵌套结构</strong></h2><p>我们都知道，执行 <code>npm install</code> 后，依赖包被安装到了 <code>node_modules</code> ，下面我们来具体了解下，<code>npm</code> 将依赖包安装到 <code>node_modules</code> 的具体机制是什么。</p><p>在 <code>npm</code> 的早期版本， <code>npm</code> 处理依赖的方式简单粗暴，以递归的形式，严格按照 <code>package.json</code> 结构以及子依赖包的 <code>package.json</code> 结构将依赖安装到他们各自的 <code>node_modules</code> 中。直到有子依赖包不在依赖其他模块。</p><h2 id="扁平结构"><a href="#扁平结构" class="headerlink" title="扁平结构"></a><strong>扁平结构</strong></h2><p>为了解决以上问题，<code>NPM</code> 在 <code>3.x</code> 版本做了一次较大更新。其将早期的嵌套结构改为扁平结构：</p><ul><li>安装模块时，不管其是直接依赖还是子依赖的依赖，优先将其安装在 <code>node_modules</code> 根目录。</li><li><code>npm 3.x</code> 版本并未完全解决老版本的模块冗余问题,加入你的项目没有依赖B，但是依赖了不同B版本的A@1和A@2，由于在执行npm install，按照package.json依赖的顺序依次解析，则A@1和A@2在package.json的位置决定了node_modules的依赖结构，可能先依赖A@1也可能先依赖A@2，造成了不确定性。</li></ul><h2 id="Lock文件"><a href="#Lock文件" class="headerlink" title="Lock文件"></a><strong>Lock文件</strong></h2><p>为了解决 <code>npm install</code> 的不确定性问题，在 <code>npm 5.x</code> 版本新增了 <code>package-lock.json</code> 文件，而安装方式还沿用了 <code>npm 3.x</code> 的扁平化的方式。</p><p><code>package-lock.json</code> 的作用是锁定依赖结构，即只要你目录下有 <code>package-lock.json</code> 文件，那么你每次执行 <code>npm install</code> 后生成的 <code>node_modules</code> 目录结构一定是完全相同的。</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a><strong>整体流程</strong></h2><p>好了，我们再来整体总结下上面的流程：</p><ul><li><p>检查 <code>.npmrc</code> 文件：优先级为：项目级的 <code>.npmrc</code> 文件 &gt; 用户级的 <code>.npmrc</code> 文件&gt; 全局级的 <code>.npmrc</code> 文件 &gt; npm 内置的 <code>.npmrc</code> 文件</p></li><li><p>检查项目中有无 <code>lock</code> 文件。</p></li><li><p>无 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lock</span><br></pre></td></tr></table></figure><p> 文件：</p><ul><li><p>从 <code>npm</code> 远程仓库获取包信息</p></li><li><p>根据 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br></pre></td></tr></table></figure><p> 构建依赖树，构建过程：</p><ul><li>构建依赖树时，不管其是直接依赖还是子依赖的依赖，优先将其放置在 <code>node_modules</code> 根目录。</li><li>当遇到相同模块时，判断已放置在依赖树的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的 <code>node_modules</code> 下放置该模块。</li><li>注意这一步只是确定逻辑上的依赖树，并非真正的安装，后面会根据这个依赖结构去下载或拿到缓存中的依赖包</li></ul></li><li><p>在缓存中依次查找依赖树中的每个包     </p><ul><li>不存在缓存：<ul><li>从 <code>npm</code> 远程仓库下载包</li><li>校验包的完整性</li><li>校验不通过：<ul><li>重新下载 </li></ul></li><li>校验通过：<ul><li>将下载的包复制到 <code>npm</code> 缓存目录</li><li>将下载的包按照依赖结构解压到 <code>node_modules</code></li></ul></li></ul></li></ul><p>存在缓存：将缓存按照依赖结构解压到 <code>node_modules</code></p></li><li><p>将包解压到 <code>node_modules</code></p></li><li><p>生成 <code>lock</code> 文件</p></li></ul></li></ul><h1 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h1><h2 id="pnpm好处："><a href="#pnpm好处：" class="headerlink" title="pnpm好处："></a>pnpm好处：</h2><ul><li><p>安装速度快（非扁平的包结构，没有复杂的扁平算法，只更新变化的文件）</p></li><li><p>节省磁盘空间，统一安装到磁盘的某个位置，项目中的node_modules通过hard-link的方式链接到实际安装地址</p></li><li><p>pnpm 与 npm/yarn 另外一个很大的不同就是支持了 monorepo，体现在各个子命令的功能上，比如在根目录下 <code>pnpm add A -r</code>, 那么所有的 package 中都会被添加 A 这个依赖，当然也支持 <code>--filter</code>字段来对 package 进行过滤。</p></li></ul><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>比如安装bar包，根目录只包含安装的包bar,而node_modules目录下的bar包会软链接到.pnpm/bar/node_modules/bar@…,被bar依赖的包会被提升到.pnpm的根目录，其他依赖该包的也会软链接到这里，而bar,foo包硬链接到.pnpm store；总之，<strong>软链接解决了磁盘占用的问题，而硬链接解决了包的同步更新和统一管理问题。</strong></p><p>嵌套结构的问题在于：</p><ul><li><strong>包文件的目录可能会非常长</strong></li><li><strong>重复安装包</strong></li><li><strong>相同包的实例不能共享</strong></li></ul><p>而扁平结构也同样存在问题：</p><ul><li><strong>依赖结构的不确定性</strong>（不同包依赖某个包的不同版本 最终安装的版本具有不确定性）可通过lock文件确定安装版本</li><li><strong>扁平化算法复杂，耗时</strong></li><li><strong>非法访问未声明的包</strong></li></ul><h2 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo:"></a>monorepo:</h2><p>多个项目或者包文件放到一个git仓库管理，解决代码复用问题，开发流程统一，高效管理多项目/包</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm&quot;&gt;&lt;a href=&quot;#npm&quot; class=&quot;headerlink&quot; title=&quot;npm:&quot;&gt;&lt;/a&gt;npm:&lt;/h1&gt;&lt;h2 id=&quot;嵌套结构&quot;&gt;&lt;a href=&quot;#嵌套结构&quot; class=&quot;headerlink&quot; title=&quot;嵌套结构&quot;&gt;&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>回流重绘之性能优化</title>
    <link href="https://coloey.github.io/2023/04/08/%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>https://coloey.github.io/2023/04/08/%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2023-04-08T09:18:29.000Z</published>
    <updated>2023-09-25T02:36:16.029Z</updated>
    
    <content type="html"><![CDATA[<p>实习的时候遇到一个写一个tag-input的需求，也就是在input输入后里面每次回车都生成一个标签，在每次改变input的padding的时候都涉及到回流重绘的问题，为了优化性能，减少回流重绘的次数，又复习了一遍回流重绘。</p><p>回流这一阶段主要是计算节点的位置和几何信息，那么当页面布局和几何信息发生变化的时候，就需要回流。比如以下情况：</p><ul><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的尺寸发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代。</li><li>页面一开始渲染的时候（这肯定避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ul><h2 id="浏览器的优化机制"><a href="#浏览器的优化机制" class="headerlink" title="浏览器的优化机制"></a>浏览器的优化机制</h2><p>由于每次重排都会造成额外的计算消耗，因此大多数浏览器都会通过队列化修改并批量执行来优化重排过程。浏览器会将修改操作放入到队列里，直到过了一段时间或者操作达到了一个阈值，才清空队列。但是！<strong>当你获取布局信息的操作的时候，会强制队列刷新</strong>，比如当你访问以下属性或者使用以下方法：</p><ul><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>getComputedStyle()</li><li>getBoundingClientRect</li></ul><p>因此浏览器不得不清空队列，触发回流重绘来返回正确的值，造成强制同步布局</p><h2 id="减少回流和重绘"><a href="#减少回流和重绘" class="headerlink" title="减少回流和重绘"></a>减少回流和重绘</h2><h3 id="最小化重绘和重排"><a href="#最小化重绘和重排" class="headerlink" title="最小化重绘和重排"></a>最小化重绘和重排</h3><p>由于重绘和重排可能代价比较昂贵，因此最好就是可以减少它的发生次数。为了减少发生次数，我们可以合并多次对DOM和样式的修改，然后一次处理掉。</p><p>使用cssText：</p><p>比如我的tag-input组件,优化前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">delTag</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.tags.splice(index,<span class="number">1</span>)</span><br><span class="line">             <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag:last-child&#x27;</span>)</span><br><span class="line">                <span class="keyword">let</span> top = el.offsetTop - el.clientHeight</span><br><span class="line">                <span class="keyword">let</span> left = el.offsetLeft + el.clientWidth</span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-textarea__inner&#x27;</span>).style.paddingLeft = left + <span class="number">10</span> +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-textarea__inner&#x27;</span>).style.paddingTop = top + <span class="number">10</span>  +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-textarea__inner&#x27;</span>).style.height = el.offsetTop + <span class="number">40</span> +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">addTag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.inputData) <span class="keyword">return</span> ;</span><br><span class="line">            <span class="built_in">this</span>.tags.push(<span class="built_in">this</span>.inputData)</span><br><span class="line">            <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag:last-child&#x27;</span>)</span><br><span class="line">                <span class="keyword">let</span> top = el.offsetTop - el.clientHeight</span><br><span class="line">                <span class="keyword">let</span> left = el.offsetLeft + el.clientWidth</span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-textarea__inner&#x27;</span>).style.paddingLeft = left + <span class="number">10</span> +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-textarea__inner&#x27;</span>).style.paddingTop = top + <span class="number">10</span>  +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">                <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-textarea__inner&#x27;</span>).style.height = el.offsetTop + <span class="number">40</span> +<span class="string">&#x27;px&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">this</span>.inputData = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">delTag</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.tags.splice(index,<span class="number">1</span>)</span><br><span class="line">             <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">              <span class="comment">// tag-box布局为absolute 重排开销较小 不用考虑对其他元素的影响</span></span><br><span class="line">                <span class="keyword">let</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag:last-child&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span>(el) &#123;</span><br><span class="line">                  <span class="comment">// 缓存布局信息，读写分离，一次回流+重绘</span></span><br><span class="line">                  <span class="keyword">let</span> top = el.offsetTop;</span><br><span class="line">                  <span class="keyword">let</span> left = el.offsetLeft + el.clientWidth</span><br><span class="line">                   <span class="comment">// 放入浏览器队列中执行</span></span><br><span class="line">                   <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-input__inner&#x27;</span>).style.cssText = </span><br><span class="line">                   <span class="string">`padding-left:<span class="subst">$&#123;left + <span class="number">10</span>&#125;</span>px;padding-top:<span class="subst">$&#123;top - <span class="number">5</span>&#125;</span>px;height:<span class="subst">$&#123;top+<span class="number">30</span>&#125;</span>px`</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-input__inner&#x27;</span>).style.cssText = </span><br><span class="line">                  <span class="string">`padding-left:5px;padding-top:5px;`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">addTag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">this</span>.inputData) <span class="keyword">return</span> ;</span><br><span class="line">            <span class="built_in">this</span>.tags.push(<span class="built_in">this</span>.inputData)</span><br><span class="line">            <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> el = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag:last-child&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span>(el) &#123;</span><br><span class="line">                  <span class="keyword">let</span> top = el.offsetTop</span><br><span class="line">                  <span class="keyword">let</span> left = el.offsetLeft + el.clientWidth</span><br><span class="line">                   <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.yh-tag-input  .el-input__inner&#x27;</span>).style.cssText= </span><br><span class="line">                   <span class="string">`padding-left:<span class="subst">$&#123;left + <span class="number">10</span>&#125;</span>px;padding-top:<span class="subst">$&#123;top - <span class="number">5</span>&#125;</span>px;height:<span class="subst">$&#123;top+<span class="number">30</span>&#125;</span>px`</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">this</span>.inputData = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">focus</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.$refs.input.focus();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>或者改为使用class</p><p><strong>更进一步优化</strong></p><p>input-tag组件就是输入后失去焦点或者按下回车形成标签，并且光标始终跟随在最后，要可以自动换行，起初的做法是input后形成的标签用el-tag显示，并且el-tag是子组件，定位为绝对位置，父盒子相对位置，卡在了获取每次点击无法去自动获取光标,起初通过document.querySelector拿到最后一个标签元素，设置input的padding-left为最后一个el-tag的el.offsetLeft+el.clientWidth,padding-top为el.offsetTop,但是这样每次去读取的时候会最少造成一次回流，感觉交互体验一般，因此，解决办法就是将input放到和el-tag同级上面，并且设置外面的盒子为display:flex,flex-wrap:warp，这样input会跟着el-tag走，光标自动锁定。</p><h3 id="批量修改DOM，读写dom分离"><a href="#批量修改DOM，读写dom分离" class="headerlink" title="批量修改DOM，读写dom分离"></a>批量修改DOM，读写dom分离</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">        paragraphs[i].style.width = box.offsetWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码每次循环都读取box的offsetWidth属性值，再写style.width，每次循环都会强制浏览器刷新对列，可以将width缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> width = box.offsetWidth;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initP</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">        paragraphs[i].style.width = width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css3硬件加速（GPU加速）"><a href="#css3硬件加速（GPU加速）" class="headerlink" title="css3硬件加速（GPU加速）"></a>css3硬件加速（GPU加速）</h3><p><strong>1. 使用css3硬件加速，可以让transform、opacity、filters这些动画不会引起回流重绘 。</strong></p><p><strong>2. 对于动画的其它属性，比如background-color这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。</strong></p><p>因为使用css动画在合成线程上执行，如果采用GPU进行栅格化，合成效率会更高</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实习的时候遇到一个写一个tag-input的需求，也就是在input输入后里面每次回车都生成一个标签，在每次改变input的padding的时候都涉及到回流重绘的问题，为了优化性能，减少回流重绘的次数，又复习了一遍回流重绘。&lt;/p&gt;
&lt;p&gt;回流这一阶段主要是计算节点的位置和</summary>
      
    
    
    
    <category term="项目总结" scheme="https://coloey.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>babel和tsc编译typeScript区别</title>
    <link href="https://coloey.github.io/2023/04/05/babel%E5%92%8Ctsc%E7%BC%96%E8%AF%91typeScript%E5%8C%BA%E5%88%AB/"/>
    <id>https://coloey.github.io/2023/04/05/babel%E5%92%8Ctsc%E7%BC%96%E8%AF%91typeScript%E5%8C%BA%E5%88%AB/</id>
    <published>2023-04-05T13:47:04.000Z</published>
    <updated>2023-04-06T14:50:20.211Z</updated>
    
    
    
    
    <category term="项目总结" scheme="https://coloey.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>mini-webpack</title>
    <link href="https://coloey.github.io/2023/04/02/mini-webpack/"/>
    <id>https://coloey.github.io/2023/04/02/mini-webpack/</id>
    <published>2023-04-02T15:02:49.000Z</published>
    <updated>2023-04-12T15:56:12.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-打包流程："><a href="#webpack-打包流程：" class="headerlink" title="webpack 打包流程："></a>webpack 打包流程：</h2><p>1.读取入口文件内容</p><p>2.分析入口文件，递归读取模块所依赖的文件内容，生成 AST 语法树</p><p>3.根据 AST 语法树，生成浏览器能够运行的代码 具体细节： 先配置好 webpack.config.js 文件，创建 add.js 和 minus.js 在 index.js 中引入： </p><p>add.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (a, b) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>minus.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> minus = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>index.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&quot;./add.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; minus &#125; <span class="keyword">from</span> <span class="string">&quot;./minus.js&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> sum = add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> division = minus(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="built_in">console</span>.log(division);</span><br></pre></td></tr></table></figure><p>index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>核心类是 WebpackCompiler.js,在构造函数中先获取 entryPath,初始化钩子，plugins 可以设置在不同的编译阶段，先给 webpack 定义五个生命周期，并在 run 方法适当的时机嵌入，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebpackCompiler</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">    <span class="built_in">this</span>.depsGraph = &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.root = process.cwd(); <span class="comment">//当前项目地址</span></span><br><span class="line">    <span class="built_in">this</span>.entryPath = <span class="built_in">this</span>.config.entry;</span><br><span class="line">    <span class="comment">//插件在这些生命周期中被调用</span></span><br><span class="line">    <span class="built_in">this</span>.hooks = &#123;</span><br><span class="line">      <span class="attr">run</span>: <span class="keyword">new</span> tapable.SyncHook(),</span><br><span class="line">      <span class="attr">beforeCompile</span>: <span class="keyword">new</span> tapable.SyncHook(),</span><br><span class="line">      <span class="attr">afterCompile</span>: <span class="keyword">new</span> tapable.SyncHook(),</span><br><span class="line">      <span class="attr">afterPlugins</span>: <span class="keyword">new</span> tapable.SyncHook(),</span><br><span class="line">      <span class="attr">afterEmit</span>: <span class="keyword">new</span> tapable.SyncWaterfallHook([<span class="string">&quot;hash&quot;</span>]),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> plugins = <span class="built_in">this</span>.config.plugins;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(plugins)) &#123;</span><br><span class="line">      plugins.forEach(<span class="function">(<span class="params">plugin</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//每个均是实例，调用实例上的一个方法即可，传入当前Compiler实例</span></span><br><span class="line">        <span class="comment">//plugin.run(this);</span></span><br><span class="line">        plugin.apply.call(plugin, <span class="built_in">this</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//编译开始</span></span><br><span class="line">    <span class="built_in">this</span>.hooks.run.call(); <span class="comment">//启动项目</span></span><br><span class="line">    <span class="built_in">this</span>.hooks.beforeCompile.call(); <span class="comment">//编译前运行</span></span><br><span class="line">    <span class="built_in">this</span>.buildModule(<span class="built_in">this</span>.entryPath);</span><br><span class="line">    <span class="built_in">this</span>.hooks.afterCompile.call(); <span class="comment">//编译后运行</span></span><br><span class="line">    <span class="built_in">this</span>.outputFile();</span><br><span class="line">    <span class="built_in">this</span>.hooks.afterPlugins.call(); <span class="comment">//执行完plugins后运行</span></span><br><span class="line">    <span class="built_in">this</span>.hooks.afterEmit.call(); <span class="comment">//结束后运行</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="关于-tapable"><a href="#关于-tapable" class="headerlink" title="关于 tapable"></a>关于 tapable</h4><p>可以参考这篇文章：<a href="https://juejin.cn/post/6955421936373465118">https://juejin.cn/post/6955421936373465118</a> webpack 插件是一种基于 Tapable 的钩子类型，它在特定时机触发钩子时会带上足够的上下文信息，插件定义的钩子回调中，与这些上下文背后的数据结构，接口产生 sideEeffect,进而影响到编译状态和后续流程 自定义一个插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">compiler</span>)</span> &#123;</span><br><span class="line">    compiler.hooks.run.tap(<span class="string">&quot;myPlugin&quot;</span>, <span class="function">(<span class="params">compilation</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;my plugin&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = MyPlugin;</span><br></pre></td></tr></table></figure><p>compiler.hooks.run.tap,其中 run 为 tapable 仓库提供的钩子对象，为订阅函数，tap 用于注册回调,关于 tapable 钩子： SyncHook:同步执行，无需返回值 SyncBailHook:同步执行，无需返回值，返回 undefined 终止 SyncWaterfallHook,同步执行，上一个处理函数的返回值时下一个的输入，返回 undefined 终止 SyncLoopHook:同步执行，订阅的处理函数有一个的返回值不是 undefined 就一直循环它 异步钩子： AsyncSeriesHook:异步执行，无需返回值 AsyncParallelHook:异步并行钩子 AsyncSeriesBailHook:异步执行，无需返回值，返回 undefined 终止 …</p><h4 id="获取模块内容"><a href="#获取模块内容" class="headerlink" title="获取模块内容"></a>获取模块内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取源码，经过loader转换生成代码</span></span><br><span class="line">  <span class="function"><span class="title">getSourceByPath</span>(<span class="params">modulePath</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//console.log(&quot;path&quot;, modulePath);</span></span><br><span class="line">    <span class="keyword">let</span> content = fs.readFileSync(modulePath, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="comment">//拿module中的匹配规则与路径进行匹配</span></span><br><span class="line">    <span class="keyword">const</span> rules = <span class="built_in">this</span>.config.module.rules;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rules.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; test, use &#125; = rules[i];</span><br><span class="line">      <span class="keyword">let</span> len = use.length;</span><br><span class="line">      <span class="comment">//匹配到了开始走loader,从后往前</span></span><br><span class="line">      <span class="keyword">if</span> (test.test(modulePath)) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">changeLoader</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">//先拿最后一个loader</span></span><br><span class="line">          <span class="keyword">let</span> loader = <span class="built_in">require</span>(use[--len]);</span><br><span class="line">          content = loader(content);</span><br><span class="line">          <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            changeLoader();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        changeLoader();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="分析模块和收集依赖"><a href="#分析模块和收集依赖" class="headerlink" title="分析模块和收集依赖"></a>分析模块和收集依赖</h4><p>根据模块被 loader 编译后的内容和路径解析生成 ast 树，这里用@babel/paser 引入模块内容，用到一个选项 sourceType,设置为 module,表示我们要解析的是 ES 模块</p><p>遍历 ast 收集依赖，就是用 import 语句引入的文件路径收集起来，将收集起来的路径转换为绝对路径放到 deps 里，遍历 AST 用@babel/traverse 依赖包，第一个参数是 AST，第二个参数是配置对象，最后 ES6 转为 ES5 用@babel/core 和@babel/preset-env</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据路径解析源码,file是入口路径</span></span><br><span class="line">  <span class="function"><span class="title">parse</span>(<span class="params">source, file</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ast = parser.parse(source, &#123;</span><br><span class="line">      <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">//解析的是ES5模块</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//console.log(ast);</span></span><br><span class="line">    <span class="comment">//收集依赖</span></span><br><span class="line">    <span class="keyword">let</span> dependencies = &#123;&#125;;</span><br><span class="line">    traverse(ast, &#123;</span><br><span class="line">      <span class="comment">//获取通过Import引入的模块</span></span><br><span class="line">      <span class="comment">//对ast解析遍历语法树，负责替换，删除和添加节点</span></span><br><span class="line">      <span class="function"><span class="title">ImportDeclaration</span>(<span class="params">&#123; node &#125;</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> dirname = path.dirname(file);</span><br><span class="line">        <span class="keyword">const</span> abspath = <span class="string">&quot;./&quot;</span> + path.join(dirname, node.source.value);</span><br><span class="line">        dependencies[node.source.value] = abspath; <span class="comment">//基于import获取文件需要的依赖</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//console.log(dependencies);</span></span><br><span class="line">    <span class="comment">//es6转es5</span></span><br><span class="line">    <span class="keyword">const</span> &#123; code &#125; = babel.transformFromAst(ast, <span class="literal">null</span>, &#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//console.log(code);</span></span><br><span class="line">    <span class="keyword">const</span> moduleInfo = &#123; file, code, dependencies &#125;;</span><br><span class="line">    <span class="keyword">return</span> moduleInfo;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h4><p>1.先传入主模块路径和内容，获得模块信息放到 temp 数组</p><p>2.循环里面获得主模块的依赖 deps</p><p>3.遍历主模块的依赖 deps，调用 parse 获得依赖模块信息，继续放到 temps 数组中 实际就是将层层依赖进行收集打平</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">buildModule</span>(<span class="params">modulePath</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> source = <span class="built_in">this</span>.getSourceByPath(modulePath); <span class="comment">//根据路径拿到源码</span></span><br><span class="line">    <span class="keyword">const</span> entry = <span class="built_in">this</span>.parse(source, modulePath);</span><br><span class="line">    <span class="comment">//console.log(entry);</span></span><br><span class="line">    <span class="keyword">const</span> temp = [entry];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> deps = temp[i].dependencies;</span><br><span class="line">      <span class="keyword">if</span> (deps) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> deps) &#123;</span><br><span class="line">          <span class="keyword">if</span> (deps.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">let</span> content = <span class="built_in">this</span>.getSourceByPath(deps[key]);</span><br><span class="line">            temp.push(<span class="built_in">this</span>.parse(content, deps[key]));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.forEach(<span class="function">(<span class="params">moduleInfo</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.depsGraph[moduleInfo.file] = &#123;</span><br><span class="line">        <span class="attr">deps</span>: moduleInfo.dependencies,</span><br><span class="line">        <span class="attr">code</span>: moduleInfo.code,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">this</span>.depsGraph = <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.depsGraph);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>此时生成的 depsGraph:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  file: &#x27;./src/index.js&#x27;,</span><br><span class="line">  code: &#x27;<span class="string">&quot;use strict&quot;</span>;\n&#x27; +</span><br><span class="line">    &#x27;\n&#x27; +</span><br><span class="line">    &#x27;var _add = _interopRequireDefault(require(<span class="string">&quot;./add.js&quot;</span>));\n&#x27; +</span><br><span class="line">    &#x27;var _minus = require(<span class="string">&quot;./minus.js&quot;</span>);\n&#x27; +</span><br><span class="line">    &#x27;function _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">&quot;default&quot;</span>: obj &#125;; &#125;\n&#x27; +</span><br><span class="line">    &#x27;var sum = (<span class="number">0</span>, _add[<span class="attr">&quot;default&quot;</span>])(1, 2);\n&#x27; +</span><br><span class="line">    &#x27;var division = (0, _minus.minus)(2, 1);\n&#x27; +</span><br><span class="line">    &#x27;console.log(sum);\n&#x27; +</span><br><span class="line">    &#x27;console.log(division);&#x27;,</span><br><span class="line">  dependencies: &#123; &#x27;./add.js&#x27;: &#x27;./src\\add.js&#x27;, &#x27;./minus.js&#x27;: &#x27;./src\\minus.js&#x27; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决浏览器无法识别部分es5代码"><a href="#解决浏览器无法识别部分es5代码" class="headerlink" title="解决浏览器无法识别部分es5代码"></a>解决浏览器无法识别部分es5代码</h4><p>但是还不能执行 code 中 index.js 这段代码<strong>，因为浏览器不会识别 require 和 exports,因为没有定义这些 require 和 exports 对象，因此要自己定义require函数，由于打包后的代码require的是相对路径，因此之前保存在graph里的dependency派上用场，里面对应的就是哥哥相对路径结点对应的绝对路径，所以执行absReuire去递归调用require,拿到的就是绝对路径，并且这个absRequire作为参数传给立即执行函数，立即执行函数执行eval代码，会去读取定义的absrequire和exports，实际就是闭包</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">bundler</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">     (function (graph) &#123;</span></span><br><span class="line"><span class="string">      function require(file) &#123;</span></span><br><span class="line"><span class="string">        function absRequire(relPath) &#123;</span></span><br><span class="line"><span class="string">          return require(graph[file].deps[relPath]);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        var exports = &#123;&#125;;</span></span><br><span class="line"><span class="string">        (function (require, exports, code) &#123;</span></span><br><span class="line"><span class="string">          eval(code);</span></span><br><span class="line"><span class="string">        &#125;)(absRequire, exports, graph[file]?.code);</span></span><br><span class="line"><span class="string">        return exports;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      require(&#x27;<span class="subst">$&#123;file&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">    &#125;)(<span class="subst">$&#123;<span class="built_in">this</span>.depsGraph&#125;</span>);`</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实际上执行 require(‘./src/index.js’)后，执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, code</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">eval</span>(code);</span><br><span class="line">&#125;)(absRequire, graph[file].code);</span><br></pre></td></tr></table></figure><p>执行 eval,也就执行 打包后的代码，但是又会调用 require 函数，也就是我们传递的 absRequire,而执行 absRequire 就执行 return require(graph[file].deps[relPath]),前面已经将import的文件路径转为绝对路径将执行外面这个 require,继续周而复始执行立即执行函数，调用 require,路径已经转化为绝对路径，成功执行相应的 eval(code) 但是在执行 add.js 的 code，会遇到 exports 还没定义的问题，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>[<span class="string">&quot;default&quot;</span>] = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> _default = <span class="function"><span class="keyword">function</span> <span class="title">_default</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>[<span class="string">&quot;default&quot;</span>] = _default;</span><br></pre></td></tr></table></figure><p>定义一个 exports 使用，执行 add.js 代码时会在这个空对象上增加属性并返回 outPutFile():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输出文件</span></span><br><span class="line">  <span class="function"><span class="title">outputFile</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = <span class="built_in">this</span>.bundler(<span class="built_in">this</span>.entryPath);</span><br><span class="line">    <span class="comment">//拿到输出地址</span></span><br><span class="line">    <span class="keyword">let</span> outPath = path.join(</span><br><span class="line">      <span class="built_in">this</span>.config.output.path,</span><br><span class="line">      <span class="built_in">this</span>.config.output.filename</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">console</span>.log(code);</span><br><span class="line">    fs.writeFileSync(outPath, code); <span class="comment">//写入</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="解决重复import"><a href="#解决重复import" class="headerlink" title="解决重复import"></a>解决重复import</h4><p>在webpack的源码中，重复import不会被重复打包是通过<strong>模块的缓存机制</strong>实现的。当模块被导入时，webpack会将模块的路径作为键，模块的内容作为值存储在一个缓存对象中。如果下次再次导入该模块时，webpack会先检查缓存对象中是否已经存在该模块的缓存，如果有就直接使用缓存中的模块内容，避免重复打包。</p><p>具体来说，当webpack遇到重复import时，会先解析对应的模块路径，然后从缓存对象中查找是否已经有该模块的缓存。如果有，就直接使用缓存中的模块内容，否则就重新构建该模块，然后将该模块的路径和内容加入缓存对象中。</p><p>此外，webpack还提供了一些优化选项，如splitChunks和DllPlugin，可以进一步提高打包性能和效率，避免重复打包。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack-打包流程：&quot;&gt;&lt;a href=&quot;#webpack-打包流程：&quot; class=&quot;headerlink&quot; title=&quot;webpack 打包流程：&quot;&gt;&lt;/a&gt;webpack 打包流程：&lt;/h2&gt;&lt;p&gt;1.读取入口文件内容&lt;/p&gt;
&lt;p&gt;2.分析入口文件</summary>
      
    
    
    
    <category term="项目总结" scheme="https://coloey.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Transition组件原理</title>
    <link href="https://coloey.github.io/2023/01/07/Transition%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2023/01/07/Transition%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%90%86/</id>
    <published>2023-01-07T09:14:36.000Z</published>
    <updated>2023-01-07T13:31:33.354Z</updated>
    
    <content type="html"><![CDATA[<p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Transition&gt;</span><br><span class="line">        &lt;div&gt;我是需要过渡的元素&lt;/div&gt;</span><br><span class="line">    &lt;/Transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>可以将模板编译为虚拟DOM：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">type</span>:Transition,</span><br><span class="line">        <span class="attr">children</span>:&#123;</span><br><span class="line">            <span class="function"><span class="title">default</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="string">&quot;div&quot;</span>,<span class="attr">children</span>:<span class="string">&quot;我是需要过渡的元素&quot;</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transition组件的子节点被编译为默认插槽</p><ol><li><p>Transition组件本身不会渲染任何额外的内容，它只是通过默认插槽读取过渡元素，并渲染需要过渡的元素</p></li><li><p>Transition组件的作用，就是在过渡元素的虚拟结点上添加transition相关的钩子函数</p></li></ol><p>渲染器在渲染需要过渡的虚拟结点时，<strong>会在合适时机调用附加在该虚拟节点上得到过渡相关的生命周期相关的钩子函数。</strong></p><p><strong>渲染器在渲染需要过渡的虚拟结点时，会在合适的时机调用附加到该虚拟节点上的过渡相关的生命周期钩子函数，</strong>体现在mountElement和unmount函数中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountElement</span>(<span class="params">vnode, container, anchor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> el = (vnode.el = createElement(vnode.type));</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.children === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    setElementText(el, vnode.children);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode.children)) &#123;</span><br><span class="line">    vnode.children.forEach(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">      PaymentMethodChangeEvent(<span class="literal">null</span>, child, el);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vnode.props) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">      patchProps(el, key, <span class="literal">null</span>, vnode.props[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//判断一个VNode是否需要过渡</span></span><br><span class="line">  <span class="keyword">const</span> needTransition = vnode.transition;</span><br><span class="line">  <span class="keyword">if</span> (needTransition) &#123;</span><br><span class="line">    <span class="comment">//调用transition.beforeEnter钩子，将DOM元素作为参数传递</span></span><br><span class="line">    vnode.transition.beforeEnter(el);</span><br><span class="line">  &#125;</span><br><span class="line">  insert(el, container, anchor);</span><br><span class="line">  <span class="keyword">if</span> (needTransition) &#123;</span><br><span class="line">    vnode.transition.enter(el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unmount.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卸载元素时应该调用transition.leave钩子函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//判断VNode是否过渡处理</span></span><br><span class="line">  <span class="keyword">const</span> needTransition = vnode.transition;</span><br><span class="line">  <span class="keyword">if</span> (vnode.type === Fragment) &#123;</span><br><span class="line">    vnode.children.forEach(<span class="function">(<span class="params">c</span>) =&gt;</span> unmount(c));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.type === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (vnode.shouldKeepAlive) &#123;</span><br><span class="line">      vnode.keepAliveInstance._deActive(vnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      unmount(vnode.component.subTree);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> parent = vnode.el.parentNode;</span><br><span class="line">  <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">    <span class="comment">//将卸载动作封装到performRemov函数中</span></span><br><span class="line">    <span class="keyword">const</span> performRemove = <span class="function">() =&gt;</span> parent.removeChild(vnode.el);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (needTransition) &#123;</span><br><span class="line">    <span class="comment">//如果需要过渡处理，调用transition.leave钩子</span></span><br><span class="line">    <span class="comment">//同时将DOM元素和performRemove函数作为参数传递</span></span><br><span class="line">    vnode.transition.leave(vnode.el, performance);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果不需要过渡处理，则直接执行卸载操作</span></span><br><span class="line">    performance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transition组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Transition = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Transition&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; slots &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//通过默认插槽获取需要过渡的元素</span></span><br><span class="line">      <span class="keyword">const</span> innerVNode = slots.default();</span><br><span class="line">      <span class="comment">//在过渡元素的VNode对象上添加transition相应的钩子函数</span></span><br><span class="line">      innerVNode.transition = &#123;</span><br><span class="line">        <span class="function"><span class="title">beforeEnter</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">          <span class="comment">//设置初始状态，添加enter-from和enter-active类</span></span><br><span class="line">          el.classList.add(<span class="string">&quot;enter-from&quot;</span>);</span><br><span class="line">          el.classList.add(<span class="string">&quot;enter-active&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">enter</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">          <span class="comment">//下一帧切换到结束状态</span></span><br><span class="line">          nextFrame(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//移除enter-from类，添加enter-to类</span></span><br><span class="line">            el.classList.remove(<span class="string">&quot;enter-from&quot;</span>);</span><br><span class="line">            el.classList.add(<span class="string">&quot;enter-to&quot;</span>);</span><br><span class="line">            <span class="comment">//监听transitioned事件完成收尾工作</span></span><br><span class="line">            el.addEventListener(<span class="string">&quot;transitioned&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              el.classList.remove(<span class="string">&quot;enter-to&quot;</span>);</span><br><span class="line">              el.classList.remove(<span class="string">&quot;enter-active&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">leave</span>(<span class="params">el, performRemove</span>)</span> &#123;</span><br><span class="line">          <span class="comment">//设置离场过渡的初始状态，添加leave-from和leave--active类</span></span><br><span class="line">          el.classList.add(<span class="string">&quot;leave-from&quot;</span>);</span><br><span class="line">          el.classList.add(<span class="string">&quot;leave-active&quot;</span>);</span><br><span class="line">          <span class="comment">//强制refolw使得初始状态生效</span></span><br><span class="line">          <span class="built_in">document</span>.body.offsetHeight;</span><br><span class="line">          <span class="comment">//在下一帧修改状态 ?</span></span><br><span class="line">          nextFrame(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            el.classList.remove(<span class="string">&quot;leave-from&quot;</span>);</span><br><span class="line">            el.classList.add(<span class="string">&quot;leave-to&quot;</span>);</span><br><span class="line">            el.addEventListener(<span class="string">&quot;transitioned&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              el.classList.remove(<span class="string">&quot;leave-to&quot;</span>);</span><br><span class="line">              el.classList.remove(<span class="string">&quot;leave-active&quot;</span>);</span><br><span class="line">              <span class="comment">//调用transition.leave钩子函数的第二个参数，完成DOM元素的卸载</span></span><br><span class="line">              performRemove();</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> innerVNode;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>ts类型体操1</title>
    <link href="https://coloey.github.io/2023/01/01/ts%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D1/"/>
    <id>https://coloey.github.io/2023/01/01/ts%E7%B1%BB%E5%9E%8B%E4%BD%93%E6%93%8D1/</id>
    <published>2023-01-01T08:15:08.000Z</published>
    <updated>2023-01-01T14:53:58.065Z</updated>
    
    <content type="html"><![CDATA[<p>对应任何类型T,keyof T的结果为该类型上索引公有属性key的联合</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Eg1 &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="keyword">readonly</span> age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> T1=keyof Eg1<span class="comment">//name|age</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Eg2</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> name: <span class="built_in">string</span>,</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> age:<span class="built_in">number</span>,</span><br><span class="line">    <span class="keyword">protected</span> home:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//T2被约束为age,非公有属性不能被keyof获取</span></span><br><span class="line"><span class="keyword">type</span> T2=keyof Eg2</span><br></pre></td></tr></table></figure><h2 id="T-k-索引查询："><a href="#T-k-索引查询：" class="headerlink" title="T[k]索引查询："></a>T[k]索引查询：</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Eg1 &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="keyword">readonly</span> age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> V1=Eg1[<span class="string">&#x27;name&#x27;</span>]<span class="comment">//string</span></span><br><span class="line"><span class="keyword">type</span> V2=Eg1[<span class="string">&#x27;name&#x27;</span>|<span class="string">&#x27;age&#x27;</span>]<span class="comment">//string | number</span></span><br><span class="line"><span class="keyword">type</span> V3=Eg1[<span class="string">&#x27;name&#x27;</span>|<span class="string">&#x27;age222&#x27;</span>]<span class="comment">//any</span></span><br><span class="line"><span class="keyword">type</span> V4=Eg1[keyof Eg1]<span class="comment">//strign | number</span></span><br></pre></td></tr></table></figure><p>[]中的key有不存在于T中的，则是any</p><h2 id="第一个元素类型："><a href="#第一个元素类型：" class="headerlink" title="第一个元素类型："></a>第一个元素类型：</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> First&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer F,...infer R] ? F : nerver</span><br></pre></td></tr></table></figure><h2 id="获取元组长度"><a href="#获取元组长度" class="headerlink" title="获取元组长度"></a>获取元组长度</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Length&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = T&lt;<span class="string">&#x27;length&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="元组转数组"><a href="#元组转数组" class="headerlink" title="元组转数组"></a>元组转数组</h2><p>注意加上readonly,因为as const 会生成如下类型：const tuple: readonly[‘tesla’,’model 3’,’model X’,’model Y’]</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tuple = [<span class="string">&#x27;tesla&#x27;</span>,<span class="string">&#x27;model 3&#x27;</span>,<span class="string">&#x27;model X&#x27;</span>,<span class="string">&#x27;model Y&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"><span class="keyword">const</span> res: TupleToObject&lt;<span class="keyword">typeof</span> tuple&gt;</span><br><span class="line"><span class="comment">// expected &#123; tesla: &#x27;tesla&#x27;, &#x27;model 3&#x27;: &#x27;model 3&#x27;, &#x27;model X&#x27;: &#x27;model X&#x27;, &#x27;model Y&#x27;: &#x27;model Y&#x27;&#125;</span></span><br><span class="line"><span class="keyword">type</span> TupleToObject&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> T[<span class="built_in">number</span>]]: K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Ts内置类型工具原理分析："><a href="#Ts内置类型工具原理分析：" class="headerlink" title="Ts内置类型工具原理分析："></a>Ts内置类型工具原理分析：</h1><h2 id="实现Partial"><a href="#实现Partial" class="headerlink" title="实现Partial:"></a>实现Partial:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*核心实现就是通过映射类型遍历T上的所有属性</span></span><br><span class="line"><span class="comment">然后将每个属性设置为可选属性 */</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将制定的key变为可选类型*/</span></span><br><span class="line"><span class="keyword">type</span> PartialOptional&lt;T,K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]?: T[P]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*example:type Eg1=&#123;key1?:string,key2?:number&#125;*/</span></span><br><span class="line"><span class="keyword">type</span> Eg1 = PartialOptional&lt;&#123;</span><br><span class="line">    <span class="attr">key1</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">key2</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">key3</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;,<span class="string">&#x27;key1&#x27;</span>|<span class="string">&#x27;key2&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="实现Record"><a href="#实现Record" class="headerlink" title="实现Record:"></a>实现Record:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key 为联合类型中的每个子类型，类型为T</span></span><br><span class="line"><span class="comment">//keyof any得到的是string | number |symbol</span></span><br><span class="line"><span class="comment">//类型key的类型只能为string | number | symbol</span></span><br><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt;=&#123;</span><br><span class="line">    <span class="comment">//遍历key,将值设为T</span></span><br><span class="line">    [P <span class="keyword">in</span> K]:T</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*example: type Eg2 = &#123;a:B,b:B&#125;*/</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="built_in">number</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">key1</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">key2</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Eg2=Record&lt;keyof A,B&gt;</span><br><span class="line"><span class="comment">/*Partial,Readonly,Pick同态，其实现需要输入类型T拷贝属性，因此属性修饰符例如readonly,?:会被拷贝*/</span></span><br><span class="line"><span class="keyword">type</span> Eg=Pick&lt;&#123;<span class="keyword">readonly</span> a?: <span class="built_in">string</span>&#125;,<span class="string">&#x27;a&#x27;</span>&gt;</span><br><span class="line"><span class="comment">//keyof T 辅助拷贝传入类型的属性</span></span><br><span class="line"><span class="comment">//type Eg=&lt;&#123;readonly a?: string&#125;,&#x27;a&#x27;&gt;</span></span><br><span class="line"><span class="keyword">type</span> Pick&lt;T,K <span class="keyword">extends</span> keyof T&gt;=&#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]:T[P]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在Pick中，P in keyof T,T为输入的类型，而keyof T则遍历了输入类型，而Record的实现中，并没有遍历输入的类型，K只是约束为keyof any的子类型*/</span></span><br></pre></td></tr></table></figure><h2 id="实现Readonly"><a href="#实现Readonly" class="headerlink" title="实现Readonly"></a>实现Readonly</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyReadonly&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">type</span> Eg=MyReadonly&lt;&#123;</span><br><span class="line">    <span class="attr">key1</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">key2</span>: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="实现Pick"><a href="#实现Pick" class="headerlink" title="实现Pick:"></a>实现Pick:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyPick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Todo&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">description</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">completed</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> A=MyPick&lt;Todo,<span class="string">&#x27;title&#x27;</span>| <span class="string">&#x27;completed&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude:"></a>Exclude:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*遍历T中的所有子类型，如果该子类型约束于U(存在于U，兼容于U)，则返回nerver类型，否则返回该子类型 */</span></span><br><span class="line"><span class="keyword">type</span> Exclude&lt;T,U&gt; = T <span class="keyword">extends</span> U ? nerver : T</span><br><span class="line"><span class="comment">//example: type Eg = &#x27;key1&#x27;</span></span><br><span class="line"><span class="keyword">type</span> Eg=Exclude&lt;<span class="string">&#x27;key1&#x27;</span>|<span class="string">&#x27;key2&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>&gt;</span><br><span class="line"><span class="comment">//nerver表示一个不存在的类型，与其他类型联合后，是没有nerver的</span></span><br></pre></td></tr></table></figure><h2 id="Extract"><a href="#Extract" class="headerlink" title="Extract:"></a>Extract:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提取联合类型T和U的交集</span></span><br><span class="line"><span class="keyword">type</span> Extract&lt;T,U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="Omit"><a href="#Omit" class="headerlink" title="Omit:"></a>Omit:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Omit&lt;T,K&gt;从类型T中剔除K中的所有属性</span></span><br><span class="line"><span class="comment">//用Pick实现</span></span><br><span class="line"><span class="keyword">type</span> Omit = Pick&lt;T,Exclude&lt;keyof T,K&gt;&gt;</span><br><span class="line"><span class="comment">//利用映射类型</span></span><br><span class="line"><span class="keyword">type</span> Omit2&lt;T,K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> Exclude&lt;keyof T,K&gt;]:T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Parameters和ReturnType"><a href="#Parameters和ReturnType" class="headerlink" title="Parameters和ReturnType"></a>Parameters和ReturnType</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Parameters获取函数参数类型，将每个参数类型放在一个元组</span></span><br><span class="line"><span class="keyword">type</span> Parameters&lt;T <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = T <span class="keyword">extends</span> (...args: infer P)=&gt;<span class="built_in">any</span> ? P : <span class="built_in">never</span>;</span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">type</span> Eg = Parameters&lt;<span class="function">(<span class="params">arg1:<span class="built_in">string</span>,arg2:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;</span><br><span class="line"><span class="comment">//type Eg=[arg1:string,arg2:number]</span></span><br><span class="line"><span class="comment">/*Parameters约束参数T必须是个函数类型，具体实现就是判断T是否是函数类型，是就是要infer P让ts自己推到出函数的参数类型，并将推导结果存到类型P，否则</span></span><br><span class="line"><span class="comment">返回never*/</span></span><br><span class="line"><span class="comment">//ReturnType获取函数的返回值类型</span></span><br><span class="line"><span class="keyword">type</span> ReturnType&lt;T <span class="keyword">extends</span> <span class="built_in">Function</span>&gt; = T <span class="keyword">extends</span> (...args: <span class="built_in">any</span>)=&gt; infer R ? R : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><h2 id="ConstructorParameters"><a href="#ConstructorParameters" class="headerlink" title="ConstructorParameters:"></a>ConstructorParameters:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConstructorParameters可以获取类的构造函数的参数类型，存在一个元组中</span></span><br><span class="line"><span class="comment">//用infer进行推导</span></span><br><span class="line"><span class="keyword">type</span> ConstructorParameters&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...args:<span class="built_in">any</span>)=&gt;<span class="built_in">any</span>&gt;=T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...args:infer P) =&gt;<span class="built_in">any</span> ? P : <span class="built_in">never</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * type Eg = string;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> ErrorConstructor &#123;</span><br><span class="line"><span class="keyword">new</span>(message?: <span class="built_in">string</span>): <span class="built_in">Error</span>;</span><br><span class="line">(message?: <span class="built_in">string</span>): <span class="built_in">Error</span>;</span><br><span class="line"><span class="keyword">readonly</span> prototype: <span class="built_in">Error</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Eg = ConstructorParameters&lt;ErrorConstructor&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * type Eg2 = [name: string, sex?: number];</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, sex?: <span class="built_in">number</span></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Eg2 = ConstructorParameters&lt;<span class="keyword">typeof</span> People&gt;</span><br><span class="line"><span class="comment">//T约束为抽象类：既可以赋值为抽象类，也可以赋值为普通类</span></span><br><span class="line"><span class="comment">/*使用typeof 类作为类型和使用类作为类型的区别:</span></span><br><span class="line"><span class="comment">当把类直接作为类型，该类型约束的必须是类的实例，即该类型获取的是该类上的实例属性和实例方法</span></span><br><span class="line"><span class="comment">当把typeof 类作为类型，约束的满足该类的类型，该类型获取的是该类上的静态属性和方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params"></span>)</span><br><span class="line">&#125;</span><br><span class="line">//<span class="title">p1</span>可以正常赋值</span><br><span class="line"><span class="title">const</span> <span class="title">p1</span>: <span class="title">People</span> = <span class="title">new</span> <span class="title">People</span>(<span class="params"></span>)</span><br><span class="line">//等号后的<span class="title">People</span>报错</span><br><span class="line"><span class="title">const</span> <span class="title">p2</span>: <span class="title">People</span> =<span class="title">People</span></span><br><span class="line">//<span class="title">p3</span>报错，类型<span class="title">People</span>中缺少属性&#x27;<span class="title">prototype</span>&#x27;，但类型&quot;<span class="title">typeof</span> <span class="title">People</span>中需要该属性</span><br><span class="line"><span class="title">const</span> <span class="title">p3</span>: <span class="title">typeof</span> <span class="title">People</span> = <span class="title">new</span> <span class="title">People</span>(<span class="params"></span>)</span><br><span class="line"><span class="title">const</span> <span class="title">p4</span>: <span class="title">typeof</span> <span class="title">People</span> = <span class="title">People</span></span><br></pre></td></tr></table></figure><h1 id="自定义的Ts高级类型工具："><a href="#自定义的Ts高级类型工具：" class="headerlink" title="自定义的Ts高级类型工具："></a>自定义的Ts高级类型工具：</h1><h2 id="SymmetricDifference"><a href="#SymmetricDifference" class="headerlink" title="SymmetricDifference:"></a>SymmetricDifference:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SymmetricDifference&lt;T,U&gt;获取没有同时存在于T和U内的类型</span></span><br><span class="line"><span class="keyword">type</span> SymmetricDifference&lt;T,U&gt;=Exclude&lt;T|U,T&amp;U&gt;</span><br><span class="line"><span class="comment">//example:type Eg =&#x27;1&#x27; | &#x27;4&#x27;</span></span><br><span class="line"><span class="keyword">type</span> Eg = SymmetricDifference&lt;<span class="string">&#x27;1&#x27;</span>|<span class="string">&#x27;2&#x27;</span>|<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2&#x27;</span>|<span class="string">&#x27;3&#x27;</span>|<span class="string">&#x27;4&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="FunctionKeys"><a href="#FunctionKeys" class="headerlink" title="FunctionKeys:"></a>FunctionKeys:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取T中所有类型为函数的key组成的联合类型</span></span><br><span class="line"><span class="keyword">type</span> NonUndefined&lt;T&gt;= T <span class="keyword">extends</span> <span class="literal">undefined</span> ? nerver : T</span><br><span class="line"><span class="keyword">type</span> FunctionKeys&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">    [K <span class="keyword">in</span> keyof T]: NonUndefined&lt;T[K]&gt; <span class="keyword">extends</span> FunctionKeys ? K : nerver</span><br><span class="line">&#125;[keyof T]</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * type Eg = &#x27;key2&#x27; | &#x27;key3&#x27;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">type</span> AType = &#123;</span><br><span class="line">    <span class="attr">key1</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">key2</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>,</span><br><span class="line">    <span class="attr">key3</span>: <span class="built_in">Function</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> Eg = FunctionKeys&lt;AType&gt;;</span><br><span class="line"><span class="comment">//最后经过&#123;省略&#125;[keyof T]索引访问，取到的为值类型的联合类型never | key2 | key3,计算后就是key2 | key3;</span></span><br><span class="line"><span class="comment">/*T[]是索引访问操作，可以取到值的类型，T[&#x27;a&#x27;|&#x27;b&#x27;]可以依次取到值的类型进行联合，</span></span><br><span class="line"><span class="comment">  T[keyof T]则是取到T所有值的类型类型 nerver和其他类型进行联合时,nerver不存在，nerver | number | string = number | string */</span></span><br></pre></td></tr></table></figure><h2 id="OptionalKeys"><a href="#OptionalKeys" class="headerlink" title="OptionalKeys:"></a>OptionalKeys:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//OptionalKeys提取T中所有可选类型的key组成的联合类型</span></span><br><span class="line"><span class="comment">/*用映射类型遍历所有key，通过Pick&lt;T,P&gt;提取当前key和类型，利用同态拷贝会拷贝可选修饰符的特性，利用&#123;&#125;extends &#123;当前key:类型&#125; 判断是否是可选类型*/</span></span><br><span class="line"><span class="keyword">type</span> OptionalKeys&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: &#123;&#125; <span class="keyword">extends</span> Pick&lt;T,P&gt; ? P : nerver</span><br><span class="line">&#125;[keyof T]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Eg = OptionalKeys&lt;&#123;key1?: <span class="built_in">string</span>, <span class="attr">key2</span>: <span class="built_in">number</span>&#125;&gt;</span><br><span class="line"><span class="comment">//&#123;key1?:string&#125;</span></span><br><span class="line"><span class="comment">//利用&#123;&#125;extends &#123;当前key:类型&#125; 判断是否是可选类型,&#123;&#125;和只包含可选参数类型&#123;key1?:string&#125;是兼容这一特性，extends前面的&#123;&#125;替换为object也可以</span></span><br><span class="line"><span class="keyword">type</span> Eg2=&#123;&#125; <span class="keyword">extends</span> &#123;<span class="attr">key1</span>:<span class="built_in">string</span>&#125; ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">//false</span></span><br><span class="line"><span class="keyword">type</span> Eg3=&#123;&#125; <span class="keyword">extends</span> &#123;key1?:<span class="built_in">string</span>&#125; ? <span class="literal">true</span> : <span class="literal">false</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="增强Pick"><a href="#增强Pick" class="headerlink" title="增强Pick:"></a>增强Pick:</h2><h3 id="PickByValue"><a href="#PickByValue" class="headerlink" title="PickByValue"></a>PickByValue</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PickByValue提取指定类型的键值对</span></span><br><span class="line"><span class="comment">//获取T中类型不为nerver的类型组成大的联合类型</span></span><br><span class="line"><span class="keyword">type</span> TypeKeys&lt;T&gt; = T[keyof T]</span><br><span class="line"><span class="keyword">type</span> PickByValue&lt;T,V&gt; = Pick&lt;T,</span><br><span class="line">    TypeKeys&lt;&#123;[P <span class="keyword">in</span> keyof T]: T[P] <span class="keyword">extends</span> V ? P : nerver&#125;&gt;</span><br><span class="line">&gt;</span><br><span class="line"><span class="comment">/*example</span></span><br><span class="line"><span class="comment">type Eg = &#123;</span></span><br><span class="line"><span class="comment">    key1: number;</span></span><br><span class="line"><span class="comment">    key3: number</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">type</span> Eg = PickByValue&lt;&#123;<span class="attr">key1</span>:<span class="built_in">number</span>,<span class="attr">key2</span>:<span class="built_in">string</span>,<span class="attr">key3</span>:<span class="built_in">number</span>&#125;,<span class="built_in">number</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="PickByValueExtract"><a href="#PickByValueExtract" class="headerlink" title="PickByValueExtract:"></a>PickByValueExtract:</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Ts类型兼容的原因，string可以分配给string|number</span></span><br><span class="line"><span class="keyword">type</span> PickByValueExact&lt;T,V&gt;=Pick&lt;T,</span><br><span class="line">    TypeKeys&lt;&#123;[P <span class="keyword">in</span> keyof T]: [T[P]] <span class="keyword">extends</span> [V]&#125;</span><br><span class="line">    ? ([V] <span class="keyword">extends</span> [T[P]] ? P : <span class="built_in">never</span>)</span><br><span class="line">    : <span class="built_in">never</span></span><br><span class="line">    &gt;</span><br><span class="line">&gt;</span><br><span class="line"><span class="comment">//type Eg=&#123;b:number&#125;</span></span><br><span class="line"><span class="keyword">type</span> Eg1=PickByValueExact&lt;&#123;<span class="attr">a</span>:<span class="built_in">string</span>,<span class="attr">b</span>:<span class="built_in">number</span>&#125;,<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="keyword">type</span> Eg2=PickByValueExact&lt;&#123;<span class="attr">a</span>:<span class="built_in">string</span>,<span class="attr">b</span>:<span class="built_in">number</span>,<span class="attr">c</span>:<span class="built_in">number</span>|<span class="literal">undefined</span>&#125;,<span class="built_in">number</span>&gt;</span><br><span class="line"><span class="comment">//type Eg2=&#123;b:number,c:number|undefined&#125;</span></span><br><span class="line"><span class="comment">/*给泛型套一层元组，规避extends的分发式联合类型的特性</span></span><br><span class="line"><span class="comment">  利用两个类型互相兼容的方式判断是否相同*/</span></span><br><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">type</span> Eq1&lt;X,Y&gt; = X <span class="keyword">extends</span> Y ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line"><span class="keyword">type</span> Eq2&lt;X,Y&gt; = [X] <span class="keyword">extends</span> [Y] ? <span class="literal">true</span> : <span class="literal">false</span> </span><br><span class="line"><span class="keyword">type</span> Eq3&lt;X,Y&gt;= [X] <span class="keyword">extends</span> [Y] </span><br><span class="line">? ([Y] <span class="keyword">extends</span> [X] ? <span class="literal">true</span> : <span class="literal">false</span>)</span><br><span class="line">: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="增强Omit"><a href="#增强Omit" class="headerlink" title="增强Omit:"></a>增强Omit:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Omit&lt;T,K&gt;从类型T中剔除K中的所有属性</span></span><br><span class="line"><span class="comment">//用Pick实现</span></span><br><span class="line"><span class="keyword">type</span> Omit = Pick&lt;T,Exclude&lt;keyof T,K&gt;&gt;</span><br><span class="line"><span class="comment">//利用映射类型</span></span><br><span class="line"><span class="keyword">type</span> Omit2&lt;T,K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> Exclude&lt;keyof T,K&gt;]:T[P]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OmitByValue"><a href="#OmitByValue" class="headerlink" title="OmitByValue:"></a>OmitByValue:</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TypeKeys&lt;T&gt; = T&lt;keyof T&gt;</span><br><span class="line"><span class="keyword">type</span> OmitByValue&lt;T,V&gt; = Omit&lt;T,</span><br><span class="line">    TypeKeys&lt;&#123;[P <span class="keyword">in</span> keyof T] : T[P] <span class="keyword">extends</span> V ? P : <span class="built_in">never</span>&#125;&gt;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OmitByValueExact&lt;T,V&gt; =Omit&lt;T, </span><br><span class="line">    TypeKeys&lt;&#123;[P <span class="keyword">in</span> keyof T]: [T[P]] <span class="keyword">extends</span> [V] </span><br><span class="line">    ?([V] <span class="keyword">extends</span> [T[P]] ? [T[P]] : <span class="built_in">never</span>)</span><br><span class="line">    : <span class="built_in">never</span></span><br><span class="line">    &#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="Overwrite和Assign"><a href="#Overwrite和Assign" class="headerlink" title="Overwrite和Assign"></a>Overwrite和Assign</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从T中提取存在于U中的key和对应的类型</span></span><br><span class="line"><span class="keyword">type</span> Intersection&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>,U <span class="keyword">extends</span> <span class="built_in">object</span>&gt;=Pick&lt;T,</span><br><span class="line">    Extract&lt;keyof T,keyof U&gt; &amp; Extract&lt;keyof U,keyof T&gt;</span><br><span class="line">&gt;</span><br><span class="line"><span class="keyword">type</span> Eg=Intersection&lt;&#123;<span class="attr">key1</span>: <span class="built_in">string</span>&#125;,&#123;<span class="attr">key1</span>: <span class="built_in">string</span>,<span class="attr">key2</span>:<span class="built_in">number</span>&#125;&gt;</span><br><span class="line"><span class="comment">/*利用Pick提取指定的key组成的类型，通过Extract&lt;keyof T,keyof U&gt;提取同时存在于T和U中的key,</span></span><br><span class="line"><span class="comment">Extract&lt;keyof U,keyof T&gt;同理,做两次Extract然后再交叉类型的原因在于处理类型的兼容推导问题*/</span></span><br><span class="line"><span class="comment">//Diff&lt;T,U&gt;从T中排除存在于U中的key和类型</span></span><br><span class="line"><span class="keyword">type</span> Diff&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>,U <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = Pick&lt;</span><br><span class="line">    T,Exclude&lt;keyof T,keyof U&gt;</span><br><span class="line">&gt;</span><br><span class="line"><span class="keyword">type</span> Overwrite&lt;</span><br><span class="line">    T <span class="keyword">extends</span> <span class="built_in">object</span>,</span><br><span class="line">    U <span class="keyword">extends</span> <span class="built_in">object</span>,</span><br><span class="line">    I = Diff&lt;T,U&gt; &amp; Intersection&lt;T,U&gt;</span><br><span class="line">&gt; = Pick&lt;I,keyof I&gt;</span><br><span class="line"><span class="comment">/*Diff&lt;T,U&gt;先获取存在于T不存在于U中的key和其类型, </span></span><br><span class="line"><span class="comment">Intersection&lt;U,T&gt;从U中提取存在于T中的key和类型，即后者同名key和类型，在进行交叉合并*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Assign&lt;</span><br><span class="line">    T <span class="keyword">extends</span> <span class="built_in">object</span>,</span><br><span class="line">    U <span class="keyword">extends</span> <span class="built_in">object</span>,</span><br><span class="line">    I = Diff&lt;T,U&gt; &amp;U</span><br><span class="line">&gt; = Pick&lt;IDBCursor,keyof I&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection:"></a>Intersection:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从T中提取存在于U中的key和对应的类型</span></span><br><span class="line"><span class="keyword">type</span> Intersection&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>,U <span class="keyword">extends</span> <span class="built_in">object</span>&gt;=Pick&lt;T,</span><br><span class="line">    Extract&lt;keyof T,keyof U&gt; &amp; Extract&lt;keyof U,keyof T&gt;</span><br><span class="line">&gt;</span><br><span class="line"><span class="keyword">type</span> Eg=Intersection&lt;&#123;<span class="attr">key1</span>: <span class="built_in">string</span>&#125;,&#123;<span class="attr">key1</span>: <span class="built_in">string</span>,<span class="attr">key2</span>:<span class="built_in">number</span>&#125;&gt;</span><br><span class="line"><span class="comment">/*利用Pick提取指定的key组成的类型，通过Extract&lt;keyof T,keyof U&gt;提取同时存在于T和U中的key,</span></span><br><span class="line"><span class="comment">Extract&lt;keyof U,keyof T&gt;同理,做两次Extract然后再交叉类型的原因在于处理类型的兼容推导问题*/</span></span><br><span class="line"><span class="comment">//Diff&lt;T,U&gt;从T中排除存在于U中的key和类型</span></span><br><span class="line"><span class="keyword">type</span> Diff&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>,U <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = Pick&lt;</span><br><span class="line">    T,Exclude&lt;keyof T,keyof U&gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h2 id="UnionToIntersection"><a href="#UnionToIntersection" class="headerlink" title="UnionToIntersection:"></a>UnionToIntersection:</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将联合类型转变为交叉类型</span></span><br><span class="line"><span class="keyword">type</span> UnionToIntersection&lt;T&gt; =(T <span class="keyword">extends</span> <span class="built_in">any</span></span><br><span class="line">    ? <span class="function">(<span class="params">arg: T</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    : <span class="built_in">never</span></span><br><span class="line">  )<span class="keyword">extends</span> (arg: infer U) =&gt; <span class="built_in">void</span> ? U : <span class="built_in">never</span></span><br><span class="line">  <span class="comment">/*T extends any ? (arg: T) =&gt; void : never一定走true分支，构造一个逆变的联合类型</span></span><br><span class="line"><span class="comment">  (arg1: T1)=&gt;void | (arg2: T2)=&gt;void | (arg3: T3)=&gt;void</span></span><br><span class="line"><span class="comment">  再利用第二个extends配合infer推导得到U的类型，利用infer对协变类型的特性得到交叉类型*/</span></span><br><span class="line"><span class="keyword">type</span> Eg = UnionToIntersection&lt;&#123;<span class="attr">key1</span>:<span class="built_in">string</span>&#125; |&#123;<span class="attr">key2</span>: <span class="built_in">number</span>&#125;&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对应任何类型T,keyof T的结果为该类型上索引公有属性key的联合&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://coloey.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>京东一面</title>
    <link href="https://coloey.github.io/2022/11/28/%E4%BA%AC%E4%B8%9C%E4%B8%80%E9%9D%A2/"/>
    <id>https://coloey.github.io/2022/11/28/%E4%BA%AC%E4%B8%9C%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-28T12:47:14.000Z</published>
    <updated>2022-11-28T13:57:00.160Z</updated>
    
    <content type="html"><![CDATA[<p>1.三栏布局的实现</p><p>2 float顺序是ABC还是ACB,flex布局中的属性讲一下</p><p>3 js的数据类型</p><p>开始吟唱</p><p>4 Number和BigInt的区别</p><p>答得好像不是很完善？</p><p>5 判断数据类型</p><p>typeof instanceOf Object.prototype.toString.call,constructor</p><p>6 typeof object===?为什么</p><p>7 讲讲原型链</p><p>8看代码输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//变量提升</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">b()</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//10 因为b里面是给全局变量a重新赋值</span></span><br></pre></td></tr></table></figure><ol start="9"><li>x</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//变量提升</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">b()</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//100，b进入执行上下文栈后，a函数变量提升，然后a赋值，这里是创建了一个新的局部变量a，return后b函数执行完毕，b出栈，里面的局部变量a被销毁，外面访问的a是全局变量a，即100</span></span><br></pre></td></tr></table></figure><p>10 var let const区别</p><p>11 看代码输出：关于this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;win&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">a</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;obj1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a.call(obj1)<span class="comment">//win</span></span><br></pre></td></tr></table></figure><p>12 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        img=<span class="keyword">new</span> Image()</span><br><span class="line">        img.src=arr[i]</span><br><span class="line">        img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print()<span class="comment">//8,8,8,8,8,8,8,8</span></span><br></pre></td></tr></table></figure><p>13 如果img的加载速度很快呢</p><p>还是8个8，因为是异步任务，无论多快都要等到同步任务执行完才执行异步任务</p><p>14 跨域问题的解决方案</p><p>cors josonp 代理服务器</p><p>15 数组有哪些方法 哪些会改变数组本身</p><p>开始吟唱，改变数组本身的有pop,push,reverse,shift,unshift</p><p>16 讲讲简单请求和复杂请求</p><p>简单请求：get post,head,客户端服务器只发生一次请求：</p><p>复杂请求：先发送一次预检请求，Get，post,head之外的请求，请求头中包含自定义头部字段，向服务器发送了application/json格式的数据，在浏览器服务器正式通信前，浏览器先发生OPTION请求进行预检，获知该服务器是否允许该实际请求，这一层OPTION称为预检请求，服务器成功响应预检请求后才会发送真正的请求并且挈带真正的数据</p><p>客户端和服务器发送两次请求</p><p>17 设置哪个字段允许浏览器携带cookie</p><p>cookie有同源限制，如果发送跨域，浏览器不会自动带上cookie，如果服务端设置cors，Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: [特定域名] // 不可以是*，客户端，XMLHttpRequest发请求需要设置withCredentials=true，fetch 发请求需要设置 credentials = include</p><p>参考：<a href="https://juejin.cn/post/6859939491994402824">https://juejin.cn/post/6859939491994402824</a></p><p>18 手写map:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;this first argument must be a function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    <span class="keyword">let</span> arr=<span class="built_in">this</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        res[i]=fn.call(context,arr[i],i,arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MDN链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></p><p>19 用正则表达式实现千分符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num=<span class="string">&#x27;12345677799&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString().replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">&#x27;$1,&#x27;</span>))</span><br></pre></td></tr></table></figure><p>x(?=y)先行断言，匹配x仅仅匹配x后面跟着y,从后往前，以3的倍数进行分割，$1表示子字符串的匹配，将其替换为’$1’,即在每一个匹配到的子字符串后加,</p><p>20 说一下this.$nextTick</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.三栏布局的实现&lt;/p&gt;
&lt;p&gt;2 float顺序是ABC还是ACB,flex布局中的属性讲一下&lt;/p&gt;
&lt;p&gt;3 js的数据类型&lt;/p&gt;
&lt;p&gt;开始吟唱&lt;/p&gt;
&lt;p&gt;4 Number和BigInt的区别&lt;/p&gt;
&lt;p&gt;答得好像不是很完善？&lt;/p&gt;
&lt;p&gt;5 判断数据类</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>watch源码剖析</title>
    <link href="https://coloey.github.io/2022/11/19/watch%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/19/watch%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-19T10:26:39.000Z</published>
    <updated>2022-11-19T14:31:29.139Z</updated>
    
    <content type="html"><![CDATA[<p>watch的本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数，利用了effect和options.scheduler选项,<strong>利用副作用函数重新执行时的可调度性，一个watch本身会创建一个effect,当这个effect依赖的响应式数据变化时，会执行该effect的调度函数，即scheduler,这里的scheduler可以认为是“回调”，所以我们只需要在scheduler中执行用户通过watch注册的回调函数即可</strong></p><p>比如以下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data=&#123;<span class="attr">foo</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;&#125;)</span><br><span class="line">watch(obj,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据变化了&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">obj.foo++</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先判断source类型，如果是函数类型，则说明用户直接传递了getter函数，这时直接使用用户的getter函数</span></span><br><span class="line"><span class="comment">//如果不是函数类型，调用traverse函数递归读取</span></span><br><span class="line"><span class="comment">//traverse函数递归读取，当任意属性发送变化时都能触发回调函数的执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">source, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">//如果source是函数，则说明传递的是getter,则直接赋值给getter，触发读取操作，建立联系</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//按照原来的实现调用traverse</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> traverse(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">//开启lazy选项并把返回值存储到effectfn中一遍后续手动调用</span></span><br><span class="line">  <span class="keyword">const</span> effectfn = effect(</span><br><span class="line">    <span class="comment">//执行getter</span></span><br><span class="line">    <span class="function">() =&gt;</span> getter,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="function"><span class="title">scheduler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//在scheduler重新执行一遍副作用函数得到的是新值</span></span><br><span class="line">        newValue = effectfn();</span><br><span class="line">        cb(newValue, oldValue);</span><br><span class="line">        <span class="comment">//更新旧值</span></span><br><span class="line">        oldValue = newValue;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//第一次执行得到的值时旧值</span></span><br><span class="line">  oldValue = effectfn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//能读取一个对象上的任意属性，当任意属性发生变化时都能够触发回调函数执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">value, seen = <span class="keyword">new</span> <span class="built_in">Set</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果读取的是原始值，或者已经被读取过，什么都不做</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&quot;object&quot;</span> || value === <span class="literal">null</span> || seen.has(value)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//将数据添加到seen中，代表遍历地读取过，避免循环引用</span></span><br><span class="line">  seen.add(value);</span><br><span class="line">  <span class="comment">//假设value是一个对象，实验for...in读取对象得到每个值，并递归地调用traverse进行处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">    traverse(value[k], seen);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何拿到新值和旧值：lazy选项创建了一个懒执行的effect,最下面部分我们手动调用effectFn函数得到的返回值就是旧值，即第一次执行得到的值，<strong>当变化发生触发scheduler调度函数执行时，会重新调用effectFn函数并得到新值，</strong>这样我们总可以拿到旧值和新值，接着把它们传递给回调函数cb即可，再用新值更新旧值</p><h1 id="立即执行的watch和回调执行时机："><a href="#立即执行的watch和回调执行时机：" class="headerlink" title="立即执行的watch和回调执行时机："></a>立即执行的watch和回调执行时机：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">source, cb,options=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">//如果source是函数，则说明传递的是getter,则直接赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//按照原来的实现调用traverse</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> traverse(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">//提取scheduler调度函数为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> job = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    newValue=effectfn()</span><br><span class="line">    cb(newValue, oldValue);</span><br><span class="line">    <span class="comment">//更新旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//开启lazy选项并把返回值存储到effectfn中一遍后续手动调用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effectfn = effect(</span><br><span class="line">    <span class="comment">//执行getter</span></span><br><span class="line">    <span class="function">() =&gt;</span> getter,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//在调度函数中判断flush是否为post,如果是，将其放到微任务队列</span></span><br><span class="line">        <span class="keyword">if</span>(options.flush===<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> p= <span class="built_in">Promise</span>.resolve()</span><br><span class="line">            p.then(job)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            job()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span>(options.immediate)&#123;</span><br><span class="line">    job()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//第一次执行得到的值时旧值</span></span><br><span class="line">    oldValue = effectfn();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于回调函数时立即执行，所以第一次回调执行时没有旧值，因此此时回调函数的oldValue值为undefined</p><h1 id="过期的副作用："><a href="#过期的副作用：" class="headerlink" title="过期的副作用："></a>过期的副作用：</h1><p>watch回调函数接收第三个参数onInvalidate,它是一个函数，类似于事件监听器，我们可以使用onInvalidate函数注册一个回调，<strong>这个回调函数会在当前副作用函数过期时执行</strong></p><p>使用例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过期副作用</span></span><br><span class="line">watch(obj,<span class="keyword">async</span>(newValue,oldValue,onInvalidate) =&gt; &#123;</span><br><span class="line">    <span class="comment">//定义一个标志，代表当前副作用函数是否过期，默认为false,代表没有过期</span></span><br><span class="line">    <span class="keyword">let</span> expired = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//调用onInvalidate函数注册一个过期回调</span></span><br><span class="line">    onInvalidate(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//过期时设置expired为true</span></span><br><span class="line">        expired=<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">await</span> fetch(<span class="string">&#x27;path/to/request&#x27;</span>)</span><br><span class="line">    <span class="comment">//只有副作用函数没过期时才执行后序操作</span></span><br><span class="line">    <span class="keyword">if</span>(!expired)&#123;</span><br><span class="line">        finalData=res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//第一次修改</span></span><br><span class="line">obj.foo++;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//第二次修改</span></span><br><span class="line">    obj.foo++</span><br><span class="line">&#125;,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h1 id="watch处理过期回调："><a href="#watch处理过期回调：" class="headerlink" title="watch处理过期回调："></a>watch处理过期回调：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">source, cb,options=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">//如果source是函数，则说明传递的是getter,则直接赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//按照原来的实现调用traverse</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> traverse(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">//cleanup存储用户注册的过期回调</span></span><br><span class="line">  <span class="keyword">let</span> cleanup</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onInvalidate</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    cleanup=fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//提取scheduler调度函数为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> job = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    newValue=effectfn()</span><br><span class="line">    <span class="comment">//调用回调函数前，先调用过期回调</span></span><br><span class="line">    <span class="keyword">if</span>(cleanup)&#123;</span><br><span class="line">        cleanup()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将onInvalidate作为回调函数第三个参数，以便用户使用</span></span><br><span class="line">    cb(newValue, oldValue,onInvalidate);</span><br><span class="line">    <span class="comment">//更新旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//开启lazy选项并把返回值存储到effectfn中一遍后续手动调用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effectfn = effect(</span><br><span class="line">    <span class="comment">//执行getter</span></span><br><span class="line">    <span class="function">() =&gt;</span> getter,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//在调度函数中判断flush是否为post,如果是，将其放到微任务队列</span></span><br><span class="line">        <span class="keyword">if</span>(options.flush===<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> p= <span class="built_in">Promise</span>.resolve()</span><br><span class="line">            p.then(job)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            job()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span>(options.immediate)&#123;</span><br><span class="line">    job()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//第一次执行得到的值时旧值</span></span><br><span class="line">    oldValue = effectfn();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次修改obj.foo,立即执行，watch回调函数调用onInvalidata，注册过期回调,接着A请求，加入1000ms返回结果，我们在200ms后第二次修改obj,foo,又会导致watch回调函数执行，会执行过期回调,将expired设为true,则请求A的结果返回将被抛弃，避免过期副作用回调函数带来的影响</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;watch的本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数，利用了effect和options.scheduler选项,&lt;strong&gt;利用副作用函数重新执行时的可调度性，一个watch本身会创建一个effect,当这个effect依赖的响应式数据变化</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>响应式数据与副作用函数收集</title>
    <link href="https://coloey.github.io/2022/11/18/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0%E6%94%B6%E9%9B%86/"/>
    <id>https://coloey.github.io/2022/11/18/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0%E6%94%B6%E9%9B%86/</id>
    <published>2022-11-18T13:50:13.000Z</published>
    <updated>2022-11-19T09:59:11.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个响应式系统："><a href="#一个响应式系统：" class="headerlink" title="一个响应式系统："></a>一个响应式系统：</h1><ul><li>当读取操作发生时，将副作用函数收集到桶里</li><li>当设置操作发生时，从桶里取出副作用函数执行</li></ul><p>为了让副作用函数无论是什么形式都能被收集到桶里，设置一个affectEffect全局变量来存储被注册的副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用一个全局变量存储被注册的副作用函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">//副作用函数栈,解决effect函数嵌套时，内层副作用覆盖activeEffect的值</span></span><br><span class="line"><span class="keyword">let</span> effectStack = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    activeEffect = fn;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分支切换时清除遗留副作用函数"><a href="#分支切换时清除遗留副作用函数" class="headerlink" title="分支切换时清除遗留副作用函数"></a>分支切换时清除遗留副作用函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data=&#123;<span class="attr">ok</span>:<span class="literal">true</span>,<span class="attr">text</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line">effect(<span class="function"><span class="keyword">function</span> <span class="title">effectFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerText=obj.ok?obj.text:<span class="string">&#x27;not&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当obj.ok改为false时，此时obj.text不会被读取，只会触发obj.ok的读取操作，<strong>理想情况下副作用函数effectFn不应该被字段obj.text所对应的依赖集合收集，</strong>然而，整个依赖关系仍然保持，则单修改obj.text会重新执行副作用函数，这是不应该的，解决这个问题<strong>，需要在每次副作用函数执行时，把它从所有与之关联的依赖集合中删除</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//当effectFn执行，将其设置为当前激活的副作用函数</span></span><br><span class="line">        activeEffect=effectFn</span><br><span class="line">        fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//activeEffect.dep用来存储所有与该副作用函数相关联的依赖集合</span></span><br><span class="line">    effectFn.deps=[]</span><br><span class="line">    <span class="comment">//执行副作用函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bucket = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="comment">//在get拦截函数内调用track函数追踪变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//禁止追踪时直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect || !shouldTrack) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> depsMap = bucket.get(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    bucket.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.get(key);</span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">    depsMap.set(key, (deps = <span class="keyword">new</span> <span class="built_in">Set</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//把当前激活的副作用函数添加到依赖集合deps中</span></span><br><span class="line">  deps.add(activeEffect);</span><br><span class="line">  <span class="comment">//将其添加到activeEffect.deps数组中</span></span><br><span class="line">  activeEffect.deps.push(deps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//避免副作用函数产生遗留</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params">effectfn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//遍历副作用函数的依赖集合数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; effectfn.deps.length; i++) &#123;</span><br><span class="line">    <span class="comment">//deps是依赖集合</span></span><br><span class="line">    <span class="keyword">let</span> deps = effectfn.deps[i];</span><br><span class="line">    <span class="comment">//将该副作用函数从相关的依赖集合中移除</span></span><br><span class="line">    deps.delete(effectfn);</span><br><span class="line">  &#125;</span><br><span class="line">  effect.deps.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决无限循环"><a href="#解决无限循环" class="headerlink" title="解决无限循环"></a>解决无限循环</h2><p>但是这样会引起无限循环，在trigger函数中，我们遍历effects集合，执行副作用函数，当副作用函数执行,cleanup清除，就是从effects集合中将当前执行的副作用函数删除，但是副作用函数的执行又会导致其重新被收集到集合中华，造成无限循环，<strong>可以构造另外一个Set集合并遍历它</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = bucket.get(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> effects = depsMap.get(key);</span><br><span class="line">  <span class="keyword">const</span> effectsToRun = <span class="keyword">new</span> <span class="built_in">Set</span>(effects);</span><br><span class="line">  </span><br><span class="line">  effects &amp;&amp;</span><br><span class="line">    effects.forEach(<span class="function">(<span class="params">effectfn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (activeEffect != effectfn) &#123;</span><br><span class="line">        <span class="comment">//只有当trigger触发执行的副作用函数和当前正在执行的副作用函数不相同时才触发执行，如果副作用函数中执行obj.foo++,则会读取obj.foo的值又会设置obj.foo的值，track函数操作将副作用收集到桶中，trigger函数将副作用函数拿出来来执行，上一个副作用函数还没执行完毕就要执行下一次，否会出现栈溢出，</span></span><br><span class="line">        effectsToRun.add(effectfn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  effectsToRun.forEach(<span class="function">(<span class="params">effectfn</span>) =&gt;</span> effectfn());</span><br><span class="line">  <span class="comment">//effect&amp;&amp;effect.forEach(fn=&gt;fn())//会产生无限执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套effect与effect栈：<br>当在组件Foo中渲染另一个组件，会发生effect嵌套：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar=&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Foo=&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Bar</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就发生了effect嵌套：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    Foo.render()</span><br><span class="line">    <span class="comment">//嵌套</span></span><br><span class="line">    effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        Bar.render()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然而，如果只是用activeEffect来存储通过effect函数注册的副作用函数，这意味着任意时刻activeEffect所存储的副作用函数只有一个，当副作用函数发生嵌套时，内层副作用函数的执行会覆盖activeEffect的值，并且永远不会恢复到原来的值，为了解决这个问题，我们需要<strong>一个副作用函数栈effectStack，在副作用函数执行时，将当前副作用函数入栈，待副作用函数执行完毕将其从栈中弹出，并始终让activeEffect指向栈顶的副作用函数，这样就能做到一个响应式数据只会收集直接读取其值的副作用函数</strong>，而不会出现互相影响的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用一个全局变量存储被注册的副作用函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">//副作用函数栈,解决effect函数嵌套时，内层副作用覆盖activeEffect的值</span></span><br><span class="line"><span class="keyword">let</span> effectStack = [];</span><br><span class="line"><span class="comment">//options选项可以实现调度执行，懒执行等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> effectfn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用cleanup完成清除工作</span></span><br><span class="line">    cleanup(effectfn);</span><br><span class="line">    <span class="comment">//副作用函数入栈</span></span><br><span class="line">    effectStack.push(effectfn);</span><br><span class="line">    <span class="comment">//当effectfn执行时，将其设置为当前激活的副作用函数</span></span><br><span class="line">    activeEffect = effectfn;</span><br><span class="line">    <span class="comment">//副作用函数执行完毕，出栈</span></span><br><span class="line">    <span class="keyword">const</span> res = fn();</span><br><span class="line">    effectStack.pop();</span><br><span class="line">    <span class="comment">//把activeEffect还原为之前的值</span></span><br><span class="line">    activeEffect = effectStack[effectStack.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//activeEffect.deps用来存储所有与该副作用函数相关联的依赖集合</span></span><br><span class="line">  effectfn.deps = [];</span><br><span class="line">  <span class="keyword">if</span> (!options.lazy) &#123;</span><br><span class="line">    effectfn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectfn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一个响应式系统：&quot;&gt;&lt;a href=&quot;#一个响应式系统：&quot; class=&quot;headerlink&quot; title=&quot;一个响应式系统：&quot;&gt;&lt;/a&gt;一个响应式系统：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;当读取操作发生时，将副作用函数收集到桶里&lt;/li&gt;
&lt;li&gt;当设置操作发生时，从</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3编译优化</title>
    <link href="https://coloey.github.io/2022/11/17/Vue3%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/"/>
    <id>https://coloey.github.io/2022/11/17/Vue3%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/</id>
    <published>2022-11-17T13:25:00.000Z</published>
    <updated>2022-11-18T12:10:51.749Z</updated>
    
    <content type="html"><![CDATA[<p>编译优化指的是编译器将模板编译为渲染函数的过程中，尽可能多的提取关键信息，并以此指导生成最优代码的过程，优化的方向主要是<strong>区分动态内容和静态内容，并针对不同的内容采用不同的优化策略</strong></p><h1 id="动态节点收集与补丁标志："><a href="#动态节点收集与补丁标志：" class="headerlink" title="动态节点收集与补丁标志："></a>动态节点收集与补丁标志：</h1><p>Vue2中：渲染器在运行时得不到足够的信息，传统diff算法无法利用编译时提取得到的关键信息，这导致渲染器在运行时不可能去做相关优化</p><p>Vue3:<strong>会将编译时得到的关键信息附着在它生成的虚拟DOM上，这些信息会通过虚拟DOM传递给渲染器</strong>，最终渲染器会因为这些关键信息执行“快捷路径”，提升性能</p><p>传统虚拟DOM：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>.</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;foo&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了patchFlag:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>.</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;foo&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="attr">patchFlag</span>:<span class="number">1</span>&#125;<span class="comment">//动态节点</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>patchFlag属性就是补丁标志。理解为一系列数字标记，不同数字值的不同赋予它不同意义：</p><p>1:代表节点有动态的textContent</p><p>2：代表元素有动态class绑定</p><p>3:代表元素有动态style绑定</p><p>…</p><p>我们可以在虚拟结点的创建阶段，将它的动态子节点提取出来，并将其存储到该虚拟结点的dynamicChildren中,与普通虚拟节点比较，它多出了一个dynamicChildren,把含有该属性的虚拟节点称为块，即Block,一个Block还需要可以收集它的所有动态子节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PatchFlags=&#123;</span><br><span class="line">    <span class="attr">TEXT</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">CLASS</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">STYLE</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>.</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;foo&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="attr">patchFlag</span>:<span class="number">1</span>&#125;<span class="comment">//动态节点</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//将children中的动态节点提取到dynamicChildren数组</span></span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="attr">patchFlag</span>:PatchFlags.TEXT&#125;<span class="comment">//动态节点</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="收集所有动态子节点："><a href="#收集所有动态子节点：" class="headerlink" title="收集所有动态子节点："></a>收集所有动态子节点：</h1><p>在渲染函数内，对createVNode的函数的调用是层层嵌套，并且函数的执行顺序是内层先执行，外层后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> createVNode(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">        createVNode(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">            ...</span><br><span class="line">        ])</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当外层createVNode函数执行时，内层的createVNode已经执行完毕，因此，为了让外层的Block结点能够收集到内层结点，就需要一个栈结构的数据来临时存储内层的动态节点，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态节点栈：临时存储内层的动态节点</span></span><br><span class="line"><span class="keyword">const</span> dynamicChildrenStack = []</span><br><span class="line"><span class="comment">//当前动态节点的集合</span></span><br><span class="line"><span class="keyword">let</span> currentDynamicChildren = <span class="literal">null</span></span><br><span class="line"><span class="comment">//openBlock用来创建一个新的动态节点集合,将currentDynamicChildren初始化为空数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openBlock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dynamicChildrenStack.push((currentDynamicChildren=[]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//closeBlock用来将通过openBlock创建的动态节点集合从栈中弹出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeBlock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    currentDynamicChildren = dynamicChildrenStack.pop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在createVNode函数内部，检测节点是否存在补丁标志，如果存在，则说明该节点是动态节点，将其添加到当前动态节点集合currentDynamicChildren中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createVNode</span>(<span class="params">tag,props,children,flags</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = props &amp;&amp; props.key</span><br><span class="line">    props &amp;&amp; <span class="keyword">delete</span> props.key</span><br><span class="line">    <span class="keyword">const</span> vnode = &#123;</span><br><span class="line">        tag,</span><br><span class="line">        props,</span><br><span class="line">        children,</span><br><span class="line">        key,</span><br><span class="line">        <span class="attr">patchFlags</span>: flags</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> flags !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; currentDynamicChildren) &#123;</span><br><span class="line">        <span class="comment">//动态节点，将其添加到当前动态节点集合中</span></span><br><span class="line">        currentDynamicChildren.push(vnode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//使用createBlock代替createNode来创建Block</span></span><br><span class="line">    <span class="comment">//每次调用createBlcok之前先调用openBlock</span></span><br><span class="line">    <span class="keyword">return</span> (openBlock(),createBlock(<span class="string">&#x27;div&#x27;</span>,<span class="literal">null</span>,[</span><br><span class="line">        createVNode(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="attr">class</span>: <span class="string">&#x27;foo&#x27;</span>&#125;,<span class="literal">null</span>,<span class="number">1</span>),</span><br><span class="line">        createVNode(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="attr">class</span>:<span class="string">&#x27;bar&#x27;</span>&#125;,<span class="literal">null</span>)</span><br><span class="line">    ]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBlock</span>(<span class="params">tag,props,children</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//block本质是一个vnode</span></span><br><span class="line">    <span class="keyword">const</span> block = createVNode(tag,props,children)</span><br><span class="line">    <span class="comment">//内层的createNode函数已经执行完毕，这里的currentDynamicChildren存储的就是属于当前Block的所有动态子节点</span></span><br><span class="line">    block.dynamicChldren = currentDynamicChildren</span><br><span class="line">    <span class="comment">//关闭block</span></span><br><span class="line">    closeBlock()</span><br><span class="line">    <span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用逗号运算符保证渲染函数的返回值仍然是VNode对象，任何作为Block的节点都应该使用createBlock函数完成虚拟节点创建，由于createVNode函数和createBlock函数时由内向外，因此，当createBlock执行时，内层所有createVNode函数已经执行完毕，currentDynamicChildren存储的就是当前Block的所有动态子节点，将currentDynamicChildren赋值给dynamicChldren,完成了动态子节点的收集</p><h1 id="渲染器运行时支持："><a href="#渲染器运行时支持：" class="headerlink" title="渲染器运行时支持："></a>渲染器运行时支持：</h1><p>优先检测虚拟DOM是否存在动态节点集合，即dynamicChildren数组，如果存在，直接调用patchBlockChildren函数完成更新，这样，渲染器只会更新动态节点，而跳过所有静态结点，<strong>进行针对性的靶向更新</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchElement</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el=n1.el=n2.el</span><br><span class="line">    <span class="keyword">const</span> oldProps = n1.props</span><br><span class="line">    <span class="keyword">const</span> newProps = n2.props</span><br><span class="line">    <span class="keyword">if</span>(n2.patchFlags) &#123;</span><br><span class="line">        <span class="comment">///靶向更新</span></span><br><span class="line">        <span class="keyword">if</span>(n2.patchFlags===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//只更新Text</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n2.patchFlags===<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//更新class</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n2.patchFlags===<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//全量更新</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">                <span class="keyword">if</span>(newProps[key]!==oldProps[key]) &#123;</span><br><span class="line">                    patchProps(el,key,oldProps[key],newProps[key])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!(key <span class="keyword">in</span> newProps))&#123;</span><br><span class="line">                    patchProps(el,key,oldProps[key],<span class="literal">null</span>)<span class="comment">//卸载</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用patchChildren处理children</span></span><br><span class="line">    patchChilren(n1,n2,el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Block会收集所有动态子节点，所以对动态子节点的操作时忽略DOM层级结构的，会带来额外的问题，即v-if,v-for等结构化指令会影响DOM层级结构，使之不稳定，会间接导致Block树的对比算法失效，解决办法就是让带有v-if和v-for等指令的结点也作为Block角色，</p><p>v-if指令的结点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-if</span>=<span class="string">&quot;foo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当foo为true或false,block收集到的动态节点均是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> block = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>: [</span><br><span class="line">        &#123;<span class="attr">tag</span>: <span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>: ctx.a,<span class="attr">patchFlags</span>:<span class="number">1</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Diff中就不会做更新，然而更新前后标签不一样，不做更新会产生bug,结构化指令导致更新前后模板的结构发生变化，即模板结构不稳定，因此需要让v-if/v-else等结构化指令的结点也作为Block角色</p><p>即上面这段模板会构成一颗Block树：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Block(div)</span><br><span class="line">-Block(Section v-<span class="keyword">if</span>)</span><br><span class="line">-Block(div v-<span class="keyword">else</span>)</span><br></pre></td></tr></table></figure><p>父级Block除了会收集动态子节点外，也会收集子Block,因此两个子Block将作为父Block的动态节点被收集到父级Block的dynamicChildren数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> block =&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        <span class="comment">//Block(section v-if)或者Block(div v-else),key值根据不同Block发生变化</span></span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;section&#x27;</span>,&#123;<span class="attr">key</span>:<span class="number">0</span>&#125;,<span class="attr">dynamicChildren</span>:[...]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-for指令的结点：</p><p>下面的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;bar&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有最外层的div标签作为Block:</p><p>更新前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prevBlock = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.foo,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prevBlock = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.foo,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新前后的block动态节点个数不一致，为了让DOM树有稳定的结构，让带有v-for指令的标签也作为Block角色，使用类型为Fragment的结点来表达v-for指令的渲染结果，并作为Block角色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> block = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>: [</span><br><span class="line">        <span class="comment">//这是一个Block,它有dynamicChildren</span></span><br><span class="line">        &#123;<span class="attr">tag</span>:Fragment,<span class="attr">dynamicChildren</span>:[<span class="comment">/*v-for结点*/</span>]&#125;</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.foo,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="number">1</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而Fragment本身收集的动态节点依然会结构不稳定，就是更新前后一个block的dynamicChildren数组中收集的动态节点数量或顺序不一致，导致我们无法直接进行靶向更新，只能用传统diff算法</p><h1 id="静态提升："><a href="#静态提升：" class="headerlink" title="静态提升："></a>静态提升：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hoist1=createVNode(<span class="string">&#x27;p&#x27;</span>,<span class="literal">null</span>,<span class="string">&#x27;static text&#x27;</span>),</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (openBlock(),createBlock(<span class="string">&#x27;div&#x27;</span>,<span class="literal">null</span>,[</span><br><span class="line">        hoist1,</span><br><span class="line">        creatVNode(<span class="string">&#x27;p&#x27;</span>,nulll,ctx.title,<span class="number">1</span>)</span><br><span class="line">    ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在渲染函数内只会持有对静态结点的引用，当响应式数据变化，是的渲染函数重新执行时，并不会重新创建静态的虚拟结点，避免了额外的性开销</p><h1 id="预字符串化："><a href="#预字符串化：" class="headerlink" title="预字符串化："></a>预字符串化：</h1><p>静态提升的虚拟节点或虚拟节点树本身是静态的，可以将其预字符串化：</p><p>比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hoistStatic=createStaticVNode(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(openBlock(),createBlock(<span class="string">&#x27;div&#x27;</span>,<span class="literal">null</span>,[</span><br><span class="line">        hoistStatic</span><br><span class="line">    ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>大块的静态内容可以通过innerHTML进行设置，性能上有优势</li><li>减少创建虚拟节点产生的性能开销和内存占用</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了Block和补丁标志，Vue3还在编译性能上做了其他优化：</p><ul><li>静态提升：把纯静态的结点提升到渲染函数外，渲染函数内只会持有对静态结点的引用，当响应式数据变化，使得渲染函数重新执行时，并不会重新创建静态的虚拟结点，避免了额外的性开销</li><li>预字符串化：在静态提升基础上，对静态结点进行字符串化，这样能减少创建虚拟节点产生的性能开销和内存占用，大块的静态内容可以通过innerHTML进行设置</li><li>缓存内联事件处理函数：避免造成不必要的组件更新</li><li>v-once指令：代码中存在setBlockTracking(-1)函数调用，用来暂停动态结点的收集，<strong>也就是说使用v-once包裹的动态节点不会被父级Block收集，被v-once包裹的动态节点在组件更新时，不会参与DIff操作</strong>，缓存全部或者部分虚拟节点，避免组件更新时重新创建虚拟DOM带来的性能开销，也可以避免无用的Diff操作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编译优化指的是编译器将模板编译为渲染函数的过程中，尽可能多的提取关键信息，并以此指导生成最优代码的过程，优化的方向主要是&lt;strong&gt;区分动态内容和静态内容，并针对不同的内容采用不同的优化策略&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;动态节点收集与补丁标志：&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>keepAlive原理</title>
    <link href="https://coloey.github.io/2022/11/16/keepAlive%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/16/keepAlive%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-16T09:53:28.000Z</published>
    <updated>2022-11-16T16:55:42.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p>将被KeepAlive的组件从原容器搬运到另一个隐藏的容器中，实现“假卸载“，当被搬运到隐藏容器中的组件需要再次被挂载时，我们也不能执行真正的挂载逻辑，而是把组件从隐藏容器中再搬运到原容器，这个过程对应到组件的生命周期，就是activated和deactivated</p><p>一个简单的KeepAlive组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> KeepAlive = &#123;</span><br><span class="line">  <span class="comment">//keepAlive组件独有的属性，用作标识</span></span><br><span class="line">  <span class="attr">__isKeepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; slots &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个缓存对象</span></span><br><span class="line">    <span class="comment">//key:vnode.type</span></span><br><span class="line">    <span class="comment">//value:vnode</span></span><br><span class="line">    <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">//当前keepAlive组件的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = currentInstance;</span><br><span class="line">    <span class="comment">//对于KeepAlive组件来说，它的实例上有存在特殊的keepAliveCtx对象，该对象由渲染器注入</span></span><br><span class="line">    <span class="comment">//该对象会暴露渲染器得到一些内部方法，其中move函数用来将一段DOM移动到另一个容器中</span></span><br><span class="line">    <span class="keyword">const</span> &#123; move, createElement &#125; = instance.KeepAliveCtx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建隐藏容器</span></span><br><span class="line">    <span class="keyword">const</span> storageContainer = createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//keepAlive组件实例上会被添加两个内部函数，分别是_deActivate和_activate</span></span><br><span class="line">    <span class="comment">//这两个函数会在渲染器中被调用</span></span><br><span class="line">    instance._deActivate = <span class="function">(<span class="params">vnode</span>) =&gt;</span> &#123;</span><br><span class="line">      move(vnode, storageContainer);</span><br><span class="line">    &#125;;</span><br><span class="line">    instance._activate = <span class="function">(<span class="params">vnode, container, anchor</span>) =&gt;</span> &#123;</span><br><span class="line">      move(vnode, container, anchor);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//keepAlive的默认插槽就是要被keepAlive的组件</span></span><br><span class="line">      <span class="keyword">let</span> rawVNode = slots.default();</span><br><span class="line">      <span class="comment">//如果不是组件，直接渲染，因为非组件的虚拟结点无法被keepAlive</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> rawVNode.type !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rawVNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在挂载时先获取缓存的组件vnode</span></span><br><span class="line">      <span class="keyword">const</span> cachedVNode = cache.get(rawVNode.type);</span><br><span class="line">      <span class="keyword">if</span> (cachedVNode) &#123;</span><br><span class="line">        <span class="comment">//如果有缓存的内容，说明不应该执行挂载，应该执行激活</span></span><br><span class="line">        <span class="comment">//继承组件实例</span></span><br><span class="line">        rawVNode.component = cachedVNode.component;</span><br><span class="line">        <span class="comment">//在vnode上添加keptAlive属性，标记为true,避免渲染器重新挂载</span></span><br><span class="line">        rawVNode.keptAlive = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果没有缓存，则将其添加到缓存中，这样下次激活组件时不会执行新的挂载动作</span></span><br><span class="line">        cache.set(rawVNode.type, rawVNode);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在组件vnode上添加shouldKeepAlive属性，并标记为true,避免渲染器将组件卸载</span></span><br><span class="line">      rawVNode.shouldKeepAlive = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//将keepAlive组件的实例也添加到vNode上，以便在渲染器中访问</span></span><br><span class="line">      rawVNode.KeepAliveInstance = instance;</span><br><span class="line">      <span class="comment">//渲染组件 vnode</span></span><br><span class="line">      <span class="keyword">return</span> rawVNode;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>KeepAlive组件会对内部组件进行操作，主要是在内部组件的vnode对象上添加一些标记属性，以便渲染器能够执行特定的逻辑，这些标记属性包括:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vnode.type === Fragment) &#123;</span><br><span class="line">        vnode.children.forEach(<span class="function"><span class="params">c</span>=&gt;</span>unmount(c))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> vnode.type === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//vnode.shouldAlive是一个布尔值，用来标识该组件是否应该被KeepAlive</span></span><br><span class="line">        <span class="keyword">if</span>(vnode.shouldKeepAlive) &#123;</span><br><span class="line">            <span class="comment">//对于需要被keppAlive的组件，我们不应该直接卸载，而应该调用该组件的父组件，即keepAlive的父组件_deActive函数使其失活</span></span><br><span class="line">            vnode.KeepAliveInstance._deActivate(vnode)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            unmount(vnode.component.subTree)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> parent = vnode.el.parentNode</span><br><span class="line">    <span class="keyword">if</span>(parent) &#123;</span><br><span class="line">        parent.removeChild(vnode.el)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shouldKeepAlive:该属性会被添加到内部组件的vnode对象，这样当渲染器卸载内部组件时，可以通过检查该属性得知，内部组件需要被KeepAlive,于是渲染器不会真的卸载内部组件，而是会调用_deActivate函数完成搬运工作</p><p>keptAlive:内部组件如果已经被缓存，则还会为其添加一个keptAlive标记，这里当内部之间需要重新渲染时，渲染器并不会重新挂载它，而会将其激活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">n1,n2,container,anchor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n1 &amp;&amp; n1.type !== n2.type) &#123;</span><br><span class="line">        unmount(n1)</span><br><span class="line">        n1=<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123;type&#125; = n2</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === Text)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === Fragment)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> type === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> type === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n1) &#123;</span><br><span class="line">            <span class="comment">//如果该组件已经被keepAlive,则不会重新挂载它，而是会调用_active来激活它</span></span><br><span class="line">            <span class="keyword">if</span>(n2.keptAlive)&#123;</span><br><span class="line">                n2.keepAliveInstance._activate(n2,container,anchor)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                mountComponent(n2,container,anchor)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            patchComponent(n1,n2,anchor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失活的本质就是将组件所渲染的内容移动到隐藏容器中，激活的本质是将组件所渲染的内容搬运到原来的容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//涉及move的函数由渲染器注入的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span>(<span class="params">vnode,container,anchor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">const</span> instance = &#123;</span><br><span class="line">        state,</span><br><span class="line">        <span class="attr">props</span>: shallowReactive(props),</span><br><span class="line">        <span class="attr">isMounted</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">subTree</span>: <span class="literal">null</span>,</span><br><span class="line">        slots,</span><br><span class="line">        <span class="attr">mounted</span>: [],</span><br><span class="line">        <span class="comment">//只有KeepAlive组件的实例下会有keepAliveCtx属性</span></span><br><span class="line">        <span class="attr">keepAliveCtx</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查当前要挂载的组件是否是KeepAlive组件</span></span><br><span class="line">    <span class="keyword">const</span> isKeepAlive = vnode.type.__isKeepAlive</span><br><span class="line">    <span class="keyword">if</span>(isKeepAlive) &#123;</span><br><span class="line">        <span class="comment">//在KeepAlive组件实例上添加keepAliveCtx对象</span></span><br><span class="line">        instance.keepAliveCtx = &#123;</span><br><span class="line">            <span class="comment">//move函数用来移动一段vnode</span></span><br><span class="line">            <span class="function"><span class="title">move</span>(<span class="params">vnode,container,anchor</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//本质上是将组件渲染的内容移动到指定容器中，即隐藏容器中</span></span><br><span class="line">                insert(vnode.component.subTree.el,container,anchor)</span><br><span class="line">            &#125;,</span><br><span class="line">            createElement</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用LRU算法实现缓存管理，可以为缓存设置最大容量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:max</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;dynamicComp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>LRU算法的思想就是会把当前访问（或渲染）的组件作为最新一次渲染的组件，移动到队头，而如果队列容量不够，会把最久未被使用的组件即队尾组件移出队列，也可以自定义缓存实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:cache</span>=<span class="string">&quot;cache&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;dynamicComp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;原理：&lt;/h1&gt;&lt;p&gt;将被KeepAlive的组件从原容器搬运到另一个隐藏的容器中，实现“假卸载“，当被搬运到隐藏容器中的组件需要再次被挂载时，我们也不能</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>b站前端日常实习一面</title>
    <link href="https://coloey.github.io/2022/11/12/b%E7%AB%99%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <id>https://coloey.github.io/2022/11/12/b%E7%AB%99%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-12T06:51:38.000Z</published>
    <updated>2022-11-12T06:58:31.565Z</updated>
    
    <content type="html"><![CDATA[<p>自我介绍</p><p>1.css选择器优先级</p><p>2.visibility:none,opacity:0,display:none区别 如果设置还能进行事件绑定和监听吗</p><p>3.闭包</p><p>4.作用域链</p><p>5 深拷贝有几种实现方法</p><p>差点写错了</p><p>6.遇到过内存泄漏问题吗？怎么解决</p><p>7.浏览器垃圾回收机制</p><p>之前看过V8的垃圾回收机制，就回答了那部分</p><p>8.vue看过哪些源码？答：响应式部分</p><p>9 讲讲vue2 vue3响应式原理</p><p>10 vue2中computed有用到watcher吗?</p><p>我了解的是vue3的源码，用到了副作用函数和getter，本质上也是发布订阅模式…</p><p>11 vue3diff 算法有什么优化？</p><p>讲了Vue2和vue3的diff算法以及优化原理</p><p>12 vue3中的patchFlag了解吗 不是很了解</p><p>13 你的项目用的gulp做打包 是基于什么想法用的gulp</p><p>14 了解vite snowpack吗</p><p>不是很了解</p><p>15 计网还记得哪些？http https tcp udp</p><p>16 讲讲http和https</p><p>17 https还有什么需要缺陷</p><p>回答了http1,http2,http3的区别 </p><p>18 http3还了解哪些</p><p>就讲了Quic协议解决可靠传输问题和运输层用UDP实现</p><p>问：还有吗？ 了解的只有这些</p><p>19 深挖Quic协议 不是很了解</p><p>20 实习项目中做了什么</p><p>21 实习项目中遇到了哪些困难</p><p>22 怎么在组件中实现的国际化</p><p>23 写一个二叉树的前序遍历 非递归写法</p><p>反问：学习建议</p><p>回答：计网挺熟悉的 你项目中用的gulp做打包，在项目中用哪些构建工具要做一个系统的考察</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自我介绍&lt;/p&gt;
&lt;p&gt;1.css选择器优先级&lt;/p&gt;
&lt;p&gt;2.visibility:none,opacity:0,display:none区别 如果设置还能进行事件绑定和监听吗&lt;/p&gt;
&lt;p&gt;3.闭包&lt;/p&gt;
&lt;p&gt;4.作用域链&lt;/p&gt;
&lt;p&gt;5 深拷贝有几种实现方法&lt;</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue各阶段数据可使用情况</title>
    <link href="https://coloey.github.io/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <id>https://coloey.github.io/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</id>
    <published>2022-11-10T01:53:25.000Z</published>
    <updated>2022-11-10T02:04:09.573Z</updated>
    
    <content type="html"><![CDATA[<p>加载顺序：</p><p><img src="/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/1-16680454078781.png"></p><p>在new Vue()时，vue\src\core\instance\index.js里面的_init()初始化各个功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">  !(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">) &#123;</span><br><span class="line">  warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>._init(options) <span class="comment">//初始化各个功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在_init()中是这样一个执行顺序，initState是在beforeCreate和created之间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">initLifecycle(vm)</span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  initState(vm) <span class="comment">//初始化</span></span><br><span class="line">  initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  callHook(vm, <span class="string">&#x27;created&#x27;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在initState()中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts.props) initProps(vm, opts.props)<span class="comment">//初始化Props</span></span><br><span class="line"><span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)<span class="comment">//初始化methods</span></span><br><span class="line"><span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">  initData(vm)&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)&#125;<span class="comment">//初始化data</span></span><br><span class="line"><span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)<span class="comment">//初始化computed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以Props，methods,data和computed的初始化都是在beforeCreated和created之间完成的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;加载顺序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/1-166804</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>from memory cache与from disk cache</title>
    <link href="https://coloey.github.io/2022/11/08/from-memory-cache%E4%B8%8Efrom-disk-cache/"/>
    <id>https://coloey.github.io/2022/11/08/from-memory-cache%E4%B8%8Efrom-disk-cache/</id>
    <published>2022-11-08T12:02:47.000Z</published>
    <updated>2022-11-08T12:18:47.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的开发者工具的Network的Size栏出现三种情况："><a href="#浏览器的开发者工具的Network的Size栏出现三种情况：" class="headerlink" title="浏览器的开发者工具的Network的Size栏出现三种情况："></a>浏览器的开发者工具的Network的Size栏出现三种情况：</h1><ul><li>from memory cache</li><li>from disk cache</li><li>资源本身大小(比如13.6k)</li></ul><h1 id="二三级缓存原理："><a href="#二三级缓存原理：" class="headerlink" title="二三级缓存原理："></a>二三级缓存原理：</h1><p>1.先查找内存，如果内存中存在，从内存中加载</p><p>2.如果内存中未查找到，选择硬盘获取，如果硬盘中有，从硬盘中加载</p><p>3.如果硬盘中未查找到，就进行网络请求</p><p>4.加载到的资源缓存到硬盘和内存</p><h1 id="http状态码及区别"><a href="#http状态码及区别" class="headerlink" title="http状态码及区别"></a>http状态码及区别</h1><ul><li>200 from memory cache:不访问服务器，一般已经加载过该资源且缓存在了内存中，直接从内存中读取缓存，浏览器关闭后，数据将不存在（资源被释放掉），<strong>再次打开相同的页面时，不会出现from memory cache，一般脚本，字体，图片会存在内存中</strong></li><li>200 from disk cache:不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，<strong>此资源不会随着该页面的关闭而释放掉，下次打开仍然是from disk cache，一般非脚本存在其中，如css</strong></li><li>200 资源大小数值：从服务器下载最新资源</li><li>304 Not Modified:访问服务器，发现数据没有更新，服务器返回此状态码，然后从缓存中获取数据</li></ul><h1 id="几种状态执行顺序："><a href="#几种状态执行顺序：" class="headerlink" title="几种状态执行顺序："></a>几种状态执行顺序：</h1><p>例子：加载一种资源：访问-&gt;200-&gt;退出浏览器-&gt;再进来-&gt;200(from disk cache)-&gt;刷新-&gt;200(from memory cache)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器的开发者工具的Network的Size栏出现三种情况：&quot;&gt;&lt;a href=&quot;#浏览器的开发者工具的Network的Size栏出现三种情况：&quot; class=&quot;headerlink&quot; title=&quot;浏览器的开发者工具的Network的Size栏出现三种情况：&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>组件设计原则</title>
    <link href="https://coloey.github.io/2022/11/08/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://coloey.github.io/2022/11/08/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2022-11-08T09:48:12.000Z</published>
    <updated>2022-11-08T09:48:12.718Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端工程化-CI/CD</title>
    <link href="https://coloey.github.io/2022/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-CI-CD/"/>
    <id>https://coloey.github.io/2022/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-CI-CD/</id>
    <published>2022-11-08T09:16:40.000Z</published>
    <updated>2022-11-08T12:53:40.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h1><p>1.CI（Continuous integration,<strong>持续集成</strong>)</p><p>频繁地（一天多次）将代码集成到主干</p><p>2.CD(Continous delivery**,持续交付)**</p><p>持续集成的下一步，指的是，频繁将软件的新版本，交付给质量团队或者用户，以供评审，如评审通过，代码进入生产阶段，手动部署</p><p>3.CD(Continous deployment,<strong>持续部署</strong>)</p><p>持续交付的下一步，指的是，代码通过评审后，自动部署到生产环境</p><h1 id="意义："><a href="#意义：" class="headerlink" title="意义："></a>意义：</h1><h2 id="CI（持续集成）"><a href="#CI（持续集成）" class="headerlink" title="CI（持续集成）"></a>CI（持续集成）</h2><p>（1）<strong>快速发现错误</strong>，每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易</p><p>（2）<strong>防止分支大幅偏离主干</strong>，如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成</p><p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量</strong>，它的核心措施是，代码集成到主干之前，必须通过自动化测试，只要有一个测试用例失败，就不能集成</p><h2 id="CD（持续交付）"><a href="#CD（持续交付）" class="headerlink" title="CD（持续交付）"></a>CD（持续交付）</h2><p>保证不管怎么更新，软件是随时可以交付的</p><h2 id="CD（持续部署）"><a href="#CD（持续部署）" class="headerlink" title="CD（持续部署）"></a>CD（持续部署）</h2><p>保证代码在任何时刻都是可部署，可以进入生产阶段</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>开发者提交代码</p><h2 id="测试（第一轮）"><a href="#测试（第一轮）" class="headerlink" title="测试（第一轮）"></a>测试（第一轮）</h2><p>代码仓库commit操作配置钩子，只要提交代码合并进主干，就会跑自动化测试</p><p>三种测试：</p><p>单元测试：针对函数或模块的测试</p><p>集成测试：针对整体产品的某个功能的测试，又称功能测试</p><p>端对端测试：从用户界面直达数据库的全链路测试</p><h2 id="构建："><a href="#构建：" class="headerlink" title="构建："></a>构建：</h2><p>测试通过，代码即可进入主干，就算可以交付</p><p>交付后，就先进行构建，再进入第二轮测试</p><p>所谓构建，指的就是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式，JS脚本，图片）等</p><p>常用的构建工具：</p><p>·<a href="https://links.jianshu.com/go?to=http://jenkins-ci.org/">Jenkins</a></p><p>·<a href="https://links.jianshu.com/go?to=https://travis-ci.com/">Travis</a></p><p>·<a href="https://links.jianshu.com/go?to=https://www.codeship.io/">Codeship</a></p><p>·<a href="https://links.jianshu.com/go?to=http://stridercd.com/">Strider</a></p><h2 id="测试（第二轮）"><a href="#测试（第二轮）" class="headerlink" title="测试（第二轮）"></a>测试（第二轮）</h2><p>全面测试，单元测试和集成测试都会跑，有条件也要做端对端测试，所有测试以自动化为主，少数无法自动化的测试用例，人工跑</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过第二轮测试，当前代码就是一个可以直接部署的版本，将这个版本的所有文件打包存档，发到生产服务器，生产服务器将打包文件解包成本地的一个目录，再将允许路径的符号链接指向这个目录，然后重新启动应用</p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>一旦当前版本发送问题，就要回滚到上一个版本的构建结果，最简单的做法就是修改符号链接，指向上一个版本目录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h1&gt;&lt;p&gt;1.CI（Continuous integration,&lt;strong&gt;持续集成&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;频繁地（一天多次</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>YY直播日常实习</title>
    <link href="https://coloey.github.io/2022/11/08/YY%E7%9B%B4%E6%92%AD%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0/"/>
    <id>https://coloey.github.io/2022/11/08/YY%E7%9B%B4%E6%92%AD%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0/</id>
    <published>2022-11-08T08:43:51.000Z</published>
    <updated>2022-11-09T06:44:27.043Z</updated>
    
    <content type="html"><![CDATA[<p>1.实习负责的什么项目，项目中遇到了哪些困难 </p><p> 2.你讲到了Vue-i18n插件，设计插件的思想：x </p><p>  3.Vue中封装组件的思想 </p><p>  4.函数式编程的思想 x</p><p>  5.vue和vue3双向绑定原理，区别 </p><p> 6.Proxy的优点</p><p>  6.data中为什么返回函数比较好，不是对象 </p><p>  7.data中如果用对象，造成了数据污染，要怎么避免数据污染 x</p><p>组件复用造成了数据污染，那就只能避免组件的复用？</p><p>  8.vue方法中声明了对象没有响应式，怎么实现响应式 </p><p>  9.vue源码中，data,comouted,methods声明的顺序的是怎样的 x</p><p>  10.vue的生命周期 </p><p>  11.vue3的生命周期和vue2生命周期的不同点 </p><p>  12.讲讲keep-alive </p><p>  13.keep-alive的实现原理 </p><p>  14.你的项目中用到了组件库，讲讲前端工程化 </p><p>  15.tree-traking原理，怎么实现tree-shaking，tree-shaking怎么知道没用的代码 x</p><p>  16.前端中的CI/CD是怎样的流程 x</p><p>  17.了解抽象语法树AST吗 </p><p>  18.babel-loader原理讲讲 </p><p>  19.http缓存 </p><p>  20.如果浏览器中没有设置强缓存和协商缓存，浏览器会自动缓存吗 </p><p>  21.from disk和from memory的区别 x</p><p>  22.http和https的区别 </p><p>  还问了一些有些没想起来 </p><p>  反问：有点紧张，觉得我面试表现得怎么样 </p><p>  回答：看出来你有点紧张，很多东西原理了解的还不深入，但是整个前端体系比较全面，了解工程化知识，框架也熟悉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.实习负责的什么项目，项目中遇到了哪些困难 &lt;/p&gt;
&lt;p&gt; 2.你讲到了Vue-i18n插件，设计插件的思想：x &lt;/p&gt;
&lt;p&gt;  3.Vue中封装组件的思想 &lt;/p&gt;
&lt;p&gt;  4.函数式编程的思想 x&lt;/p&gt;
&lt;p&gt;  5.vue和vue3双向绑定原理，区别 &lt;/</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>手写instanceof</title>
    <link href="https://coloey.github.io/2022/11/02/%E6%89%8B%E5%86%99instanceof/"/>
    <id>https://coloey.github.io/2022/11/02/%E6%89%8B%E5%86%99instanceof/</id>
    <published>2022-11-02T12:11:11.000Z</published>
    <updated>2022-11-02T12:12:09.200Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left,right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = right.prototype</span><br><span class="line">    left = left.__proto__</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left)<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span>(left == prototype)<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        left = left.__proto__</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
    <category term="手撕代码" scheme="https://coloey.github.io/tags/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>hook原理</title>
    <link href="https://coloey.github.io/2022/11/01/hook%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/01/hook%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-01T07:55:12.000Z</published>
    <updated>2022-11-01T08:55:27.701Z</updated>
    
    <content type="html"><![CDATA[<p>hook就是解决函数组件没有state,生命周期，逻辑不能复用的一种解决方案</p><p>dispatcher</p><p>在真实hook中，组件mount时的hook和update时的hook来源于不同对象，这类对象在源码中称为dispatcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mount时的Dispatcher</span></span><br><span class="line"><span class="keyword">const</span> HooksDispatcherOnMount: Dispatcher = &#123;</span><br><span class="line">  <span class="attr">useCallback</span>: mountCallback,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: mountEffect,</span><br><span class="line">  <span class="attr">useImperativeHandle</span>: mountImperativeHandle,</span><br><span class="line">  <span class="attr">useLayoutEffect</span>: mountLayoutEffect,</span><br><span class="line">  <span class="attr">useMemo</span>: mountMemo,</span><br><span class="line">  <span class="attr">useReducer</span>: mountReducer,</span><br><span class="line">  <span class="attr">useRef</span>: mountRef,</span><br><span class="line">  <span class="attr">useState</span>: mountState,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update时的Dispatcher</span></span><br><span class="line"><span class="keyword">const</span> HooksDispatcherOnUpdate: Dispatcher = &#123;</span><br><span class="line">  <span class="attr">useCallback</span>: updateCallback,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: updateEffect,</span><br><span class="line">  <span class="attr">useImperativeHandle</span>: updateImperativeHandle,</span><br><span class="line">  <span class="attr">useLayoutEffect</span>: updateLayoutEffect,</span><br><span class="line">  <span class="attr">useMemo</span>: updateMemo,</span><br><span class="line">  <span class="attr">useReducer</span>: updateReducer,</span><br><span class="line">  <span class="attr">useRef</span>: updateRef,</span><br><span class="line">  <span class="attr">useState</span>: updateState,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可见，mount时调用的hook和update时调用的hook是两个不同的函数，在FunctionComponent render前，会根据FunctionComponent对应fiber的一下条件区分mount和update</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>并把不同情况对应的dispatcher赋值给全局变量ReactCurrentDispatcher的current属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReactCurrentDispatcher.current =</span><br><span class="line">    current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span> ? HookDispatcherOnMount : HooksDispatcherOnUpdate</span><br></pre></td></tr></table></figure><p>在FuntionComponent render时，会从ReactCurrentDispatcher.current（即当前dispatcher，则FunctionComponent render时调用的hook是不同函数）</p><p>Hook数据结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hook: Hook = &#123;</span><br><span class="line">    <span class="attr">memoizedState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseQueue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">queue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>memoizedState:</p><p>hook与FunctionComponent fiber都存在memoizedState属性：</p><p>fiber.memoizedState:FunctionComponent对应fiber保存的Hooks链表</p><p>hook.memoizedState:Hooks链表中保存的单一hook对应的数据</p><p>不同类型hook的memoizedState保存不同类型数据：</p><p>useState:对于const [state,updateState] = useState(initialState),memoizedState保存state的值</p><p>useReducer:对于const[state,dispatch]=useReducer(reducer,[]),memoizedState保存state的值</p><p>useEffect:memoizedState保存包含useEffect回调函数，依赖项等的链表数据结构effect,effect会保存在fiber.updateQueue</p><p>useRef:对于useRef(1),memoizedState保存{current:1}</p><p>useMemo:对于useMemo(callback,[depA]),memoizedState保存[callback,depA],与useMemo的区别是，useCallback保存的是callback函数本身，而useMemo保存的是callback函数的执行结果</p><p>有些hook没有memoizedState:</p><p>如useContext</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hook就是解决函数组件没有state,生命周期，逻辑不能复用的一种解决方案&lt;/p&gt;
&lt;p&gt;dispatcher&lt;/p&gt;
&lt;p&gt;在真实hook中，组件mount时的hook和update时的hook来源于不同对象，这类对象在源码中称为dispatcher&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>computed原理</title>
    <link href="https://coloey.github.io/2022/11/01/computed%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/01/computed%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-01T01:13:00.000Z</published>
    <updated>2022-11-01T03:50:37.575Z</updated>
    
    <content type="html"><![CDATA[<p>effect是用来注册副作用函数，同时它允许指定一些选项参数options,例如指定scheduler调度器控制副作用函数的执行时机和方式，先实现一个懒执行的副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn,options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup(effectFn)</span><br><span class="line">        activeEffect = effectFn</span><br><span class="line">        effectStack.push(effectFn)</span><br><span class="line">        fn()</span><br><span class="line">        effectStack.pop()</span><br><span class="line">        activeEffect = effectStack[effectStack.length-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    effectFn.options = options</span><br><span class="line">    effectFn.deps = []</span><br><span class="line">    <span class="comment">//只有非lazy才执行</span></span><br><span class="line">    <span class="keyword">if</span>(!options.lazy) &#123;</span><br><span class="line">        effectFn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将副作用函数作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> effectFn<span class="comment">//新增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了让副作用函数不立即执行的功能，将副作用函数effectFn作为effect函数的返回值，这就意味着当调用effect函数时，通过其返回值能够拿到对应的副作用函数，这样我们能够手动执行副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectFn = effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.foo)</span><br><span class="line">&#125;,&#123;<span class="attr">lazy</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">//手动执行副作用函数</span></span><br><span class="line">effectFn()</span><br></pre></td></tr></table></figure><p>如果把传递给effect的函数看做一个getter，那么这个getter函数可以返回任何值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectFn = effect(</span><br><span class="line"><span class="comment">//getter返回obj.foo和obj.bar</span></span><br><span class="line">    <span class="function">() =&gt;</span> obj.foo + obj.bar,</span><br><span class="line">    &#123; <span class="attr">lazy</span>: <span class="literal">true</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了手动执行副作用函数时就能拿到其返回值，改动effect函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn,options = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup(effectFn)</span><br><span class="line">        activeEffect = effectFn</span><br><span class="line">        effectStack.push(effectFn)</span><br><span class="line">        <span class="comment">//将fn执行结果存储到res</span></span><br><span class="line">        <span class="keyword">const</span> res = fn()</span><br><span class="line">        effectStack.pop()</span><br><span class="line">        activeEffect = effectStack[effectStack.length-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">//将res作为effectFn返回值</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    effectFn.options = options</span><br><span class="line">    effectFn.deps = []</span><br><span class="line">    <span class="keyword">if</span>(!options.lazy)&#123;</span><br><span class="line">        effectFn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> effectFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递给effect函数的参数fn才是真正的副作用函数，而effectFn是我们包装后的副作用函数，为了通过effectFn得到真正的副作用函数fn的执行结果，我们需要将其保存到res变量，然后将其作为effectFn函数的返回值</p><p>接下来就可以定义cmputed函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//把getter作为副作用函数，创建一个lazy的effect</span></span><br><span class="line">    <span class="keyword">const</span> effectFn = effect(getter,&#123;</span><br><span class="line">        <span class="attr">lazy</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="comment">//当读取value时才执行effectFn</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> effectFn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>computed函数接收一个getter函数作为参数，我们把getter函数作为副作用函数，用它创建一个lazy的effect,computed函数的执行会返回一个对象，该对象的value属性是一个访问器属性，只有当读取value值时，才执行effectFn并将结果作为返回值返回</p><p>使用computed函数创建一个计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data =&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;...&#125;)</span><br><span class="line"><span class="keyword">const</span> sumRes = computed(<span class="function">() =&gt;</span> obj.foo + obj.bar)</span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>当多次访问sumRes.value的值，会导致effectFn进行多次计算，即使obj.foo和obj,bar的值本身没有变化，利用闭包实现对值进行缓存的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//value用来缓存上一次计算的值</span></span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="comment">//dirty标志，用来标识是否需要重新计算值，为true意味着“脏”没需要计算</span></span><br><span class="line">    <span class="keyword">let</span> dirty = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> effectFn = effect(getter,&#123;</span><br><span class="line">        <span class="attr">lazy</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">            <span class="comment">//只有脏时才计算值，并将得到的值缓存到value</span></span><br><span class="line">            <span class="keyword">if</span>(dirty)&#123;</span><br><span class="line">                value = effectFn()</span><br><span class="line">                <span class="comment">//将dirty设置为false,下一次访问直接使用缓存到value中的值</span></span><br><span class="line">                dirty = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时改变obj.foo或者obj.bar,再访问sumRes.value会发现访问到的值没有发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">foo</span>: <span class="number">1</span>,<span class="attr">bar</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;...&#125;)</span><br><span class="line"><span class="keyword">const</span> sumRes = computed(<span class="function">() =&gt;</span> obj.foo+obj.bar)</span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br><span class="line">obj.foo++;</span><br><span class="line"><span class="comment">//再次访问得到的仍然是3</span></span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>这是因为，第一次访问sumRes.value的值后，变量dirty被设置为false,代表不需要计算，即使我们修改obj.foo的值，但只要dirty的值为false,就不会重新计算，所有导致我们得到错误的值，因此当obj.foo或者obj.bar的值发生改变时，只要dirty的值重置为true就可以，这时就用到scheduler选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">let</span> dirty = <span class="literal">true</span></span><br><span class="line">    cont effectFn = effect(getter, &#123;</span><br><span class="line">        <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="function"><span class="title">scheduler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dirty) &#123;</span><br><span class="line">                dirty = <span class="literal">true</span></span><br><span class="line">                <span class="comment">//当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应</span></span><br><span class="line">                trigger(obj,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span>(dirty)&#123;</span><br><span class="line">                value = effectFn()</span><br><span class="line">                dirty = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当读取value手动调用track函数进行追踪</span></span><br><span class="line">            track(obj,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当读取一个计算属性value，需要手动调用track函数，把计算属性返回的对象obj作为target,同时作为第一个参数传递给track函数，当计算属性所依赖的响应式数据变化时会立即调度函数，在调度函数内手动调用trigger函数触发响应即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;effect是用来注册副作用函数，同时它允许指定一些选项参数options,例如指定scheduler调度器控制副作用函数的执行时机和方式，先实现一个懒执行的副作用函数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
</feed>
