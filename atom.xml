<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小七的博客</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2021-11-22T16:21:19.590Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小七</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DOM</title>
    <link href="https://coloey.github.io/2021/11/23/DOM/"/>
    <id>https://coloey.github.io/2021/11/23/DOM/</id>
    <published>2021-11-22T16:20:02.000Z</published>
    <updated>2021-11-22T16:21:19.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h2><p>DOM Level 1描述为名为Node的接口，Node接口在JavaScript中被实现为Node类型，所有结点都继承Node类型，因此所有类型都共享相同的基本属性和方法。</p><p>节点类型可通过与这些常量比较来确定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点类型可通过与这些常量比较确定，如果两者相等，则意味着someNode是一个元素节点</span></span><br><span class="line"><span class="keyword">if</span>(someNode.nodeType==Node.ELEMENT_NODE)&#123;</span><br><span class="line">    alert(<span class="string">&quot;Node is an element&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//nodeName和nodeValue保存着有关节点的信息</span></span><br><span class="line"><span class="keyword">if</span>(someNode.nodeType==<span class="number">1</span>)&#123;</span><br><span class="line">    value=someNode.nodeName;<span class="comment">//会显示元素的标签名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h4><p>节点与其他节点的关系可形容为家族关系，每个节点有一个childNodes属性其中包含一个NodeList的实例，NodeList是一个类数组对象，它是DOM结构的查询，DOM结构的变化会自动地在NodeList中反映出来，用于存储可以按位置存取的有序节点。可以使用中括号或者item()方法访问它的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstChild=someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> secondChild=someNode.childNodes.item(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> count=someNode.childNodes.length;</span><br><span class="line"><span class="keyword">let</span> arrayofNodes=<span class="built_in">Array</span>.from(someNode.childNodes);</span><br></pre></td></tr></table></figure><p>parentNode指向DOM树中的父元素，childNode中所有节点都有同一个父元素，parentNode指向同一个节点，childNodes列表中每个结点都是同一列表中其他节点的同胞节点，使用previousSibling和nextSibling可以在这个列表的节点间导航。</p><p>hasChildNodes()节点返回true则说明节点有一个或多个子节点。</p><p>ownerDocument属性是一个指向代表整个文档的文档节点的指针</p><h4 id="操纵节点"><a href="#操纵节点" class="headerlink" title="操纵节点"></a>操纵节点</h4><p>appendChild():用于在childNodes列表末尾添加节点，返回新添加的节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> returnedNode=someNode.appendChild(newNode);</span><br><span class="line">alert(returnedNode==newNode);<span class="comment">//true</span></span><br><span class="line">alert(someNode.lastChild==newNode);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>inserBefore():接收两个参数，要插入的节点和参照节点。要插入的节点会变成参照节点的前一个同胞节点，并被返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">returnedNode=someNode.insertBefore(newNode,<span class="literal">null</span>);</span><br><span class="line">alert(newNode==someNode.lastChild);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//作为新的第一个子节点插入</span></span><br><span class="line">retunedNode=someNode.insertBefore(newNode,someNode.firstChild);</span><br><span class="line">alert(returnedNode==newNode);<span class="comment">//true</span></span><br><span class="line">alert(newNode==someNode.fiestChild);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//插入最后一个子节点的前面</span></span><br><span class="line">returnedNode==someNode.insertBefore(newNode,someNode.lastChild);</span><br><span class="line">alert(newNode==someNode.childNodes[someNode.childNodes.length-<span class="number">2</span>]);<span class="comment">//true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>replaceChild():接收两个参数，要插入的节点和要替换的节点。要替换的节点被返回并从文档中被移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">returnedNode=someNode.replaceChild(newNode,someNode.lastChild);<span class="comment">//替换最后一个子节点</span></span><br></pre></td></tr></table></figure><p>removeChild():接收一个参数，即要被移除的节点，被移除的节点会被返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formerFirstChild=someNode.removeChild(someNode.firstChild);</span><br></pre></td></tr></table></figure><p>cloneNode():传入true参数会进行深复制，即复制节点和整个子DOM树；传入false进行浅复制，只会复制该方法的节点。复制返回的节点属于文档所有，但未指定父节点，称为孤儿节点，通过appendChild()和insertBefore()或replaceChild()方法把孤儿节点添加到文档中</p><p>normalize():处理文本节点，如果发现空文本节点则将其删除否则如果两个同胞节点相邻则将其合并为一个文本节点</p><h2 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h2><p>表示文档节点的类型,document是HTMLDocument的实例（HTMLDocument继承Document）,表示整个HTML页面，document是window对象的属性是一个全局对象。</p><ul><li><p>nodetype等于9</p></li><li><p>nodeName值为“#document”</p></li><li><p>nodevalue值为null</p></li><li><p>parentNode值为null</p></li><li><p>ownerDocument值为null</p></li><li><p>子节点可以使DocumentType(最多一个)，Element(最多一个)，ProcessingInstruction或Comment类型</p></li></ul><h4 id="文档子节点"><a href="#文档子节点" class="headerlink" title="文档子节点"></a>文档子节点</h4><p>documentElement:始终指向HTML页面中的<html>元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="keyword">let</span> html=<span class="built_in">document</span>.documentElement;<span class="comment">//取得对&lt;html&gt;的引用</span></span><br><span class="line">alert(html===<span class="built_in">document</span>.childNodes[<span class="number">0</span>]);</span><br><span class="line">alert(html===<span class="built_in">document</span>.firstChild);</span><br></pre></td></tr></table></figure><p>document.body:直接指向<body>元素，取得对<body>的引用</p><h4 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h4><p>title:显示浏览器窗口或标签页的标题栏</p><p>URL:包含当前页面的完整URL</p><p>domain:包含页面的域名</p><p>referrer:包含空字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//document.URL=&quot;http://www.wrox.com/WileyCDA/&quot;,document.domain就是www.wrox.com</span></span><br><span class="line"><span class="built_in">document</span>=<span class="string">&quot;wrrox.com&quot;</span>;<span class="comment">//成功</span></span><br><span class="line"><span class="built_in">document</span>=<span class="string">&quot;nczonline.net&quot;</span>;<span class="comment">//出错,不能给这个属性设置URL中不包含的值</span></span><br></pre></td></tr></table></figure><p>当页面中包含来自某个不同子域的窗格（<frame>)或内嵌窗格(<iframe>)设置document.domain是有用的，比如一个加载自<a href="http://www.wrox.com的页面包含一个内嵌窗格其中的页面加载自p2p.wrox.com,这两个页面包含不同的字符串,内部和外部不能相互访问对方的javascript对象,如果每个页面都把document.domain设置为wrox.com,那两个页面就可以相互通信/">www.wrox.com的页面包含一个内嵌窗格其中的页面加载自p2p.wrox.com，这两个页面包含不同的字符串，内部和外部不能相互访问对方的JavaScript对象，如果每个页面都把document.domain设置为wrox.com,那两个页面就可以相互通信</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain=<span class="string">&quot;wrox.com&quot;</span>;<span class="comment">//放松，成功</span></span><br><span class="line"><span class="built_in">document</span>.doman=<span class="string">&quot;p2p2.wrox.com&quot;</span>;<span class="comment">//收紧，失败,一旦放松就不能收紧</span></span><br></pre></td></tr></table></figure><h4 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h4><p>getElementById()：接收一个要获取元素的ID，如果找到这个元素则返回，没找到返回null。参数I必须跟元素在页面中大的id属性完全匹配，包括大小写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;myDiv&quot;</span>&gt;ome text&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> div=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>);<span class="comment">//取得对&lt;div&gt;的引用,如果存在多个相同ID的元素则返回在文档中的第一个元素</span></span><br></pre></td></tr></table></figure><p>getElementsByTagName():接收一个参数，即要获取元素的标签名,返回包含0个或多个元素的NodeList，在HTML文档中返回一个HTMLCollection对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> images=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">alert(images.length);<span class="comment">//图片数量</span></span><br><span class="line">alert(images[<span class="number">0</span>].src);<span class="comment">//第一张图片的src属性</span></span><br><span class="line">alert(images.item(<span class="number">0</span>).src);</span><br><span class="line"><span class="comment">//通过name属性获得引用</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;myImage.gif&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myImage&quot;</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">let myImage=images.namedItem(&quot;myImage&quot;);</span></span><br><span class="line"><span class="xml">//images[&quot;myImage&quot;]</span></span><br><span class="line"><span class="xml">//取得文档的所有元素</span></span><br><span class="line"><span class="xml">let allElements=document.getElementsByTagName(&quot;*&quot;);</span></span><br></pre></td></tr></table></figure><p>getElementsByName():返回具有给定name属性的所有元素，常用于单选按钮</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldset&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>Which color do you prefer?<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;input type=&quot;radio&quot; value=&quot;red&quot; name=&quot;color&quot; id=&quot;colorRed&quot;&gt;&lt;label for=&quot;colorRed&quot;&gt;Red&lt;/label&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    &lt;li&gt; &lt;input type=&quot;radio&quot; value=&quot;blue&quot; name=&quot;color&quot; id=&quot;colorBlue&quot;&gt;&lt;label for=&quot;colorBlue&quot;&gt;Blue&lt;/label&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    let radios=document.getElementsByName(&quot;color&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h2><ul><li><p>nodeType=1</p></li><li><p>nodeName值为元素的标签名</p></li><li><p>nodeValue的值为null</p></li><li><p>parentNode值为Document或Element对象</p></li><li><p>子节点可以是Element,Text,Comment,ProcessingInstruction等类型</p></li></ul><p>通过nodeName或tagName属性获得元素的标签名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用对象属性</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;div id=&quot;myDiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">       let div=document.getElementById(&quot;myDiv&quot;);</span><br><span class="line">alert(div.tagName);//&quot;DIV&quot;</span><br><span class="line">alert(div.tagName==div.nodeName);//true</span><br><span class="line">if(element.tagName.toLowerCase()==&quot;div&quot;)&#123;</span><br><span class="line">    //,HTML中，元素标签名以答谢表示，XML中标签名与代码中的大小写一致，不确定脚本是HTML还是XML运行，推荐将标签名转换为小写形式，适合所有文档</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h4><ul><li><p>id:元素在文档中的唯一标识符</p></li><li><p>title：包含元素的额外信息，通常以提示条形式展示</p></li><li><p>lang：元素内容的语言代码</p></li><li><p>dir：语言的书写方向（ltr从左到右，rtl从右到左)</p></li><li><p>className:相当于class属性，用于指定元素的CSS类</p></li></ul><h5 id="取得属性"><a href="#取得属性" class="headerlink" title="取得属性"></a>取得属性</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用对象属性</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;  </span><br><span class="line">    &lt;div id=&quot;myDiv&quot; class=&quot;bd&quot; title=&quot;Body text&quot; lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;2&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var div=document.getElementById(&quot;myDiv&quot;);</span><br><span class="line">        alert(div.id);</span><br><span class="line">        alert(div.className);</span><br><span class="line">        alert(div.title);</span><br><span class="line">        alert(div.lang);</span><br><span class="line">        alert(div.dir);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">//使用getAttribute()方法</span><br><span class="line">alert(div.getAttribute(&quot;class&quot;));</span><br></pre></td></tr></table></figure><p>getAttribute()主要用于取得自定义属性的值，其他情况使用对象属性</p><h5 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h5><p>setAttribute():接收两个参数，要设置的属性名和属性值,如果属性存在则用指定的值替换原来的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接给对象属性赋值</span></span><br><span class="line">div.id=<span class="string">&quot;someOtherId&quot;</span></span><br><span class="line"><span class="comment">//在对象属性上添加自定义属性，不会让它变成元素的属性</span></span><br><span class="line">div.mycolor=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">alert(div.getAttribute(<span class="string">&quot;mycolor&quot;</span>));<span class="comment">//null</span></span><br><span class="line"><span class="comment">//使用setAttribute赋值</span></span><br><span class="line">div.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;someOtherId&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="attributes属性"><a href="#attributes属性" class="headerlink" title="attributes属性"></a>attributes属性</h5><p>attributes属性包含一个NamedNodeMap实例，是一个类似NodeList的“实时”集合，元素的每个属性都表示为一个Attr节点，并保存在NamedNodeMap对象中</p><p>attributed属性中的每个节点的nodeName是对应属性的名字，nodeValue是属性的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputAttributes</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pairs=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=element.attributes.length;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">const</span> attribute=element.attributes[i];</span><br><span class="line">        pairs.push(<span class="string">`<span class="subst">$&#123;attribute.nodeName&#125;</span>=<span class="subst">$&#123;attribute.nodeValue&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> pairs.join(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h5><p>document.createElement():一个参数，即要创建元素的标签名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">div.id=<span class="string">&quot;myNewDiv&quot;</span>;</span><br><span class="line">div.className=<span class="string">&quot;box&quot;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div);</span><br></pre></td></tr></table></figure><h2 id="Text-类型"><a href="#Text-类型" class="headerlink" title="Text 类型"></a>Text 类型</h2><p>Text节点由Text类型表示，包含按字面解释的纯文本，也可能包含转义后的HTML字符，Text节点中包含的文本可以通过nodeValue或者data属性访问</p><ul><li><p>nodetype=3</p></li><li><p>nodeName=”#text”</p></li><li><p>nodeValue值为节点中包含的文本</p></li><li><p>parentNode值为Element对象</p></li><li><p>不支持子节点</p></li><li><p>appendData(text):向节点末尾添加文本text</p></li><li><p>deleteData(offset,count),从位置offset开始删除count个字符</p></li><li><p>insertData(offset,text),在位置offset插入text；</p></li><li><p>replaceData(offset,count,text)，用text替换从位置offset到offset+count大的文本</p></li><li><p>splitText(offset),在位置offset将当前文本节点拆分为两个文本节点</p></li><li><p>substringData(offset,count),提取从位置offset到offset+count的文本</p></li></ul><p>包含文本内容的每个元素最多只能有一个文本节点</p><h4 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h4><p>document.createTextNode():创建新文本节点，接收一个参数，即要插入节点的文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">element.className=<span class="string">&quot;message&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="keyword">let</span> anotherTextNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Yippee&quot;</span>);</span><br><span class="line">element.appendChild(anotherTextNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="规范化文本节点"><a href="#规范化文本节点" class="headerlink" title="规范化文本节点"></a>规范化文本节点</h4><h5 id="合并文本节点"><a href="#合并文本节点" class="headerlink" title="合并文本节点"></a>合并文本节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">element.className=<span class="string">&quot;message&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="keyword">let</span> anotherTextNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Yippee&quot;</span>);</span><br><span class="line">element.appendChild(anotherTextNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line">alert(element.childNodes.length);<span class="comment">//2</span></span><br><span class="line">element.normalize();</span><br><span class="line">alert(element.childNodes.length);<span class="comment">//1</span></span><br><span class="line">alert(element.firstChild.nodeValue);</span><br></pre></td></tr></table></figure><h5 id="拆分文本节点"><a href="#拆分文本节点" class="headerlink" title="拆分文本节点"></a>拆分文本节点</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">element.className=<span class="string">&quot;message&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> textNode=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"><span class="keyword">let</span> newNode=element.firstChild.splitText(<span class="number">5</span>);</span><br><span class="line">alert(element.fiestChild.nodeValue);<span class="comment">//&quot;Hello&quot;</span></span><br><span class="line">alert(newNode.nodeValue);<span class="comment">//&quot;world&quot;</span></span><br><span class="line">alert(element.chileNodes.length);<span class="comment">//2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h2><ul><li><p>nodeType=8</p></li><li><p>nodeName=”#comment”</p></li><li><p>nodeValue值为注释内容</p></li><li><p>parentNode值为Document或Element对象</p></li><li><p>不支持子节点</p></li></ul><p>Comment类型与Text类型继承自同一个基类(CharacterData),因此拥有除splitText之外的Text节点所有的字符串操作方法</p><h2 id="CDATASection类型"><a href="#CDATASection类型" class="headerlink" title="CDATASection类型"></a>CDATASection类型</h2><p>继承Text类型，拥有除splitText之外的Text节点所有的字符串操作方法</p><h2 id="DocumentType类型"><a href="#DocumentType类型" class="headerlink" title="DocumentType类型"></a>DocumentType类型</h2><ul><li><p>在DOM Level1中不支持动态创建，只能在解析文档代码时创建，DocumentType对象保存在document.doctype属性中.</p></li><li><p>DocumentType对象有3个属性：name,entities,notations.</p></li><li><p>name是文档名称，entities是这个文档类型描述实体的NameNodeMap,而notations是这个文档类型描述的表示法的NamedNodeMap.</p></li><li><p>浏览器文档通常是HTML或XHTML类型，所以entities和notations列表为空，只有name属性有用，包含文档类型的名称</p></li></ul><h2 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h2><ul><li><p>nodeType=11</p></li><li><p>nodeName=”#document-fragment”</p></li><li><p>nodeValue=null</p></li><li><p>parentNode=null</p></li><li><p>子节点可以是Element,ProcessingInstruction,Comment,Text,CDATASection</p></li></ul><p>充当其他要被添加的文档节点的仓库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;myList&quot;</span>&gt;&lt;/ul&gt;</span><br><span class="line"><span class="keyword">let</span> fragment=<span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">let</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myList&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> li=<span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    li.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">`Item <span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>));</span><br><span class="line">    fragment.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure><h2 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h2><p>属性是存在于元素attributes属性中的节点</p><ul><li><p>nodeType=2</p></li><li><p>nodeName值为属性名</p></li><li><p>nodeValue值为属性值</p></li><li><p>parentNode值为null</p></li></ul><p>Attr对象上3个属性</p><ul><li><p>name包含属性名</p></li><li><p>value包含属性值</p></li><li><p>specified是一个布尔值，表示属性使用的是默认值和还是被指定的值</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> attr=<span class="built_in">document</span>.createAttribute(<span class="string">&quot;align&quot;</span>);<span class="comment">//创建新的Attr节点，参数为属性名</span></span><br><span class="line">attr.value=<span class="string">&quot;left&quot;</span>;</span><br><span class="line">element.setAttributeNode(attr);<span class="comment">//添加属性节点</span></span><br><span class="line">alert(element.attributes[<span class="string">&quot;align&quot;</span>].value);<span class="comment">//返回对应属性节点</span></span><br><span class="line">alert(element.getAttributeNode(<span class="string">&quot;align&quot;</span>).value);<span class="comment">//返回对应属性节点</span></span><br><span class="line">alert(element.getAttribute(<span class="string">&quot;align&quot;</span>));<span class="comment">//只返回属性值</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h1><h2 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script=<span class="built_in">document</span>.createElement(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    script.type=<span class="string">&quot;text/javascript&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        script.appendChild(<span class="built_in">document</span>.createTextNode(code));<span class="comment">//旧版本的IE浏览器可能出问题</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        script.text=code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">loadScriptString(<span class="string">&quot;function sayHi()&#123;alert(&#x27;hi&#x27;);&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyleString</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> style=<span class="built_in">document</span>.createElement(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">    style.type=<span class="string">&quot;text/css&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        style.appendChild(<span class="built_in">document</span>.createTextNode(css));</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        style.styleSheet.cssText=css;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> head=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    head.appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line">loadStyleString(<span class="string">&quot;body[background-color:red&#125;&quot;</span>);</span><br></pre></td></tr></table></figure><p>对于IE，要小心使用styleSheet.cssText,如果重用同一个<style>元素并设置该属性超过一次，则可能导致浏览器崩溃，将cssText设置为空字符串也可能导致浏览器崩溃</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> table=<span class="built_in">document</span>.createElement(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">table.border=<span class="number">1</span>;</span><br><span class="line">table.width=<span class="string">&quot;100%&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> tbody=<span class="built_in">document</span>.createElement(<span class="string">&quot;tbody&quot;</span>);</span><br><span class="line">table.appendChild(tbody);</span><br><span class="line"></span><br><span class="line">table.insertRow(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 1,1&quot;</span>));</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 2,1&quot;</span>));</span><br><span class="line"></span><br><span class="line">table.insertRow(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 1,2&quot;</span>));</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">&quot;Cell 2,2&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(table);</span><br></pre></td></tr></table></figure><h2 id="NodeList"><a href="#NodeList" class="headerlink" title="NodeList"></a>NodeList</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>,len=divs.length;i&lt;len;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> div=doocument.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;<span class="comment">//避免导致无穷循环</span></span><br></pre></td></tr></table></figure><h1 id="Mutationobserver接口"><a href="#Mutationobserver接口" class="headerlink" title="Mutationobserver接口"></a>Mutationobserver接口</h1><p>在DOM被修改时异步执行回调，使用MutationObserver可以观察整个文档，DOM树的一部分或某个元素</p><p>MutationObserver的实例通过调用MutationObserver构造函数并传入一个回调函数创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;DOM was mutated&#x27;</span>));</span><br></pre></td></tr></table></figure><h2 id="observe-方法"><a href="#observe-方法" class="headerlink" title="observe()方法"></a>observe()方法</h2><p>接收两个参数：要观察其变化的DOM节点，以及一个MutationObserverInit对象（用于控制观察哪些方面的变化，是一个键值对形式配置选项的字典）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;&lt;body&gt; attributes changed&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><body>元素上任何属性发生变化都会被这个MutationObserver实例发现，然后异步执行注册的回调函数,<body>元素后代修改或其他非属性修改不会触发回调进入任务<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;&lt;body&gt; attributes changed&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Changed body class&#x27;</span>);</span><br><span class="line"><span class="comment">//Changed body class</span></span><br><span class="line"><span class="comment">//&lt;body&gt; attributes changed</span></span><br></pre></td></tr></table></figure><h2 id="回调与MutationRecord"><a href="#回调与MutationRecord" class="headerlink" title="回调与MutationRecord"></a>回调与MutationRecord</h2><p>每次回调都会收到一个MutationRecord实例的数组,包含的信息发生了什么变化以及DOM哪一部分受到影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));[</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.setAttributeNS(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;baz&#x27;</span>);</span><br><span class="line"><span class="comment">//连续修改多个MutationRecord实例，回调函数就会受到包含这些实例的数组，顺序为变化事件的顺序</span></span><br><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="comment">//[MutationRecord, MutationRecord]</span></span><br></pre></td></tr></table></figure><h2 id="disconnect-方法"><a href="#disconnect-方法" class="headerlink" title="disconnect()方法"></a>disconnect()方法</h2><p>会停止此后变化事件的回调，也会抛弃已经加入任务队列要异步执行的回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&#x27;&lt;body&gt;attributes changed&#x27;</span>));</span><br><span class="line">observer.observe(<span class="built_in">document</span>.body,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">observer.disconnect();</span><br><span class="line"><span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;<span class="comment">//无日志输出</span></span><br><span class="line"><span class="comment">//让已经入队的回调函数执行完毕后再调用disconnect()</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    observer.disconnect();</span><br><span class="line">    <span class="built_in">document</span>.body.className=<span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;,<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="复用MutationObserver"><a href="#复用MutationObserver" class="headerlink" title="复用MutationObserver"></a>复用MutationObserver</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> observer=<span class="keyword">new</span> MutationObserver(<span class="function">(<span class="params">mutationRecords</span>)=&gt;</span><span class="built_in">console</span>.log(mutationRecords.map(<span class="function">(<span class="params">x</span>)=&gt;</span>x.target)));</span><br><span class="line"><span class="keyword">let</span> childA=<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    childB=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(childA);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(childB);</span><br><span class="line">observer.observe(childA,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">observer.observe(childB,&#123;<span class="attr">attributes</span>:<span class="literal">true</span>&#125;);</span><br><span class="line">childA.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">childB.setAttribute(<span class="string">&#x27;foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"><span class="comment">//[div, span]</span></span><br></pre></td></tr></table></figure><h2 id="重用MutationObserver"><a href="#重用MutationObserver" class="headerlink" title="重用MutationObserver"></a>重用MutationObserver</h2><p>调用diaconnect()不会结束MutationObserver的生命，还可以重新使用这个观察者，再将它关联到新的目标结点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h1&gt;&lt;h2 id=&quot;Node类型&quot;&gt;&lt;a href=&quot;#Node类型&quot; class=&quot;headerlink&quot; title=&quot;Node类型&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>location对象</title>
    <link href="https://coloey.github.io/2021/11/15/BOM/"/>
    <id>https://coloey.github.io/2021/11/15/BOM/</id>
    <published>2021-11-15T15:57:05.000Z</published>
    <updated>2021-11-22T16:18:44.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>提供当前窗口加载文档的信息，以及通常的导航功能，它既是window的属性也是document的属性。</p><h3 id="查询字符串"><a href="#查询字符串" class="headerlink" title="查询字符串"></a>查询字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getQueryStringArgs=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取得没有开头问号的查询字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> qs=(location.search.length&gt;<span class="number">0</span>)?location.search.substring(<span class="number">1</span>):<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> args=&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span>(qs.split(<span class="string">&#x27;&amp;&#x27;</span>).map(<span class="function"><span class="params">kv</span>=&gt;</span>kv.split(<span class="string">&#x27;=&#x27;</span>))))&#123;</span><br><span class="line">        <span class="keyword">let</span> name=item[<span class="number">0</span>];</span><br><span class="line">            value=item[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(name.length)&#123;</span><br><span class="line">            args[name]=value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//qs=&quot;?q=javaScript&amp;num=10&quot;;</span></span><br><span class="line"><span class="keyword">let</span> args=getQueryStringArgs();</span><br><span class="line">alert(args[<span class="string">&quot;q&quot;</span>]);</span><br><span class="line">alert(args[<span class="string">&#x27;num&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>使用USLSearchParams检查和修改查询字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> qs=<span class="string">&quot;?q=javaScript&amp;num=10&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> searchParams=<span class="keyword">new</span> URLSearchParams(qs);</span><br><span class="line">alert(searchParams.toString());</span><br><span class="line">searchParams.has(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">searchParams.get(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">searchParams.set(<span class="string">&quot;page&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">alert(searchParams.toString());</span><br><span class="line">searchParams.delete(<span class="string">&quot;q&quot;</span>);</span><br><span class="line">alert(searchParams.toString());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> param <span class="keyword">of</span> searchParams)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作地址"><a href="#操作地址" class="headerlink" title="操作地址"></a>操作地址</h3><p>通过修改location对象修改浏览器地址，使用assign方法传进一个URL,会导航到新URL同时在浏览器历史记录增加一条记录，下面三种方法功能相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.assign(<span class="string">&quot;http://www.wrox.com&quot;</span>);</span><br><span class="line"><span class="built_in">window</span>.location=<span class="string">&quot;http://www.wrox.com&quot;</span>;</span><br><span class="line">location.href=<span class="string">&quot;http://www.wrox.com&quot;</span>;</span><br></pre></td></tr></table></figure><p>通过修改location属性可以修改当前加载的页面,hash,search,hostname,pathname.port属性被设置为新值后会修改当前的URL</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设当前URL为http://www.wrox.com/WileyCDA/</span></span><br><span class="line">location.assign(<span class="string">&quot;http://www.wrox.com/WileyCDA&quot;</span>);</span><br><span class="line"><span class="comment">//把URL修改为http://www.wrox.com/WileyCDA/#section1</span></span><br><span class="line">location.hash=<span class="string">&quot;#section1&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.wrox.com/WileyCDA/?q=javascript</span></span><br><span class="line">location.search=<span class="string">&quot;?q=javascript&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.somewhere.com/WileyCDA/</span></span><br><span class="line">location.hostname=<span class="string">&quot;www.somewhere.com&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.somewhere.com/mydir/</span></span><br><span class="line">location.pathname=<span class="string">&quot;mydir&quot;</span>;</span><br><span class="line"><span class="comment">//把URL修改为http://www.somewhere.com:8080/WileyCDA/</span></span><br><span class="line">location.port=<span class="number">8080</span>;</span><br></pre></td></tr></table></figure><p>以上的修改会在浏览器中增加记录，点击后退即可导航到前一个界面，不希望增加历史记录可以使用replace()方法，reload()可以重新加载当前页面，如果页面自从上次请求后没有修改过，则浏览器可能会从缓存中加载页面，如果想强制从服务器中加载，必须传入true</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>history用来导航历史记录，同时不会暴露用户访问过的URL。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">history.go(-<span class="number">1</span>);<span class="comment">//后退一页</span></span><br><span class="line">history.go(<span class="number">1</span>);<span class="comment">//前进一页</span></span><br><span class="line">history.go(<span class="string">&quot;wrox.com&quot;</span>)<span class="comment">//导航到最近的wrox.com页面</span></span><br><span class="line"><span class="comment">//go有两个简写方法：back()和forward()</span></span><br><span class="line">history.back();<span class="comment">//后退一页</span></span><br><span class="line">history.forward()<span class="comment">//前进一页</span></span><br><span class="line"><span class="comment">//history的length属性记录历史记录有多少条目</span></span><br><span class="line"><span class="keyword">if</span>(history.length==<span class="number">1</span>)&#123;<span class="comment">//这是用户窗口第一个页面&#125;</span></span><br></pre></td></tr></table></figure><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>navigator对象通常用来确定浏览器的类型</p><h3 id="检测插件"><a href="#检测插件" class="headerlink" title="检测插件"></a>检测插件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    name=name.toLowerCase();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> plugin <span class="keyword">of</span> <span class="built_in">window</span>.navigator.plugins)&#123;</span><br><span class="line">        <span class="keyword">if</span>(plugin.name.toLowerCase().indexOf(name)&gt;-<span class="number">1</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//alert(hasPlugin(&quot;Flash&quot;));</span></span><br><span class="line"><span class="comment">//alert(hasPlugin(&quot;QuickTime&quot;));</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ActiveXObject(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在所有浏览器中检测插件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasFlash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result=hasPlugin(<span class="string">&quot;Flash&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">        result=hasIEPlugin(<span class="string">&quot;ShockwaveFlash.ShockwaveFlash&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasQuickTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res=hasPlugin(<span class="string">&quot;QuickTime&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!res)&#123;</span><br><span class="line">        res=hasIEPlugin(<span class="string">&quot;QuickTime.QuickTime&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">alert(hasFlash());</span><br><span class="line">alert(hasQuickTime());</span><br></pre></td></tr></table></figure><h3 id="注册处理程序"><a href="#注册处理程序" class="headerlink" title="注册处理程序"></a>注册处理程序</h3><p>registerProtocolHandler()方法可以把一个网站注册处理为某种特定类型信息应用程序，传入3个参数：要处理的协议（“mailto或ftp),处理该协议的URL，以及应用名称</p><p>例如，把一个Web应用程序注册为默认客户端</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.registerProtocolHandler(<span class="string">&quot;mailto&quot;</span>,<span class="string">&quot;http://www.somemailclient.com?cmd=%s&quot;</span>,<span class="string">&quot;Some Mail Client&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BOM&quot;&gt;&lt;a href=&quot;#BOM&quot; class=&quot;headerlink&quot; title=&quot;BOM&quot;&gt;&lt;/a&gt;BOM&lt;/h1&gt;&lt;h2 id=&quot;location对象&quot;&gt;&lt;a href=&quot;#location对象&quot; class=&quot;headerlink&quot; title=&quot;l</summary>
      
    
    
    
    
  </entry>
  
</feed>
