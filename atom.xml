<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2022-11-28T13:57:00.160Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>京东一面</title>
    <link href="https://coloey.github.io/2022/11/28/%E4%BA%AC%E4%B8%9C%E4%B8%80%E9%9D%A2/"/>
    <id>https://coloey.github.io/2022/11/28/%E4%BA%AC%E4%B8%9C%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-28T12:47:14.000Z</published>
    <updated>2022-11-28T13:57:00.160Z</updated>
    
    <content type="html"><![CDATA[<p>1.三栏布局的实现</p><p>2 float顺序是ABC还是ACB,flex布局中的属性讲一下</p><p>3 js的数据类型</p><p>开始吟唱</p><p>4 Number和BigInt的区别</p><p>答得好像不是很完善？</p><p>5 判断数据类型</p><p>typeof instanceOf Object.prototype.toString.call,constructor</p><p>6 typeof object===?为什么</p><p>7 讲讲原型链</p><p>8看代码输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//变量提升</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">b()</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//10 因为b里面是给全局变量a重新赋值</span></span><br></pre></td></tr></table></figure><ol start="9"><li>x</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//变量提升</span></span><br><span class="line">    a=<span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">b()</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//100，b进入执行上下文栈后，a函数变量提升，然后a赋值，这里是创建了一个新的局部变量a，return后b函数执行完毕，b出栈，里面的局部变量a被销毁，外面访问的a是全局变量a，即100</span></span><br></pre></td></tr></table></figure><p>10 var let const区别</p><p>11 看代码输出：关于this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&quot;win&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">a</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;obj1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.a.call(obj1)<span class="comment">//win</span></span><br></pre></td></tr></table></figure><p>12 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        img=<span class="keyword">new</span> Image()</span><br><span class="line">        img.src=arr[i]</span><br><span class="line">        img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print()<span class="comment">//8,8,8,8,8,8,8,8</span></span><br></pre></td></tr></table></figure><p>13 如果img的加载速度很快呢</p><p>还是8个8，因为是异步任务，无论多快都要等到同步任务执行完才执行异步任务</p><p>14 跨域问题的解决方案</p><p>cors josonp 代理服务器</p><p>15 数组有哪些方法 哪些会改变数组本身</p><p>开始吟唱，改变数组本身的有pop,push,reverse,shift,unshift</p><p>16 讲讲简单请求和复杂请求</p><p>简单请求：get post,head,客户端服务器只发生一次请求：</p><p>复杂请求：先发送一次预检请求，Get，post,head之外的请求，请求头中包含自定义头部字段，向服务器发送了application/json格式的数据，在浏览器服务器正式通信前，浏览器先发生OPTION请求进行预检，获知该服务器是否允许该实际请求，这一层OPTION称为预检请求，服务器成功响应预检请求后才会发送真正的请求并且挈带真正的数据</p><p>客户端和服务器发送两次请求</p><p>17 设置哪个字段允许浏览器携带cookie</p><p>cookie有同源限制，如果发送跨域，浏览器不会自动带上cookie，如果服务端设置cors，Access-Control-Allow-Credentials: true Access-Control-Allow-Origin: [特定域名] // 不可以是*，客户端，XMLHttpRequest发请求需要设置withCredentials=true，fetch 发请求需要设置 credentials = include</p><p>参考：<a href="https://juejin.cn/post/6859939491994402824">https://juejin.cn/post/6859939491994402824</a></p><p>18 手写map:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap</span>(<span class="params">fn,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;this first argument must be a function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    <span class="keyword">let</span> arr=<span class="built_in">this</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        res[i]=fn.call(context,arr[i],i,arr)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MDN链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></p><p>19 用正则表达式实现千分符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num=<span class="string">&#x27;12345677799&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString().replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+$)/g</span>,<span class="string">&#x27;$1,&#x27;</span>))</span><br></pre></td></tr></table></figure><p>x(?=y)先行断言，匹配x仅仅匹配x后面跟着y,从后往前，以3的倍数进行分割，$1表示子字符串的匹配，将其替换为’$1’,即在每一个匹配到的子字符串后加,</p><p>20 说一下this.$nextTick</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.三栏布局的实现&lt;/p&gt;
&lt;p&gt;2 float顺序是ABC还是ACB,flex布局中的属性讲一下&lt;/p&gt;
&lt;p&gt;3 js的数据类型&lt;/p&gt;
&lt;p&gt;开始吟唱&lt;/p&gt;
&lt;p&gt;4 Number和BigInt的区别&lt;/p&gt;
&lt;p&gt;答得好像不是很完善？&lt;/p&gt;
&lt;p&gt;5 判断数据类</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>watch源码剖析</title>
    <link href="https://coloey.github.io/2022/11/19/watch%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/19/watch%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-19T10:26:39.000Z</published>
    <updated>2022-11-19T14:31:29.139Z</updated>
    
    <content type="html"><![CDATA[<p>watch的本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数，利用了effect和options.scheduler选项,<strong>利用副作用函数重新执行时的可调度性，一个watch本身会创建一个effect,当这个effect依赖的响应式数据变化时，会执行该effect的调度函数，即scheduler,这里的scheduler可以认为是“回调”，所以我们只需要在scheduler中执行用户通过watch注册的回调函数即可</strong></p><p>比如以下例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data=&#123;<span class="attr">foo</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;&#125;)</span><br><span class="line">watch(obj,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据变化了&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">obj.foo++</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先判断source类型，如果是函数类型，则说明用户直接传递了getter函数，这时直接使用用户的getter函数</span></span><br><span class="line"><span class="comment">//如果不是函数类型，调用traverse函数递归读取</span></span><br><span class="line"><span class="comment">//traverse函数递归读取，当任意属性发送变化时都能触发回调函数的执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">source, cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">//如果source是函数，则说明传递的是getter,则直接赋值给getter，触发读取操作，建立联系</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//按照原来的实现调用traverse</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> traverse(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">//开启lazy选项并把返回值存储到effectfn中一遍后续手动调用</span></span><br><span class="line">  <span class="keyword">const</span> effectfn = effect(</span><br><span class="line">    <span class="comment">//执行getter</span></span><br><span class="line">    <span class="function">() =&gt;</span> getter,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="function"><span class="title">scheduler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//在scheduler重新执行一遍副作用函数得到的是新值</span></span><br><span class="line">        newValue = effectfn();</span><br><span class="line">        cb(newValue, oldValue);</span><br><span class="line">        <span class="comment">//更新旧值</span></span><br><span class="line">        oldValue = newValue;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">//第一次执行得到的值时旧值</span></span><br><span class="line">  oldValue = effectfn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//能读取一个对象上的任意属性，当任意属性发生变化时都能够触发回调函数执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">value, seen = <span class="keyword">new</span> <span class="built_in">Set</span>()</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//如果读取的是原始值，或者已经被读取过，什么都不做</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&quot;object&quot;</span> || value === <span class="literal">null</span> || seen.has(value)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">//将数据添加到seen中，代表遍历地读取过，避免循环引用</span></span><br><span class="line">  seen.add(value);</span><br><span class="line">  <span class="comment">//假设value是一个对象，实验for...in读取对象得到每个值，并递归地调用traverse进行处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> value) &#123;</span><br><span class="line">    traverse(value[k], seen);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何拿到新值和旧值：lazy选项创建了一个懒执行的effect,最下面部分我们手动调用effectFn函数得到的返回值就是旧值，即第一次执行得到的值，<strong>当变化发生触发scheduler调度函数执行时，会重新调用effectFn函数并得到新值，</strong>这样我们总可以拿到旧值和新值，接着把它们传递给回调函数cb即可，再用新值更新旧值</p><h1 id="立即执行的watch和回调执行时机："><a href="#立即执行的watch和回调执行时机：" class="headerlink" title="立即执行的watch和回调执行时机："></a>立即执行的watch和回调执行时机：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">source, cb,options=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">//如果source是函数，则说明传递的是getter,则直接赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//按照原来的实现调用traverse</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> traverse(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">//提取scheduler调度函数为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> job = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    newValue=effectfn()</span><br><span class="line">    cb(newValue, oldValue);</span><br><span class="line">    <span class="comment">//更新旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//开启lazy选项并把返回值存储到effectfn中一遍后续手动调用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effectfn = effect(</span><br><span class="line">    <span class="comment">//执行getter</span></span><br><span class="line">    <span class="function">() =&gt;</span> getter,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//在调度函数中判断flush是否为post,如果是，将其放到微任务队列</span></span><br><span class="line">        <span class="keyword">if</span>(options.flush===<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> p= <span class="built_in">Promise</span>.resolve()</span><br><span class="line">            p.then(job)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            job()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span>(options.immediate)&#123;</span><br><span class="line">    job()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//第一次执行得到的值时旧值</span></span><br><span class="line">    oldValue = effectfn();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于回调函数时立即执行，所以第一次回调执行时没有旧值，因此此时回调函数的oldValue值为undefined</p><h1 id="过期的副作用："><a href="#过期的副作用：" class="headerlink" title="过期的副作用："></a>过期的副作用：</h1><p>watch回调函数接收第三个参数onInvalidate,它是一个函数，类似于事件监听器，我们可以使用onInvalidate函数注册一个回调，<strong>这个回调函数会在当前副作用函数过期时执行</strong></p><p>使用例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过期副作用</span></span><br><span class="line">watch(obj,<span class="keyword">async</span>(newValue,oldValue,onInvalidate) =&gt; &#123;</span><br><span class="line">    <span class="comment">//定义一个标志，代表当前副作用函数是否过期，默认为false,代表没有过期</span></span><br><span class="line">    <span class="keyword">let</span> expired = <span class="literal">false</span></span><br><span class="line">    <span class="comment">//调用onInvalidate函数注册一个过期回调</span></span><br><span class="line">    onInvalidate(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//过期时设置expired为true</span></span><br><span class="line">        expired=<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">await</span> fetch(<span class="string">&#x27;path/to/request&#x27;</span>)</span><br><span class="line">    <span class="comment">//只有副作用函数没过期时才执行后序操作</span></span><br><span class="line">    <span class="keyword">if</span>(!expired)&#123;</span><br><span class="line">        finalData=res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//第一次修改</span></span><br><span class="line">obj.foo++;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//第二次修改</span></span><br><span class="line">    obj.foo++</span><br><span class="line">&#125;,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><h1 id="watch处理过期回调："><a href="#watch处理过期回调：" class="headerlink" title="watch处理过期回调："></a>watch处理过期回调：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watch</span>(<span class="params">source, cb,options=&#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getter;</span><br><span class="line">  <span class="comment">//如果source是函数，则说明传递的是getter,则直接赋值给getter</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    getter = source;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//按照原来的实现调用traverse</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> traverse(source);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义旧值和新值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue, newValue;</span><br><span class="line">  <span class="comment">//cleanup存储用户注册的过期回调</span></span><br><span class="line">  <span class="keyword">let</span> cleanup</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onInvalidate</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    cleanup=fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//提取scheduler调度函数为一个独立的job函数</span></span><br><span class="line">  <span class="keyword">const</span> job = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    newValue=effectfn()</span><br><span class="line">    <span class="comment">//调用回调函数前，先调用过期回调</span></span><br><span class="line">    <span class="keyword">if</span>(cleanup)&#123;</span><br><span class="line">        cleanup()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将onInvalidate作为回调函数第三个参数，以便用户使用</span></span><br><span class="line">    cb(newValue, oldValue,onInvalidate);</span><br><span class="line">    <span class="comment">//更新旧值</span></span><br><span class="line">    oldValue = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//开启lazy选项并把返回值存储到effectfn中一遍后续手动调用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effectfn = effect(</span><br><span class="line">    <span class="comment">//执行getter</span></span><br><span class="line">    <span class="function">() =&gt;</span> getter,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">scheduler</span>: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//在调度函数中判断flush是否为post,如果是，将其放到微任务队列</span></span><br><span class="line">        <span class="keyword">if</span>(options.flush===<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> p= <span class="built_in">Promise</span>.resolve()</span><br><span class="line">            p.then(job)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            job()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span>(options.immediate)&#123;</span><br><span class="line">    job()</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//第一次执行得到的值时旧值</span></span><br><span class="line">    oldValue = effectfn();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次修改obj.foo,立即执行，watch回调函数调用onInvalidata，注册过期回调,接着A请求，加入1000ms返回结果，我们在200ms后第二次修改obj,foo,又会导致watch回调函数执行，会执行过期回调,将expired设为true,则请求A的结果返回将被抛弃，避免过期副作用回调函数带来的影响</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;watch的本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数，利用了effect和options.scheduler选项,&lt;strong&gt;利用副作用函数重新执行时的可调度性，一个watch本身会创建一个effect,当这个effect依赖的响应式数据变化</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>响应式数据与副作用函数收集</title>
    <link href="https://coloey.github.io/2022/11/18/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0%E6%94%B6%E9%9B%86/"/>
    <id>https://coloey.github.io/2022/11/18/%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E4%B8%8E%E5%89%AF%E4%BD%9C%E7%94%A8%E5%87%BD%E6%95%B0%E6%94%B6%E9%9B%86/</id>
    <published>2022-11-18T13:50:13.000Z</published>
    <updated>2022-11-19T09:59:11.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个响应式系统："><a href="#一个响应式系统：" class="headerlink" title="一个响应式系统："></a>一个响应式系统：</h1><ul><li>当读取操作发生时，将副作用函数收集到桶里</li><li>当设置操作发生时，从桶里取出副作用函数执行</li></ul><p>为了让副作用函数无论是什么形式都能被收集到桶里，设置一个affectEffect全局变量来存储被注册的副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用一个全局变量存储被注册的副作用函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">//副作用函数栈,解决effect函数嵌套时，内层副作用覆盖activeEffect的值</span></span><br><span class="line"><span class="keyword">let</span> effectStack = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    activeEffect = fn;</span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分支切换时清除遗留副作用函数"><a href="#分支切换时清除遗留副作用函数" class="headerlink" title="分支切换时清除遗留副作用函数"></a>分支切换时清除遗留副作用函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data=&#123;<span class="attr">ok</span>:<span class="literal">true</span>,<span class="attr">text</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line">effect(<span class="function"><span class="keyword">function</span> <span class="title">effectFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerText=obj.ok?obj.text:<span class="string">&#x27;not&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当obj.ok改为false时，此时obj.text不会被读取，只会触发obj.ok的读取操作，<strong>理想情况下副作用函数effectFn不应该被字段obj.text所对应的依赖集合收集，</strong>然而，整个依赖关系仍然保持，则单修改obj.text会重新执行副作用函数，这是不应该的，解决这个问题<strong>，需要在每次副作用函数执行时，把它从所有与之关联的依赖集合中删除</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//当effectFn执行，将其设置为当前激活的副作用函数</span></span><br><span class="line">        activeEffect=effectFn</span><br><span class="line">        fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//activeEffect.dep用来存储所有与该副作用函数相关联的依赖集合</span></span><br><span class="line">    effectFn.deps=[]</span><br><span class="line">    <span class="comment">//执行副作用函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bucket = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="comment">//在get拦截函数内调用track函数追踪变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//禁止追踪时直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!activeEffect || !shouldTrack) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> depsMap = bucket.get(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    bucket.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.get(key);</span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">    depsMap.set(key, (deps = <span class="keyword">new</span> <span class="built_in">Set</span>()));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//把当前激活的副作用函数添加到依赖集合deps中</span></span><br><span class="line">  deps.add(activeEffect);</span><br><span class="line">  <span class="comment">//将其添加到activeEffect.deps数组中</span></span><br><span class="line">  activeEffect.deps.push(deps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//避免副作用函数产生遗留</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params">effectfn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//遍历副作用函数的依赖集合数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; effectfn.deps.length; i++) &#123;</span><br><span class="line">    <span class="comment">//deps是依赖集合</span></span><br><span class="line">    <span class="keyword">let</span> deps = effectfn.deps[i];</span><br><span class="line">    <span class="comment">//将该副作用函数从相关的依赖集合中移除</span></span><br><span class="line">    deps.delete(effectfn);</span><br><span class="line">  &#125;</span><br><span class="line">  effect.deps.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解决无限循环"><a href="#解决无限循环" class="headerlink" title="解决无限循环"></a>解决无限循环</h2><p>但是这样会引起无限循环，在trigger函数中，我们遍历effects集合，执行副作用函数，当副作用函数执行,cleanup清除，就是从effects集合中将当前执行的副作用函数删除，但是副作用函数的执行又会导致其重新被收集到集合中华，造成无限循环，<strong>可以构造另外一个Set集合并遍历它</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = bucket.get(target);</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> effects = depsMap.get(key);</span><br><span class="line">  <span class="keyword">const</span> effectsToRun = <span class="keyword">new</span> <span class="built_in">Set</span>(effects);</span><br><span class="line">  </span><br><span class="line">  effects &amp;&amp;</span><br><span class="line">    effects.forEach(<span class="function">(<span class="params">effectfn</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (activeEffect != effectfn) &#123;</span><br><span class="line">        <span class="comment">//只有当trigger触发执行的副作用函数和当前正在执行的副作用函数不相同时才触发执行，如果副作用函数中执行obj.foo++,则会读取obj.foo的值又会设置obj.foo的值，track函数操作将副作用收集到桶中，trigger函数将副作用函数拿出来来执行，上一个副作用函数还没执行完毕就要执行下一次，否会出现栈溢出，</span></span><br><span class="line">        effectsToRun.add(effectfn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  effectsToRun.forEach(<span class="function">(<span class="params">effectfn</span>) =&gt;</span> effectfn());</span><br><span class="line">  <span class="comment">//effect&amp;&amp;effect.forEach(fn=&gt;fn())//会产生无限执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套effect与effect栈：<br>当在组件Foo中渲染另一个组件，会发生effect嵌套：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Bar=&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Foo=&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Bar</span>/&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就发生了effect嵌套：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    Foo.render()</span><br><span class="line">    <span class="comment">//嵌套</span></span><br><span class="line">    effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        Bar.render()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然而，如果只是用activeEffect来存储通过effect函数注册的副作用函数，这意味着任意时刻activeEffect所存储的副作用函数只有一个，当副作用函数发生嵌套时，内层副作用函数的执行会覆盖activeEffect的值，并且永远不会恢复到原来的值，为了解决这个问题，我们需要<strong>一个副作用函数栈effectStack，在副作用函数执行时，将当前副作用函数入栈，待副作用函数执行完毕将其从栈中弹出，并始终让activeEffect指向栈顶的副作用函数，这样就能做到一个响应式数据只会收集直接读取其值的副作用函数</strong>，而不会出现互相影响的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用一个全局变量存储被注册的副作用函数</span></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="comment">//副作用函数栈,解决effect函数嵌套时，内层副作用覆盖activeEffect的值</span></span><br><span class="line"><span class="keyword">let</span> effectStack = [];</span><br><span class="line"><span class="comment">//options选项可以实现调度执行，懒执行等</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> effectfn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//调用cleanup完成清除工作</span></span><br><span class="line">    cleanup(effectfn);</span><br><span class="line">    <span class="comment">//副作用函数入栈</span></span><br><span class="line">    effectStack.push(effectfn);</span><br><span class="line">    <span class="comment">//当effectfn执行时，将其设置为当前激活的副作用函数</span></span><br><span class="line">    activeEffect = effectfn;</span><br><span class="line">    <span class="comment">//副作用函数执行完毕，出栈</span></span><br><span class="line">    <span class="keyword">const</span> res = fn();</span><br><span class="line">    effectStack.pop();</span><br><span class="line">    <span class="comment">//把activeEffect还原为之前的值</span></span><br><span class="line">    activeEffect = effectStack[effectStack.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//activeEffect.deps用来存储所有与该副作用函数相关联的依赖集合</span></span><br><span class="line">  effectfn.deps = [];</span><br><span class="line">  <span class="keyword">if</span> (!options.lazy) &#123;</span><br><span class="line">    effectfn();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effectfn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一个响应式系统：&quot;&gt;&lt;a href=&quot;#一个响应式系统：&quot; class=&quot;headerlink&quot; title=&quot;一个响应式系统：&quot;&gt;&lt;/a&gt;一个响应式系统：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;当读取操作发生时，将副作用函数收集到桶里&lt;/li&gt;
&lt;li&gt;当设置操作发生时，从</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue3编译优化</title>
    <link href="https://coloey.github.io/2022/11/17/Vue3%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/"/>
    <id>https://coloey.github.io/2022/11/17/Vue3%E7%BC%96%E8%AF%91%E4%BC%98%E5%8C%96/</id>
    <published>2022-11-17T13:25:00.000Z</published>
    <updated>2022-11-18T12:10:51.749Z</updated>
    
    <content type="html"><![CDATA[<p>编译优化指的是编译器将模板编译为渲染函数的过程中，尽可能多的提取关键信息，并以此指导生成最优代码的过程，优化的方向主要是<strong>区分动态内容和静态内容，并针对不同的内容采用不同的优化策略</strong></p><h1 id="动态节点收集与补丁标志："><a href="#动态节点收集与补丁标志：" class="headerlink" title="动态节点收集与补丁标志："></a>动态节点收集与补丁标志：</h1><p>Vue2中：渲染器在运行时得不到足够的信息，传统diff算法无法利用编译时提取得到的关键信息，这导致渲染器在运行时不可能去做相关优化</p><p>Vue3:<strong>会将编译时得到的关键信息附着在它生成的虚拟DOM上，这些信息会通过虚拟DOM传递给渲染器</strong>，最终渲染器会因为这些关键信息执行“快捷路径”，提升性能</p><p>传统虚拟DOM：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>.</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;foo&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加了patchFlag:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>.</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;foo&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="attr">patchFlag</span>:<span class="number">1</span>&#125;<span class="comment">//动态节点</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>patchFlag属性就是补丁标志。理解为一系列数字标记，不同数字值的不同赋予它不同意义：</p><p>1:代表节点有动态的textContent</p><p>2：代表元素有动态class绑定</p><p>3:代表元素有动态style绑定</p><p>…</p><p>我们可以在虚拟结点的创建阶段，将它的动态子节点提取出来，并将其存储到该虚拟结点的dynamicChildren中,与普通虚拟节点比较，它多出了一个dynamicChildren,把含有该属性的虚拟节点称为块，即Block,一个Block还需要可以收集它的所有动态子节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PatchFlags=&#123;</span><br><span class="line">    <span class="attr">TEXT</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">CLASS</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">STYLE</span>:<span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vnode=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>.</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;foo&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="attr">patchFlag</span>:<span class="number">1</span>&#125;<span class="comment">//动态节点</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//将children中的动态节点提取到dynamicChildren数组</span></span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="attr">patchFlag</span>:PatchFlags.TEXT&#125;<span class="comment">//动态节点</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="收集所有动态子节点："><a href="#收集所有动态子节点：" class="headerlink" title="收集所有动态子节点："></a>收集所有动态子节点：</h1><p>在渲染函数内，对createVNode的函数的调用是层层嵌套，并且函数的执行顺序是内层先执行，外层后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> createVNode(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">        createVNode(<span class="string">&#x27;div&#x27;</span>,&#123;&#125;,[</span><br><span class="line">            ...</span><br><span class="line">        ])</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当外层createVNode函数执行时，内层的createVNode已经执行完毕，因此，为了让外层的Block结点能够收集到内层结点，就需要一个栈结构的数据来临时存储内层的动态节点，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态节点栈：临时存储内层的动态节点</span></span><br><span class="line"><span class="keyword">const</span> dynamicChildrenStack = []</span><br><span class="line"><span class="comment">//当前动态节点的集合</span></span><br><span class="line"><span class="keyword">let</span> currentDynamicChildren = <span class="literal">null</span></span><br><span class="line"><span class="comment">//openBlock用来创建一个新的动态节点集合,将currentDynamicChildren初始化为空数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openBlock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dynamicChildrenStack.push((currentDynamicChildren=[]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//closeBlock用来将通过openBlock创建的动态节点集合从栈中弹出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeBlock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    currentDynamicChildren = dynamicChildrenStack.pop()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在createVNode函数内部，检测节点是否存在补丁标志，如果存在，则说明该节点是动态节点，将其添加到当前动态节点集合currentDynamicChildren中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createVNode</span>(<span class="params">tag,props,children,flags</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> key = props &amp;&amp; props.key</span><br><span class="line">    props &amp;&amp; <span class="keyword">delete</span> props.key</span><br><span class="line">    <span class="keyword">const</span> vnode = &#123;</span><br><span class="line">        tag,</span><br><span class="line">        props,</span><br><span class="line">        children,</span><br><span class="line">        key,</span><br><span class="line">        <span class="attr">patchFlags</span>: flags</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> flags !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; currentDynamicChildren) &#123;</span><br><span class="line">        <span class="comment">//动态节点，将其添加到当前动态节点集合中</span></span><br><span class="line">        currentDynamicChildren.push(vnode)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//使用createBlock代替createNode来创建Block</span></span><br><span class="line">    <span class="comment">//每次调用createBlcok之前先调用openBlock</span></span><br><span class="line">    <span class="keyword">return</span> (openBlock(),createBlock(<span class="string">&#x27;div&#x27;</span>,<span class="literal">null</span>,[</span><br><span class="line">        createVNode(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="attr">class</span>: <span class="string">&#x27;foo&#x27;</span>&#125;,<span class="literal">null</span>,<span class="number">1</span>),</span><br><span class="line">        createVNode(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="attr">class</span>:<span class="string">&#x27;bar&#x27;</span>&#125;,<span class="literal">null</span>)</span><br><span class="line">    ]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBlock</span>(<span class="params">tag,props,children</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//block本质是一个vnode</span></span><br><span class="line">    <span class="keyword">const</span> block = createVNode(tag,props,children)</span><br><span class="line">    <span class="comment">//内层的createNode函数已经执行完毕，这里的currentDynamicChildren存储的就是属于当前Block的所有动态子节点</span></span><br><span class="line">    block.dynamicChldren = currentDynamicChildren</span><br><span class="line">    <span class="comment">//关闭block</span></span><br><span class="line">    closeBlock()</span><br><span class="line">    <span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用逗号运算符保证渲染函数的返回值仍然是VNode对象，任何作为Block的节点都应该使用createBlock函数完成虚拟节点创建，由于createVNode函数和createBlock函数时由内向外，因此，当createBlock执行时，内层所有createVNode函数已经执行完毕，currentDynamicChildren存储的就是当前Block的所有动态子节点，将currentDynamicChildren赋值给dynamicChldren,完成了动态子节点的收集</p><h1 id="渲染器运行时支持："><a href="#渲染器运行时支持：" class="headerlink" title="渲染器运行时支持："></a>渲染器运行时支持：</h1><p>优先检测虚拟DOM是否存在动态节点集合，即dynamicChildren数组，如果存在，直接调用patchBlockChildren函数完成更新，这样，渲染器只会更新动态节点，而跳过所有静态结点，<strong>进行针对性的靶向更新</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchElement</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el=n1.el=n2.el</span><br><span class="line">    <span class="keyword">const</span> oldProps = n1.props</span><br><span class="line">    <span class="keyword">const</span> newProps = n2.props</span><br><span class="line">    <span class="keyword">if</span>(n2.patchFlags) &#123;</span><br><span class="line">        <span class="comment">///靶向更新</span></span><br><span class="line">        <span class="keyword">if</span>(n2.patchFlags===<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//只更新Text</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n2.patchFlags===<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//更新class</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n2.patchFlags===<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//全量更新</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> newProps) &#123;</span><br><span class="line">                <span class="keyword">if</span>(newProps[key]!==oldProps[key]) &#123;</span><br><span class="line">                    patchProps(el,key,oldProps[key],newProps[key])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> oldProps) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!(key <span class="keyword">in</span> newProps))&#123;</span><br><span class="line">                    patchProps(el,key,oldProps[key],<span class="literal">null</span>)<span class="comment">//卸载</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用patchChildren处理children</span></span><br><span class="line">    patchChilren(n1,n2,el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于Block会收集所有动态子节点，所以对动态子节点的操作时忽略DOM层级结构的，会带来额外的问题，即v-if,v-for等结构化指令会影响DOM层级结构，使之不稳定，会间接导致Block树的对比算法失效，解决办法就是让带有v-if和v-for等指令的结点也作为Block角色，</p><p>v-if指令的结点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">v-if</span>=<span class="string">&quot;foo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123;a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当foo为true或false,block收集到的动态节点均是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> block = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>: [</span><br><span class="line">        &#123;<span class="attr">tag</span>: <span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>: ctx.a,<span class="attr">patchFlags</span>:<span class="number">1</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Diff中就不会做更新，然而更新前后标签不一样，不做更新会产生bug,结构化指令导致更新前后模板的结构发生变化，即模板结构不稳定，因此需要让v-if/v-else等结构化指令的结点也作为Block角色</p><p>即上面这段模板会构成一颗Block树：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Block(div)</span><br><span class="line">-Block(Section v-<span class="keyword">if</span>)</span><br><span class="line">-Block(div v-<span class="keyword">else</span>)</span><br></pre></td></tr></table></figure><p>父级Block除了会收集动态子节点外，也会收集子Block,因此两个子Block将作为父Block的动态节点被收集到父级Block的dynamicChildren数组中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> block =&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        <span class="comment">//Block(section v-if)或者Block(div v-else),key值根据不同Block发生变化</span></span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;section&#x27;</span>,&#123;<span class="attr">key</span>:<span class="number">0</span>&#125;,<span class="attr">dynamicChildren</span>:[...]&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-for指令的结点：</p><p>下面的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;bar&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有最外层的div标签作为Block:</p><p>更新前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prevBlock = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.foo,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> prevBlock = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.foo,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新前后的block动态节点个数不一致，为了让DOM树有稳定的结构，让带有v-for指令的标签也作为Block角色，使用类型为Fragment的结点来表达v-for指令的渲染结果，并作为Block角色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> block = &#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">dynamicChildren</span>: [</span><br><span class="line">        <span class="comment">//这是一个Block,它有dynamicChildren</span></span><br><span class="line">        &#123;<span class="attr">tag</span>:Fragment,<span class="attr">dynamicChildren</span>:[<span class="comment">/*v-for结点*/</span>]&#125;</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.foo,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;i&#x27;</span>,<span class="attr">children</span>:ctx.bar,<span class="number">1</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而Fragment本身收集的动态节点依然会结构不稳定，就是更新前后一个block的dynamicChildren数组中收集的动态节点数量或顺序不一致，导致我们无法直接进行靶向更新，只能用传统diff算法</p><h1 id="静态提升："><a href="#静态提升：" class="headerlink" title="静态提升："></a>静态提升：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hoist1=createVNode(<span class="string">&#x27;p&#x27;</span>,<span class="literal">null</span>,<span class="string">&#x27;static text&#x27;</span>),</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (openBlock(),createBlock(<span class="string">&#x27;div&#x27;</span>,<span class="literal">null</span>,[</span><br><span class="line">        hoist1,</span><br><span class="line">        creatVNode(<span class="string">&#x27;p&#x27;</span>,nulll,ctx.title,<span class="number">1</span>)</span><br><span class="line">    ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在渲染函数内只会持有对静态结点的引用，当响应式数据变化，是的渲染函数重新执行时，并不会重新创建静态的虚拟结点，避免了额外的性开销</p><h1 id="预字符串化："><a href="#预字符串化：" class="headerlink" title="预字符串化："></a>预字符串化：</h1><p>静态提升的虚拟节点或虚拟节点树本身是静态的，可以将其预字符串化：</p><p>比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hoistStatic=createStaticVNode(<span class="string">&#x27;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(openBlock(),createBlock(<span class="string">&#x27;div&#x27;</span>,<span class="literal">null</span>,[</span><br><span class="line">        hoistStatic</span><br><span class="line">    ]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>大块的静态内容可以通过innerHTML进行设置，性能上有优势</li><li>减少创建虚拟节点产生的性能开销和内存占用</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>除了Block和补丁标志，Vue3还在编译性能上做了其他优化：</p><ul><li>静态提升：把纯静态的结点提升到渲染函数外，渲染函数内只会持有对静态结点的引用，当响应式数据变化，使得渲染函数重新执行时，并不会重新创建静态的虚拟结点，避免了额外的性开销</li><li>预字符串化：在静态提升基础上，对静态结点进行字符串化，这样能减少创建虚拟节点产生的性能开销和内存占用，大块的静态内容可以通过innerHTML进行设置</li><li>缓存内联事件处理函数：避免造成不必要的组件更新</li><li>v-once指令：代码中存在setBlockTracking(-1)函数调用，用来暂停动态结点的收集，<strong>也就是说使用v-once包裹的动态节点不会被父级Block收集，被v-once包裹的动态节点在组件更新时，不会参与DIff操作</strong>，缓存全部或者部分虚拟节点，避免组件更新时重新创建虚拟DOM带来的性能开销，也可以避免无用的Diff操作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编译优化指的是编译器将模板编译为渲染函数的过程中，尽可能多的提取关键信息，并以此指导生成最优代码的过程，优化的方向主要是&lt;strong&gt;区分动态内容和静态内容，并针对不同的内容采用不同的优化策略&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;动态节点收集与补丁标志：&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>keepAlive原理</title>
    <link href="https://coloey.github.io/2022/11/16/keepAlive%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/16/keepAlive%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-16T09:53:28.000Z</published>
    <updated>2022-11-16T16:55:42.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p>将被KeepAlive的组件从原容器搬运到另一个隐藏的容器中，实现“假卸载“，当被搬运到隐藏容器中的组件需要再次被挂载时，我们也不能执行真正的挂载逻辑，而是把组件从隐藏容器中再搬运到原容器，这个过程对应到组件的生命周期，就是activated和deactivated</p><p>一个简单的KeepAlive组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> KeepAlive = &#123;</span><br><span class="line">  <span class="comment">//keepAlive组件独有的属性，用作标识</span></span><br><span class="line">  <span class="attr">__isKeepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; slots &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个缓存对象</span></span><br><span class="line">    <span class="comment">//key:vnode.type</span></span><br><span class="line">    <span class="comment">//value:vnode</span></span><br><span class="line">    <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">//当前keepAlive组件的实例</span></span><br><span class="line">    <span class="keyword">const</span> instance = currentInstance;</span><br><span class="line">    <span class="comment">//对于KeepAlive组件来说，它的实例上有存在特殊的keepAliveCtx对象，该对象由渲染器注入</span></span><br><span class="line">    <span class="comment">//该对象会暴露渲染器得到一些内部方法，其中move函数用来将一段DOM移动到另一个容器中</span></span><br><span class="line">    <span class="keyword">const</span> &#123; move, createElement &#125; = instance.KeepAliveCtx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建隐藏容器</span></span><br><span class="line">    <span class="keyword">const</span> storageContainer = createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//keepAlive组件实例上会被添加两个内部函数，分别是_deActivate和_activate</span></span><br><span class="line">    <span class="comment">//这两个函数会在渲染器中被调用</span></span><br><span class="line">    instance._deActivate = <span class="function">(<span class="params">vnode</span>) =&gt;</span> &#123;</span><br><span class="line">      move(vnode, storageContainer);</span><br><span class="line">    &#125;;</span><br><span class="line">    instance._activate = <span class="function">(<span class="params">vnode, container, anchor</span>) =&gt;</span> &#123;</span><br><span class="line">      move(vnode, container, anchor);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//keepAlive的默认插槽就是要被keepAlive的组件</span></span><br><span class="line">      <span class="keyword">let</span> rawVNode = slots.default();</span><br><span class="line">      <span class="comment">//如果不是组件，直接渲染，因为非组件的虚拟结点无法被keepAlive</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> rawVNode.type !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> rawVNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在挂载时先获取缓存的组件vnode</span></span><br><span class="line">      <span class="keyword">const</span> cachedVNode = cache.get(rawVNode.type);</span><br><span class="line">      <span class="keyword">if</span> (cachedVNode) &#123;</span><br><span class="line">        <span class="comment">//如果有缓存的内容，说明不应该执行挂载，应该执行激活</span></span><br><span class="line">        <span class="comment">//继承组件实例</span></span><br><span class="line">        rawVNode.component = cachedVNode.component;</span><br><span class="line">        <span class="comment">//在vnode上添加keptAlive属性，标记为true,避免渲染器重新挂载</span></span><br><span class="line">        rawVNode.keptAlive = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果没有缓存，则将其添加到缓存中，这样下次激活组件时不会执行新的挂载动作</span></span><br><span class="line">        cache.set(rawVNode.type, rawVNode);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//在组件vnode上添加shouldKeepAlive属性，并标记为true,避免渲染器将组件卸载</span></span><br><span class="line">      rawVNode.shouldKeepAlive = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">//将keepAlive组件的实例也添加到vNode上，以便在渲染器中访问</span></span><br><span class="line">      rawVNode.KeepAliveInstance = instance;</span><br><span class="line">      <span class="comment">//渲染组件 vnode</span></span><br><span class="line">      <span class="keyword">return</span> rawVNode;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>KeepAlive组件会对内部组件进行操作，主要是在内部组件的vnode对象上添加一些标记属性，以便渲染器能够执行特定的逻辑，这些标记属性包括:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vnode.type === Fragment) &#123;</span><br><span class="line">        vnode.children.forEach(<span class="function"><span class="params">c</span>=&gt;</span>unmount(c))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> vnode.type === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//vnode.shouldAlive是一个布尔值，用来标识该组件是否应该被KeepAlive</span></span><br><span class="line">        <span class="keyword">if</span>(vnode.shouldKeepAlive) &#123;</span><br><span class="line">            <span class="comment">//对于需要被keppAlive的组件，我们不应该直接卸载，而应该调用该组件的父组件，即keepAlive的父组件_deActive函数使其失活</span></span><br><span class="line">            vnode.KeepAliveInstance._deActivate(vnode)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            unmount(vnode.component.subTree)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> parent = vnode.el.parentNode</span><br><span class="line">    <span class="keyword">if</span>(parent) &#123;</span><br><span class="line">        parent.removeChild(vnode.el)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shouldKeepAlive:该属性会被添加到内部组件的vnode对象，这样当渲染器卸载内部组件时，可以通过检查该属性得知，内部组件需要被KeepAlive,于是渲染器不会真的卸载内部组件，而是会调用_deActivate函数完成搬运工作</p><p>keptAlive:内部组件如果已经被缓存，则还会为其添加一个keptAlive标记，这里当内部之间需要重新渲染时，渲染器并不会重新挂载它，而会将其激活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">n1,n2,container,anchor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n1 &amp;&amp; n1.type !== n2.type) &#123;</span><br><span class="line">        unmount(n1)</span><br><span class="line">        n1=<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123;type&#125; = n2</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === Text)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === Fragment)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> type === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> type === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n1) &#123;</span><br><span class="line">            <span class="comment">//如果该组件已经被keepAlive,则不会重新挂载它，而是会调用_active来激活它</span></span><br><span class="line">            <span class="keyword">if</span>(n2.keptAlive)&#123;</span><br><span class="line">                n2.keepAliveInstance._activate(n2,container,anchor)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                mountComponent(n2,container,anchor)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            patchComponent(n1,n2,anchor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失活的本质就是将组件所渲染的内容移动到隐藏容器中，激活的本质是将组件所渲染的内容搬运到原来的容器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//涉及move的函数由渲染器注入的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span>(<span class="params">vnode,container,anchor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">const</span> instance = &#123;</span><br><span class="line">        state,</span><br><span class="line">        <span class="attr">props</span>: shallowReactive(props),</span><br><span class="line">        <span class="attr">isMounted</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">subTree</span>: <span class="literal">null</span>,</span><br><span class="line">        slots,</span><br><span class="line">        <span class="attr">mounted</span>: [],</span><br><span class="line">        <span class="comment">//只有KeepAlive组件的实例下会有keepAliveCtx属性</span></span><br><span class="line">        <span class="attr">keepAliveCtx</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查当前要挂载的组件是否是KeepAlive组件</span></span><br><span class="line">    <span class="keyword">const</span> isKeepAlive = vnode.type.__isKeepAlive</span><br><span class="line">    <span class="keyword">if</span>(isKeepAlive) &#123;</span><br><span class="line">        <span class="comment">//在KeepAlive组件实例上添加keepAliveCtx对象</span></span><br><span class="line">        instance.keepAliveCtx = &#123;</span><br><span class="line">            <span class="comment">//move函数用来移动一段vnode</span></span><br><span class="line">            <span class="function"><span class="title">move</span>(<span class="params">vnode,container,anchor</span>)</span> &#123;</span><br><span class="line">                <span class="comment">//本质上是将组件渲染的内容移动到指定容器中，即隐藏容器中</span></span><br><span class="line">                insert(vnode.component.subTree.el,container,anchor)</span><br><span class="line">            &#125;,</span><br><span class="line">            createElement</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用LRU算法实现缓存管理，可以为缓存设置最大容量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:max</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;dynamicComp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>LRU算法的思想就是会把当前访问（或渲染）的组件作为最新一次渲染的组件，移动到队头，而如果队列容量不够，会把最久未被使用的组件即队尾组件移出队列，也可以自定义缓存实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">KeepAlive</span> <span class="attr">:cache</span>=<span class="string">&quot;cache&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;dynamicComp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">KeepAlive</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;原理：&lt;/h1&gt;&lt;p&gt;将被KeepAlive的组件从原容器搬运到另一个隐藏的容器中，实现“假卸载“，当被搬运到隐藏容器中的组件需要再次被挂载时，我们也不能</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>b站前端日常实习一面</title>
    <link href="https://coloey.github.io/2022/11/12/b%E7%AB%99%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <id>https://coloey.github.io/2022/11/12/b%E7%AB%99%E5%89%8D%E7%AB%AF%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</id>
    <published>2022-11-12T06:51:38.000Z</published>
    <updated>2022-11-12T06:58:31.565Z</updated>
    
    <content type="html"><![CDATA[<p>自我介绍</p><p>1.css选择器优先级</p><p>2.visibility:none,opacity:0,display:none区别 如果设置还能进行事件绑定和监听吗</p><p>3.闭包</p><p>4.作用域链</p><p>5 深拷贝有几种实现方法</p><p>差点写错了</p><p>6.遇到过内存泄漏问题吗？怎么解决</p><p>7.浏览器垃圾回收机制</p><p>之前看过V8的垃圾回收机制，就回答了那部分</p><p>8.vue看过哪些源码？答：响应式部分</p><p>9 讲讲vue2 vue3响应式原理</p><p>10 vue2中computed有用到watcher吗?</p><p>我了解的是vue3的源码，用到了副作用函数和getter，本质上也是发布订阅模式…</p><p>11 vue3diff 算法有什么优化？</p><p>讲了Vue2和vue3的diff算法以及优化原理</p><p>12 vue3中的patchFlag了解吗 不是很了解</p><p>13 你的项目用的gulp做打包 是基于什么想法用的gulp</p><p>14 了解vite snowpack吗</p><p>不是很了解</p><p>15 计网还记得哪些？http https tcp udp</p><p>16 讲讲http和https</p><p>17 https还有什么需要缺陷</p><p>回答了http1,http2,http3的区别 </p><p>18 http3还了解哪些</p><p>就讲了Quic协议解决可靠传输问题和运输层用UDP实现</p><p>问：还有吗？ 了解的只有这些</p><p>19 深挖Quic协议 不是很了解</p><p>20 实习项目中做了什么</p><p>21 实习项目中遇到了哪些困难</p><p>22 怎么在组件中实现的国际化</p><p>23 写一个二叉树的前序遍历 非递归写法</p><p>反问：学习建议</p><p>回答：计网挺熟悉的 你项目中用的gulp做打包，在项目中用哪些构建工具要做一个系统的考察</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自我介绍&lt;/p&gt;
&lt;p&gt;1.css选择器优先级&lt;/p&gt;
&lt;p&gt;2.visibility:none,opacity:0,display:none区别 如果设置还能进行事件绑定和监听吗&lt;/p&gt;
&lt;p&gt;3.闭包&lt;/p&gt;
&lt;p&gt;4.作用域链&lt;/p&gt;
&lt;p&gt;5 深拷贝有几种实现方法&lt;</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue各阶段数据可使用情况</title>
    <link href="https://coloey.github.io/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/"/>
    <id>https://coloey.github.io/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</id>
    <published>2022-11-10T01:53:25.000Z</published>
    <updated>2022-11-10T02:04:09.573Z</updated>
    
    <content type="html"><![CDATA[<p>加载顺序：</p><p><img src="/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/1-16680454078781.png"></p><p>在new Vue()时，vue\src\core\instance\index.js里面的_init()初始化各个功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">  !(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vue)</span><br><span class="line">) &#123;</span><br><span class="line">  warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>._init(options) <span class="comment">//初始化各个功能</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在_init()中是这样一个执行顺序，initState是在beforeCreate和created之间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">initLifecycle(vm)</span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  initInjections(vm) <span class="comment">// resolve injections before data/props</span></span><br><span class="line">  initState(vm) <span class="comment">//初始化</span></span><br><span class="line">  initProvide(vm) <span class="comment">// resolve provide after data/props</span></span><br><span class="line">  callHook(vm, <span class="string">&#x27;created&#x27;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在initState()中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (opts.props) initProps(vm, opts.props)<span class="comment">//初始化Props</span></span><br><span class="line"><span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)<span class="comment">//初始化methods</span></span><br><span class="line"><span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">  initData(vm)&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)&#125;<span class="comment">//初始化data</span></span><br><span class="line"><span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)<span class="comment">//初始化computed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以Props，methods,data和computed的初始化都是在beforeCreated和created之间完成的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;加载顺序：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/11/10/Vue%E5%90%84%E9%98%B6%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%8F%AF%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/1-166804</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>from memory cache与from disk cache</title>
    <link href="https://coloey.github.io/2022/11/08/from-memory-cache%E4%B8%8Efrom-disk-cache/"/>
    <id>https://coloey.github.io/2022/11/08/from-memory-cache%E4%B8%8Efrom-disk-cache/</id>
    <published>2022-11-08T12:02:47.000Z</published>
    <updated>2022-11-08T12:18:47.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的开发者工具的Network的Size栏出现三种情况："><a href="#浏览器的开发者工具的Network的Size栏出现三种情况：" class="headerlink" title="浏览器的开发者工具的Network的Size栏出现三种情况："></a>浏览器的开发者工具的Network的Size栏出现三种情况：</h1><ul><li>from memory cache</li><li>from disk cache</li><li>资源本身大小(比如13.6k)</li></ul><h1 id="二三级缓存原理："><a href="#二三级缓存原理：" class="headerlink" title="二三级缓存原理："></a>二三级缓存原理：</h1><p>1.先查找内存，如果内存中存在，从内存中加载</p><p>2.如果内存中未查找到，选择硬盘获取，如果硬盘中有，从硬盘中加载</p><p>3.如果硬盘中未查找到，就进行网络请求</p><p>4.加载到的资源缓存到硬盘和内存</p><h1 id="http状态码及区别"><a href="#http状态码及区别" class="headerlink" title="http状态码及区别"></a>http状态码及区别</h1><ul><li>200 from memory cache:不访问服务器，一般已经加载过该资源且缓存在了内存中，直接从内存中读取缓存，浏览器关闭后，数据将不存在（资源被释放掉），<strong>再次打开相同的页面时，不会出现from memory cache，一般脚本，字体，图片会存在内存中</strong></li><li>200 from disk cache:不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，<strong>此资源不会随着该页面的关闭而释放掉，下次打开仍然是from disk cache，一般非脚本存在其中，如css</strong></li><li>200 资源大小数值：从服务器下载最新资源</li><li>304 Not Modified:访问服务器，发现数据没有更新，服务器返回此状态码，然后从缓存中获取数据</li></ul><h1 id="几种状态执行顺序："><a href="#几种状态执行顺序：" class="headerlink" title="几种状态执行顺序："></a>几种状态执行顺序：</h1><p>例子：加载一种资源：访问-&gt;200-&gt;退出浏览器-&gt;再进来-&gt;200(from disk cache)-&gt;刷新-&gt;200(from memory cache)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器的开发者工具的Network的Size栏出现三种情况：&quot;&gt;&lt;a href=&quot;#浏览器的开发者工具的Network的Size栏出现三种情况：&quot; class=&quot;headerlink&quot; title=&quot;浏览器的开发者工具的Network的Size栏出现三种情况：&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>组件设计原则</title>
    <link href="https://coloey.github.io/2022/11/08/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://coloey.github.io/2022/11/08/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2022-11-08T09:48:12.000Z</published>
    <updated>2022-11-08T09:48:12.718Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端工程化-CI/CD</title>
    <link href="https://coloey.github.io/2022/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-CI-CD/"/>
    <id>https://coloey.github.io/2022/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-CI-CD/</id>
    <published>2022-11-08T09:16:40.000Z</published>
    <updated>2022-11-08T12:53:40.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h1><p>1.CI（Continuous integration,<strong>持续集成</strong>)</p><p>频繁地（一天多次）将代码集成到主干</p><p>2.CD(Continous delivery**,持续交付)**</p><p>持续集成的下一步，指的是，频繁将软件的新版本，交付给质量团队或者用户，以供评审，如评审通过，代码进入生产阶段，手动部署</p><p>3.CD(Continous deployment,<strong>持续部署</strong>)</p><p>持续交付的下一步，指的是，代码通过评审后，自动部署到生产环境</p><h1 id="意义："><a href="#意义：" class="headerlink" title="意义："></a>意义：</h1><h2 id="CI（持续集成）"><a href="#CI（持续集成）" class="headerlink" title="CI（持续集成）"></a>CI（持续集成）</h2><p>（1）<strong>快速发现错误</strong>，每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易</p><p>（2）<strong>防止分支大幅偏离主干</strong>，如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成</p><p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量</strong>，它的核心措施是，代码集成到主干之前，必须通过自动化测试，只要有一个测试用例失败，就不能集成</p><h2 id="CD（持续交付）"><a href="#CD（持续交付）" class="headerlink" title="CD（持续交付）"></a>CD（持续交付）</h2><p>保证不管怎么更新，软件是随时可以交付的</p><h2 id="CD（持续部署）"><a href="#CD（持续部署）" class="headerlink" title="CD（持续部署）"></a>CD（持续部署）</h2><p>保证代码在任何时刻都是可部署，可以进入生产阶段</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>开发者提交代码</p><h2 id="测试（第一轮）"><a href="#测试（第一轮）" class="headerlink" title="测试（第一轮）"></a>测试（第一轮）</h2><p>代码仓库commit操作配置钩子，只要提交代码合并进主干，就会跑自动化测试</p><p>三种测试：</p><p>单元测试：针对函数或模块的测试</p><p>集成测试：针对整体产品的某个功能的测试，又称功能测试</p><p>端对端测试：从用户界面直达数据库的全链路测试</p><h2 id="构建："><a href="#构建：" class="headerlink" title="构建："></a>构建：</h2><p>测试通过，代码即可进入主干，就算可以交付</p><p>交付后，就先进行构建，再进入第二轮测试</p><p>所谓构建，指的就是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式，JS脚本，图片）等</p><p>常用的构建工具：</p><p>·<a href="https://links.jianshu.com/go?to=http://jenkins-ci.org/">Jenkins</a></p><p>·<a href="https://links.jianshu.com/go?to=https://travis-ci.com/">Travis</a></p><p>·<a href="https://links.jianshu.com/go?to=https://www.codeship.io/">Codeship</a></p><p>·<a href="https://links.jianshu.com/go?to=http://stridercd.com/">Strider</a></p><h2 id="测试（第二轮）"><a href="#测试（第二轮）" class="headerlink" title="测试（第二轮）"></a>测试（第二轮）</h2><p>全面测试，单元测试和集成测试都会跑，有条件也要做端对端测试，所有测试以自动化为主，少数无法自动化的测试用例，人工跑</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过第二轮测试，当前代码就是一个可以直接部署的版本，将这个版本的所有文件打包存档，发到生产服务器，生产服务器将打包文件解包成本地的一个目录，再将允许路径的符号链接指向这个目录，然后重新启动应用</p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>一旦当前版本发送问题，就要回滚到上一个版本的构建结果，最简单的做法就是修改符号链接，指向上一个版本目录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h1&gt;&lt;p&gt;1.CI（Continuous integration,&lt;strong&gt;持续集成&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;频繁地（一天多次</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>YY直播日常实习</title>
    <link href="https://coloey.github.io/2022/11/08/YY%E7%9B%B4%E6%92%AD%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0/"/>
    <id>https://coloey.github.io/2022/11/08/YY%E7%9B%B4%E6%92%AD%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0/</id>
    <published>2022-11-08T08:43:51.000Z</published>
    <updated>2022-11-09T06:44:27.043Z</updated>
    
    <content type="html"><![CDATA[<p>1.实习负责的什么项目，项目中遇到了哪些困难 </p><p> 2.你讲到了Vue-i18n插件，设计插件的思想：x </p><p>  3.Vue中封装组件的思想 </p><p>  4.函数式编程的思想 x</p><p>  5.vue和vue3双向绑定原理，区别 </p><p> 6.Proxy的优点</p><p>  6.data中为什么返回函数比较好，不是对象 </p><p>  7.data中如果用对象，造成了数据污染，要怎么避免数据污染 x</p><p>组件复用造成了数据污染，那就只能避免组件的复用？</p><p>  8.vue方法中声明了对象没有响应式，怎么实现响应式 </p><p>  9.vue源码中，data,comouted,methods声明的顺序的是怎样的 x</p><p>  10.vue的生命周期 </p><p>  11.vue3的生命周期和vue2生命周期的不同点 </p><p>  12.讲讲keep-alive </p><p>  13.keep-alive的实现原理 </p><p>  14.你的项目中用到了组件库，讲讲前端工程化 </p><p>  15.tree-traking原理，怎么实现tree-shaking，tree-shaking怎么知道没用的代码 x</p><p>  16.前端中的CI/CD是怎样的流程 x</p><p>  17.了解抽象语法树AST吗 </p><p>  18.babel-loader原理讲讲 </p><p>  19.http缓存 </p><p>  20.如果浏览器中没有设置强缓存和协商缓存，浏览器会自动缓存吗 </p><p>  21.from disk和from memory的区别 x</p><p>  22.http和https的区别 </p><p>  还问了一些有些没想起来 </p><p>  反问：有点紧张，觉得我面试表现得怎么样 </p><p>  回答：看出来你有点紧张，很多东西原理了解的还不深入，但是整个前端体系比较全面，了解工程化知识，框架也熟悉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.实习负责的什么项目，项目中遇到了哪些困难 &lt;/p&gt;
&lt;p&gt; 2.你讲到了Vue-i18n插件，设计插件的思想：x &lt;/p&gt;
&lt;p&gt;  3.Vue中封装组件的思想 &lt;/p&gt;
&lt;p&gt;  4.函数式编程的思想 x&lt;/p&gt;
&lt;p&gt;  5.vue和vue3双向绑定原理，区别 &lt;/</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>手写instanceof</title>
    <link href="https://coloey.github.io/2022/11/02/%E6%89%8B%E5%86%99instanceof/"/>
    <id>https://coloey.github.io/2022/11/02/%E6%89%8B%E5%86%99instanceof/</id>
    <published>2022-11-02T12:11:11.000Z</published>
    <updated>2022-11-02T12:12:09.200Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left,right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = right.prototype</span><br><span class="line">    left = left.__proto__</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left)<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span>(left == prototype)<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        left = left.__proto__</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
    <category term="手撕代码" scheme="https://coloey.github.io/tags/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>hook原理</title>
    <link href="https://coloey.github.io/2022/11/01/hook%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/01/hook%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-01T07:55:12.000Z</published>
    <updated>2022-11-01T08:55:27.701Z</updated>
    
    <content type="html"><![CDATA[<p>hook就是解决函数组件没有state,生命周期，逻辑不能复用的一种解决方案</p><p>dispatcher</p><p>在真实hook中，组件mount时的hook和update时的hook来源于不同对象，这类对象在源码中称为dispatcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mount时的Dispatcher</span></span><br><span class="line"><span class="keyword">const</span> HooksDispatcherOnMount: Dispatcher = &#123;</span><br><span class="line">  <span class="attr">useCallback</span>: mountCallback,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: mountEffect,</span><br><span class="line">  <span class="attr">useImperativeHandle</span>: mountImperativeHandle,</span><br><span class="line">  <span class="attr">useLayoutEffect</span>: mountLayoutEffect,</span><br><span class="line">  <span class="attr">useMemo</span>: mountMemo,</span><br><span class="line">  <span class="attr">useReducer</span>: mountReducer,</span><br><span class="line">  <span class="attr">useRef</span>: mountRef,</span><br><span class="line">  <span class="attr">useState</span>: mountState,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update时的Dispatcher</span></span><br><span class="line"><span class="keyword">const</span> HooksDispatcherOnUpdate: Dispatcher = &#123;</span><br><span class="line">  <span class="attr">useCallback</span>: updateCallback,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: updateEffect,</span><br><span class="line">  <span class="attr">useImperativeHandle</span>: updateImperativeHandle,</span><br><span class="line">  <span class="attr">useLayoutEffect</span>: updateLayoutEffect,</span><br><span class="line">  <span class="attr">useMemo</span>: updateMemo,</span><br><span class="line">  <span class="attr">useReducer</span>: updateReducer,</span><br><span class="line">  <span class="attr">useRef</span>: updateRef,</span><br><span class="line">  <span class="attr">useState</span>: updateState,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可见，mount时调用的hook和update时调用的hook是两个不同的函数，在FunctionComponent render前，会根据FunctionComponent对应fiber的一下条件区分mount和update</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>并把不同情况对应的dispatcher赋值给全局变量ReactCurrentDispatcher的current属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReactCurrentDispatcher.current =</span><br><span class="line">    current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span> ? HookDispatcherOnMount : HooksDispatcherOnUpdate</span><br></pre></td></tr></table></figure><p>在FuntionComponent render时，会从ReactCurrentDispatcher.current（即当前dispatcher，则FunctionComponent render时调用的hook是不同函数）</p><p>Hook数据结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hook: Hook = &#123;</span><br><span class="line">    <span class="attr">memoizedState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseQueue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">queue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>memoizedState:</p><p>hook与FunctionComponent fiber都存在memoizedState属性：</p><p>fiber.memoizedState:FunctionComponent对应fiber保存的Hooks链表</p><p>hook.memoizedState:Hooks链表中保存的单一hook对应的数据</p><p>不同类型hook的memoizedState保存不同类型数据：</p><p>useState:对于const [state,updateState] = useState(initialState),memoizedState保存state的值</p><p>useReducer:对于const[state,dispatch]=useReducer(reducer,[]),memoizedState保存state的值</p><p>useEffect:memoizedState保存包含useEffect回调函数，依赖项等的链表数据结构effect,effect会保存在fiber.updateQueue</p><p>useRef:对于useRef(1),memoizedState保存{current:1}</p><p>useMemo:对于useMemo(callback,[depA]),memoizedState保存[callback,depA],与useMemo的区别是，useCallback保存的是callback函数本身，而useMemo保存的是callback函数的执行结果</p><p>有些hook没有memoizedState:</p><p>如useContext</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hook就是解决函数组件没有state,生命周期，逻辑不能复用的一种解决方案&lt;/p&gt;
&lt;p&gt;dispatcher&lt;/p&gt;
&lt;p&gt;在真实hook中，组件mount时的hook和update时的hook来源于不同对象，这类对象在源码中称为dispatcher&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>computed原理</title>
    <link href="https://coloey.github.io/2022/11/01/computed%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/01/computed%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-01T01:13:00.000Z</published>
    <updated>2022-11-01T03:50:37.575Z</updated>
    
    <content type="html"><![CDATA[<p>effect是用来注册副作用函数，同时它允许指定一些选项参数options,例如指定scheduler调度器控制副作用函数的执行时机和方式，先实现一个懒执行的副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn,options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup(effectFn)</span><br><span class="line">        activeEffect = effectFn</span><br><span class="line">        effectStack.push(effectFn)</span><br><span class="line">        fn()</span><br><span class="line">        effectStack.pop()</span><br><span class="line">        activeEffect = effectStack[effectStack.length-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    effectFn.options = options</span><br><span class="line">    effectFn.deps = []</span><br><span class="line">    <span class="comment">//只有非lazy才执行</span></span><br><span class="line">    <span class="keyword">if</span>(!options.lazy) &#123;</span><br><span class="line">        effectFn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将副作用函数作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> effectFn<span class="comment">//新增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了让副作用函数不立即执行的功能，将副作用函数effectFn作为effect函数的返回值，这就意味着当调用effect函数时，通过其返回值能够拿到对应的副作用函数，这样我们能够手动执行副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectFn = effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.foo)</span><br><span class="line">&#125;,&#123;<span class="attr">lazy</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">//手动执行副作用函数</span></span><br><span class="line">effectFn()</span><br></pre></td></tr></table></figure><p>如果把传递给effect的函数看做一个getter，那么这个getter函数可以返回任何值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectFn = effect(</span><br><span class="line"><span class="comment">//getter返回obj.foo和obj.bar</span></span><br><span class="line">    <span class="function">() =&gt;</span> obj.foo + obj.bar,</span><br><span class="line">    &#123; <span class="attr">lazy</span>: <span class="literal">true</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了手动执行副作用函数时就能拿到其返回值，改动effect函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn,options = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup(effectFn)</span><br><span class="line">        activeEffect = effectFn</span><br><span class="line">        effectStack.push(effectFn)</span><br><span class="line">        <span class="comment">//将fn执行结果存储到res</span></span><br><span class="line">        <span class="keyword">const</span> res = fn()</span><br><span class="line">        effectStack.pop()</span><br><span class="line">        activeEffect = effectStack[effectStack.length-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">//将res作为effectFn返回值</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    effectFn.options = options</span><br><span class="line">    effectFn.deps = []</span><br><span class="line">    <span class="keyword">if</span>(!options.lazy)&#123;</span><br><span class="line">        effectFn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> effectFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递给effect函数的参数fn才是真正的副作用函数，而effectFn是我们包装后的副作用函数，为了通过effectFn得到真正的副作用函数fn的执行结果，我们需要将其保存到res变量，然后将其作为effectFn函数的返回值</p><p>接下来就可以定义cmputed函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//把getter作为副作用函数，创建一个lazy的effect</span></span><br><span class="line">    <span class="keyword">const</span> effectFn = effect(getter,&#123;</span><br><span class="line">        <span class="attr">lazy</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="comment">//当读取value时才执行effectFn</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> effectFn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>computed函数接收一个getter函数作为参数，我们把getter函数作为副作用函数，用它创建一个lazy的effect,computed函数的执行会返回一个对象，该对象的value属性是一个访问器属性，只有当读取value值时，才执行effectFn并将结果作为返回值返回</p><p>使用computed函数创建一个计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data =&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;...&#125;)</span><br><span class="line"><span class="keyword">const</span> sumRes = computed(<span class="function">() =&gt;</span> obj.foo + obj.bar)</span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>当多次访问sumRes.value的值，会导致effectFn进行多次计算，即使obj.foo和obj,bar的值本身没有变化，利用闭包实现对值进行缓存的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//value用来缓存上一次计算的值</span></span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="comment">//dirty标志，用来标识是否需要重新计算值，为true意味着“脏”没需要计算</span></span><br><span class="line">    <span class="keyword">let</span> dirty = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> effectFn = effect(getter,&#123;</span><br><span class="line">        <span class="attr">lazy</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">            <span class="comment">//只有脏时才计算值，并将得到的值缓存到value</span></span><br><span class="line">            <span class="keyword">if</span>(dirty)&#123;</span><br><span class="line">                value = effectFn()</span><br><span class="line">                <span class="comment">//将dirty设置为false,下一次访问直接使用缓存到value中的值</span></span><br><span class="line">                dirty = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时改变obj.foo或者obj.bar,再访问sumRes.value会发现访问到的值没有发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">foo</span>: <span class="number">1</span>,<span class="attr">bar</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;...&#125;)</span><br><span class="line"><span class="keyword">const</span> sumRes = computed(<span class="function">() =&gt;</span> obj.foo+obj.bar)</span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br><span class="line">obj.foo++;</span><br><span class="line"><span class="comment">//再次访问得到的仍然是3</span></span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>这是因为，第一次访问sumRes.value的值后，变量dirty被设置为false,代表不需要计算，即使我们修改obj.foo的值，但只要dirty的值为false,就不会重新计算，所有导致我们得到错误的值，因此当obj.foo或者obj.bar的值发生改变时，只要dirty的值重置为true就可以，这时就用到scheduler选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">let</span> dirty = <span class="literal">true</span></span><br><span class="line">    cont effectFn = effect(getter, &#123;</span><br><span class="line">        <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="function"><span class="title">scheduler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dirty) &#123;</span><br><span class="line">                dirty = <span class="literal">true</span></span><br><span class="line">                <span class="comment">//当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应</span></span><br><span class="line">                trigger(obj,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span>(dirty)&#123;</span><br><span class="line">                value = effectFn()</span><br><span class="line">                dirty = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当读取value手动调用track函数进行追踪</span></span><br><span class="line">            track(obj,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当读取一个计算属性value，需要手动调用track函数，把计算属性返回的对象obj作为target,同时作为第一个参数传递给track函数，当计算属性所依赖的响应式数据变化时会立即调度函数，在调度函数内手动调用trigger函数触发响应即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;effect是用来注册副作用函数，同时它允许指定一些选项参数options,例如指定scheduler调度器控制副作用函数的执行时机和方式，先实现一个懒执行的副作用函数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>数组拍平</title>
    <link href="https://coloey.github.io/2022/10/30/%E6%95%B0%E7%BB%84%E6%8B%8D%E5%B9%B3/"/>
    <id>https://coloey.github.io/2022/10/30/%E6%95%B0%E7%BB%84%E6%8B%8D%E5%B9%B3/</id>
    <published>2022-10-30T12:04:41.000Z</published>
    <updated>2022-11-12T08:53:26.505Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i]))&#123;</span><br><span class="line">            res = res.concat(flatten(arr[i]))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
    <category term="手撕代码" scheme="https://coloey.github.io/tags/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>React合成事件机制</title>
    <link href="https://coloey.github.io/2022/10/30/React%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://coloey.github.io/2022/10/30/React%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2022-10-30T08:14:12.000Z</published>
    <updated>2022-10-30T08:16:52.195Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://juejin.cn/post/6955636911214067720#comment">https://juejin.cn/post/6955636911214067720#comment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转自&lt;a href=&quot;https://juejin.cn/post/6955636911214067720#comment&quot;&gt;https://juejin.cn/post/6955636911214067720#comment&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Js执行上下文和作用域链以及this</title>
    <link href="https://coloey.github.io/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/"/>
    <id>https://coloey.github.io/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/</id>
    <published>2022-10-29T13:31:37.000Z</published>
    <updated>2022-10-29T14:24:25.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js执行流程："><a href="#Js执行流程：" class="headerlink" title="Js执行流程："></a>Js执行流程：</h1><h2 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h2><h3 id="变量提升："><a href="#变量提升：" class="headerlink" title="变量提升："></a>变量提升：</h3><p><strong>是指在JavaScript代码执行过程中，JavaScript引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值，这个默认值就是我们熟悉的undefined</strong>。</p><h3 id="执行部分的代码"><a href="#执行部分的代码" class="headerlink" title="执行部分的代码"></a>执行部分的代码</h3><p>经过编译后，生成两部分内容：<strong>执行上下文和可执行代码</strong></p><p><strong>执行上下文包括变量环境，词法环境，外部引用Outer（指向外部的执行上下文）和this</strong>，一般包括三种：全局执行上下文，函数执行上下文（调用函数，函数内代码被编译，创建函数上下文，函数执行结束，上下文销毁），eval（使用eval函数时，eval的代码会被编译，并创建执行上下文）</p><p>执行上下文会被js引擎压入调用栈中，执行完毕后，会把执行上下文弹出栈</p><h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><p>Js引擎开始执行可执行代码，按照顺序一行行执行，当出现相同的变量和函数，会保存到执行上下文的变量环境中，<strong>一段代码如果定义了两个相同名字的函数，那么最终生效的是最后一个函数</strong>，而</p><h1 id="作用域和作用域链以及词法作用域"><a href="#作用域和作用域链以及词法作用域" class="headerlink" title="作用域和作用域链以及词法作用域"></a>作用域和作用域链以及词法作用域</h1><p><strong>作用域指在程序定义变量的区域，该位置决定了变量的生命周期，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</strong></p><p>ES6之前只有全局作用域和函数作用域</p><ul><li>全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。</li><li>函数作用域就是在函数内部定义的变量或者函数，并且定义的变量或者函数只能在函数内部被访问。函数执行结束之后，函数内部定义的变量会被销毁。</li></ul><p>ES6后多了一个块级作用域,let和const会创建块级作用域</p><h3 id="变量提升造成的危害："><a href="#变量提升造成的危害：" class="headerlink" title="变量提升造成的危害："></a>变量提升造成的危害：</h3><p>1.变量容易在不被察觉的情况在被覆盖</p><p>2.本应该被销毁的变量没被销毁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i); </span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>由于变量提升，变量i在创建执行上下文阶段被提升，当for循环结束，变量i没有被销毁</p><h3 id="ES6解决变量提升带来的缺陷："><a href="#ES6解决变量提升带来的缺陷：" class="headerlink" title="ES6解决变量提升带来的缺陷："></a>ES6解决变量提升带来的缺陷：</h3><p>使用let和const支持块级作用域，<strong>块作用域中的变量会被放到执行上下文中的词法环境中</strong>，而不是变量环境，因此块级作用域中的变量不会出现变量提升的现象</p><h2 id="词法作用域："><a href="#词法作用域：" class="headerlink" title="词法作用域："></a>词法作用域：</h2><p><strong>指作用域是由代码中函数声明的位置决定的，所以词法作用域是静态的作用域，通过它能够预测代码在执行过程中如何查找标识符</strong></p><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/%E4%B8%8B%E8%BD%BD.png"></p><p>词法作用域由代码声明时的位置决定，所以整个词法作用域链顺序：foo函数作用域-&gt;bar函数作用域-&gt;main函数作用域-&gt;全局作用域</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客世界 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test1 = <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> myName = <span class="string">&quot;Chrome 浏览器 &quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(test)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test = <span class="number">2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> test = <span class="number">3</span></span><br><span class="line">        bar()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line"><span class="keyword">let</span> myAge = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="number">1</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>它的执行上下文栈如下：</p><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.png"></p><p>先在执行上下文中的词法环境中查找-&gt;变量环境-&gt;外部作用域,最后在全局执行上下文的词法环境中找到test</p><h1 id="从执行上下文角度看闭包："><a href="#从执行上下文角度看闭包：" class="headerlink" title="从执行上下文角度看闭包："></a>从执行上下文角度看闭包：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> test2 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> innerBar = &#123;</span><br><span class="line">        <span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(test1)</span><br><span class="line">            <span class="keyword">return</span> myName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">setName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;</span><br><span class="line">            myName = newName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerBar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo()</span><br><span class="line">bar.setName(<span class="string">&quot; 极客邦 &quot;</span>)</span><br><span class="line">bar.getName()</span><br><span class="line"><span class="built_in">console</span>.log(bar.getName())</span><br></pre></td></tr></table></figure><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/3-16670527476563.png"></p><p>根据词法作用域的规则，内部函数getName和setName总是可以访问到外部函数foo中的变量，左移当InnerBar对象返回给全局变量bar后，虽然foo函数已经执行结束，但是getName和setName函数依然可以使用foo函数中的变量myName和test1,当foo函数执行完成后，整个调用栈状态如下：</p><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/4-16670527329372.png"></p><p>闭包定义：<strong>在JavaScript中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束，但是内部函数引用外部函数的变量依然保存在内存中，我们把这些变量的集合称为闭包。</strong></p><h2 id="闭包回收"><a href="#闭包回收" class="headerlink" title="闭包回收"></a>闭包回收</h2><p>如果引用闭包的函数是全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。</p><p>如果引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么 JavaScript 引擎的垃圾回收器就会回收这块内存。</p><p>所以在使用闭包的时候，你要尽量注意一个原则：如果该闭包会一直使用，那么它可以作为全局变量而存在；但如果使用频率不高，而且占用内存又比较大的话，那就尽量让它成为一个局部变量。</p><h1 id="在执行上下文的视角讲this"><a href="#在执行上下文的视角讲this" class="headerlink" title="在执行上下文的视角讲this"></a>在执行上下文的视角讲this</h1><p>作用域链和this是两套不同的系统，</p><p><strong>this 是和执行上下文绑定的，也就是说每个执行上下文中都有一个 this</strong>。执行上下文主要分为三种——全局执行上下文、函数执行上下文和 eval 执行上下文，所以对应的 this 也只有这三种——<strong>全局执行上下文中的 this、函数中的 this 和 eval 中的 this。</strong></p><h2 id="全局执行上下文中的-this"><a href="#全局执行上下文中的-this" class="headerlink" title="全局执行上下文中的 this"></a>全局执行上下文中的 this</h2><p>全局执行上下文中的 this 是指向 window 对象的。这也是 this 和作用域链的唯一交点，作用域链的最底端包含了 window 对象，全局执行上下文中的 this 也是指向 window 对象</p><h2 id="函数执行上下文中的-this"><a href="#函数执行上下文中的-this" class="headerlink" title="#函数执行上下文中的 this"></a><a href="https://blog.poetries.top/browser-working-principle/guide/part2/lesson11.html#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84-this">#</a>函数执行上下文中的 this</h2><p><strong>1. 通过函数的 call 方法设置</strong></p><p><strong>2. 通过对象调用方法设置</strong></p><p><strong>3. 通过构造函数中设置</strong></p><h2 id="this-的设计缺陷以及应对方案"><a href="#this-的设计缺陷以及应对方案" class="headerlink" title="this 的设计缺陷以及应对方案"></a>this 的设计缺陷以及应对方案</h2><p><strong>1. 嵌套函数中的 this 不会从外层函数中继承</strong></p><p>我认为这是一个严重的设计错误，并影响了后来的很多开发者，让他们“前赴后继”迷失在该错误中。我们还是结合下面这样一段代码来分析下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&quot; 极客时间 &quot;</span>, </span><br><span class="line">  <span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125;</span><br><span class="line">    bar()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.showThis()</span><br></pre></td></tr></table></figure><p>解决：</p><p>1.在外层函数中用一个变量self保存this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&quot; 极客时间 &quot;</span>, </span><br><span class="line">  <span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self.name = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    bar()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.showThis()</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name)</span><br></pre></td></tr></table></figure><p>2 内部函数使用箭头函数的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&quot; 极客时间 &quot;</span>, </span><br><span class="line">  <span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    bar()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.showThis()</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name)</span><br></pre></td></tr></table></figure><p>箭头函数不会创建自身的执行上下文，因此箭头函数中的this取决于它的作用域链中的上一个执行上下文中的this</p><p><strong>2. 普通函数中的 this 默认指向全局对象 window</strong></p><p>上面我们已经介绍过了，在默认情况下调用一个函数，其执行上下文中的 this 是默认指向全局对象 window 的。</p><p>不过这个设计也是一种缺陷，因为在实际工作中，我们并不希望函数执行上下文中的 this 默认指向全局对象，因为这样会打破数据的边界，造成一些误操作。如果要让函数执行上下文中的 this 指向某个对象，最好的方式是通过 call 方法来显示调用。</p><p>这个问题可以通过设置 JavaScript 的“严格模式”来解决。在严格模式下，默认执行一个函数，其函数的执行上下文中的 this 值是 undefined，这就解决上面的问题了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js执行流程：&quot;&gt;&lt;a href=&quot;#Js执行流程：&quot; class=&quot;headerlink&quot; title=&quot;Js执行流程：&quot;&gt;&lt;/a&gt;Js执行流程：&lt;/h1&gt;&lt;h2 id=&quot;编译阶段&quot;&gt;&lt;a href=&quot;#编译阶段&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>async-await原理</title>
    <link href="https://coloey.github.io/2022/10/28/async-await%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/10/28/async-await%E5%8E%9F%E7%90%86/</id>
    <published>2022-10-28T10:00:41.000Z</published>
    <updated>2022-10-28T12:21:13.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Generator和协程"><a href="#Generator和协程" class="headerlink" title="Generator和协程"></a>Generator和协程</h1><p>生成器函数的具体使用方式：</p><p><strong>在生成器函数内部执行一段代码，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。</strong><br><strong>外部函数可以通过 next 方法恢复函数的执行</strong></p><p><strong>Generator返回的是一个协程</strong>，协程是一种比线程更轻量级的存在，你可以把协程看出是跑在线程上的任务，<strong>一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，</strong>比如当前执行的是A协程，要启动B协程，那么协程就需要把主线程的控制权交给B协程。如果从A协程启动B协程，把A协程称为B协程的父协程</p><p>一个进程拥有多个线程，一个线程也可以拥有多个协程，<strong>协程不是由操作系统内核管理，而完全是由程序控制（也就是用户态执行）</strong>，好处就是性能得到了提升，不会像线程切换那样消耗资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第一段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第二段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第三段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 执行结束 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 0&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gen = genDemo()</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 1&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 2&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 3&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 4&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/10/28/async-await%E5%8E%9F%E7%90%86/1-16669575177321.png"></p><h1 id="协程四点规则："><a href="#协程四点规则：" class="headerlink" title="协程四点规则："></a>协程四点规则：</h1><ul><li>调用生成器函数genDemo创建一个写成gen,创建后，gen协程并没有立即执行</li><li>要让gen协程执行，需要通过调用gen.next</li><li>当协程正在执行时，可以通过yield关键字来暂停gen协程的执行，并返回主信息给父协程</li><li>如果协程在执行期间，遇到return关键字，那么js引擎会结束当前协程，并将return后面的内容返回给父协程</li></ul><p>父协程有自己的调用栈，gen 协程时也有自己的调用栈，当 gen 协程通过 yield 把控制权交给父协程时，V8 是如何切换到父协程的调用栈？当父协程通过 gen.next 恢复 gen 协程时，又是如何切换 gen 协程的调用栈？</p><p>要搞清楚上面的问题，你需要关注以下两点内容。</p><p>第一点：gen 协程和父协程是在主线程上<strong>交互执行</strong>的，并不是并发执行的，它们之前的切换是通过 <strong>yield 和 gen.next</strong> 来配合完成的。</p><p>第二点：<strong>当在 gen 协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。</strong></p><h1 id="使用Promise和generator"><a href="#使用Promise和generator" class="headerlink" title="使用Promise和generator:"></a>使用Promise和generator:</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response1 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response1)</span><br><span class="line">    <span class="keyword">let</span> response2 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org/test&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response2)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行 foo 函数的代码</span></span><br><span class="line"><span class="keyword">let</span> gen = foo()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGenPromise</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gen.next().value</span><br><span class="line">&#125;</span><br><span class="line">getGenPromise(gen).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">    <span class="keyword">return</span> getGenPromise(gen)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在foo函数里实现了用同步方式实现异步操作，foo函数外部代码：</p><ul><li>let gen=foo()创建gen协程</li><li>父协程中通过执行gen.next把主线程控制权交给gen协程</li><li>gen协程获取到主线程控制权，就调用fetch函数创建一个Promise对象reponse1,然后通过yield暂停gen协程的执行，将response1返回给父协程</li><li>父协程恢复执行后，调用reponse1.then方法等待结果</li><li>等通过fetch发起的请求完成后，会调用then中回调函数，then中的回调函数拿到结果后，通过调用gen.next放弃主线程控制权</li></ul><p>把执行生成器的代码封装成一个函数，并把这个执行生成器代码的函数称为执行器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response1 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response1)</span><br><span class="line">    <span class="keyword">let</span> response2 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org/test&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response2)</span><br><span class="line">&#125;</span><br><span class="line">co(foo());</span><br></pre></td></tr></table></figure><h1 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h1><p>async是一个通过<strong>异步执行</strong>并<strong>隐式返回Promise</strong>作为结果的函数</p><p>调用async的foo函数返回一个Promise对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>foo函数被async标记，当进入该函数时，js引擎会保存当前调用栈信息，当执行到await(100),会默认创建一个Promise对象。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise_ = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve,reject)&#123;</span><br><span class="line">  resolve(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这个promise__对象创建过程中，executor函数调用resolve函数，js引擎会将该任务<strong>提交给微任务，然后js引擎会暂停当前协程执行，将主线程的控制权交给父协程执行，同时将promise__对象返回给父协程</strong>，主线程的控制权已经交给父协程，这时候父协程要做的事就是调用promise_.then监控 promise状态的改变。继续执行父协程的流程，执行console.log(3),父协程执行结束后，在结束之前，会进入微任务检查点，执行微任务队列，微任务队列有resolve（100），触发promise_.then的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise_.then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//回调函数被激活后，将主线程控制权交给foo协程，并将value值传给协程</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Generator和协程&quot;&gt;&lt;a href=&quot;#Generator和协程&quot; class=&quot;headerlink&quot; title=&quot;Generator和协程&quot;&gt;&lt;/a&gt;Generator和协程&lt;/h1&gt;&lt;p&gt;生成器函数的具体使用方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Promise告别回调函数</title>
    <link href="https://coloey.github.io/2022/10/28/Promise%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://coloey.github.io/2022/10/28/Promise%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2022-10-28T08:02:15.000Z</published>
    <updated>2022-10-28T09:56:59.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步编程的问题："><a href="#异步编程的问题：" class="headerlink" title="异步编程的问题："></a>异步编程的问题：</h1><p>1.代码逻辑不连续</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">response</span>)</span>&#123;<span class="built_in">console</span>.log(response) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onReject</span>(<span class="params">error</span>)</span>&#123;<span class="built_in">console</span>.log(error) &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; onReject(e)&#125;</span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; onReject(e) &#125;</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; onResolve(xhr.response) &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置请求类型，请求 URL，是否同步信息</span></span><br><span class="line"><span class="keyword">let</span> URL = <span class="string">&#x27;https://time.geekbang.com&#x27;</span></span><br><span class="line">xhr.open(<span class="string">&#x27;Get&#x27;</span>, URL, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">xhr.timeout = <span class="number">3000</span> <span class="comment">// 设置 xhr 请求的超时时间</span></span><br><span class="line">xhr.responseType = <span class="string">&quot;text&quot;</span> <span class="comment">// 设置响应返回的数据格式</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;X_TEST&quot;</span>,<span class="string">&quot;time.geekbang&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 发出请求</span></span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>上述代码包含五个回调，导致代码逻辑不连贯，不线性，这就是异步回调影响我们的编程方式。</p><p>2.回调地狱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">XFetch(makeRequest(<span class="string">&#x27;https://time.geekbang.org/?category&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(response)</span><br><span class="line">      XFetch(makeRequest(<span class="string">&#x27;https://time.geekbang.org/column&#x27;</span>),</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(response)</span><br><span class="line">              XFetch(makeRequest(<span class="string">&#x27;https://time.geekbang.org&#x27;</span>)</span><br><span class="line">                  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(response)</span><br><span class="line">                  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(e)</span><br><span class="line">                  &#125;)</span><br><span class="line">          &#125;, <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(e)</span><br><span class="line">          &#125;)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol><li><p>嵌套调用，下面的任务依赖上个任务的请求结果，<strong>并在上个任务的回调函数内部执行新的业务逻辑，这样嵌套层次多了以后，代码可读性变差</strong></p></li><li><p><strong>任务不确定性，</strong>执行每个任务有两种可能的结果（成功或者失败），所以体现在代码中就需要对每个任务的执行结果做两次判断，这种对每个任务都要进行一次额外的错误处理方式，明显增加了代码的混乱程度。</p></li></ol><p>解决两个问题：</p><ol><li>消灭嵌套调用</li><li>合并多个任务的错误处理</li></ol><h1 id="Promise如何消灭嵌套调用和多次错误处理"><a href="#Promise如何消灭嵌套调用和多次错误处理" class="headerlink" title="Promise如何消灭嵌套调用和多次错误处理"></a>Promise如何消灭嵌套调用和多次错误处理</h1><p>产生嵌套函数的<strong>主要原因就是在发起任务请求时会带上回调函数，这样当任务处理结束后，下个任务就只能在回调函数中处理</strong></p><p>1.<strong>Promise实现回调函数延时绑定</strong>。在代码上体现就是先创建Promise对象x1,通过Promise的构造函数executor来执行业务逻辑，创建好Promise对象x1后，再使用x1.then设置回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象 x1，并在 executor 函数中执行业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//x1 延迟绑定回调函数 onResolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line">x1.then(onResolve)</span><br></pre></td></tr></table></figure><p>2.将回调函数onResolve的返回值穿透到最外层，<strong>因为我们会根据onResolve函数的传入值来决定创建什么类型的Promise任务，创建好的Promise对象需要返回到最外层，这样就可以摆脱嵌套循环。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象 x1，并在 executor 函数中执行业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//x1 延迟绑定回调函数 onResolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">    <span class="keyword">let</span> x2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        resolve(value+<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> x2;<span class="comment">//内部返回值穿透到最外层</span></span><br><span class="line">&#125;</span><br><span class="line">x1.then(onResolve)</span><br></pre></td></tr></table></figure><p>处理异常：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(rand)</span><br><span class="line">    <span class="keyword">if</span> (rand &gt; <span class="number">0.5</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        reject()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p0 = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p1 = p0.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;succeed-1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p3 = p1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;succeed-2&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p4 = p3.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;succeed-3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">p4.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这段代码四个Promise对象，无论哪个对象抛出异常，都可以通过最后一个对象p4.catch捕获异常，通过这种方式可以将所有Promise对象的错误合并到一个函数来处理，这样就解决了每个任务需要单独处理异常的问题。Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被onReject函数处理或catch语句捕获为止。具备这样的“冒泡”特性后，就不需要在每个Promise对象中单独捕获异常。</p><p>Promise与微任务</p><p>由于Promise采用回调函数延迟绑定技术，所以在执行resolve函数时，回调函数还没有绑定，那么只能推迟回调函数的执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onResolve_=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> onReject_=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//模拟实现resolve和then</span></span><br><span class="line">    <span class="built_in">this</span>.then=<span class="function"><span class="keyword">function</span>(<span class="params">onResolve,onReject</span>)</span>&#123;</span><br><span class="line">        onResolve_ = onResolve</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        onResolve_(value)</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve,<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> demo = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line">demo.then(onResolve)</span><br></pre></td></tr></table></figure><p><strong>代码报错是由于Promise的延迟绑定导致的</strong>，在调用onResolve_时，Promise.then还没执行，所以会报onResolve_ is not a function错误</p><p>因此，改造Promise的resolve方法，让resolve延迟调用onResolve_</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onResolve_=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> onReject_=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//模拟实现resolve和then</span></span><br><span class="line">    <span class="built_in">this</span>.then=<span class="function"><span class="keyword">function</span>(<span class="params">onResolve,onReject</span>)</span>&#123;</span><br><span class="line">        onResolve_ = onResolve</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           onResolve_(value)</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve,<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用定时器推迟onResolve执行，用定时器效率低，<strong>因此用微任务</strong></p><p>参考链接：</p><p><a href="https://blog.poetries.top/browser-working-principle/guide/part4/lesson19.html#promise-%E6%B6%88%E7%81%AD%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E5%92%8C%E5%A4%9A%E6%AC%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">https://blog.poetries.top/browser-working-principle/guide/part4/lesson19.html#promise-%E6%B6%88%E7%81%AD%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E5%92%8C%E5%A4%9A%E6%AC%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异步编程的问题：&quot;&gt;&lt;a href=&quot;#异步编程的问题：&quot; class=&quot;headerlink&quot; title=&quot;异步编程的问题：&quot;&gt;&lt;/a&gt;异步编程的问题：&lt;/h1&gt;&lt;p&gt;1.代码逻辑不连续&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>nextTick原理</title>
    <link href="https://coloey.github.io/2022/10/28/nextTick%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/10/28/nextTick%E5%8E%9F%E7%90%86/</id>
    <published>2022-10-28T04:21:20.000Z</published>
    <updated>2022-11-01T01:20:55.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么有nextTick？"><a href="#为什么有nextTick？" class="headerlink" title="为什么有nextTick？"></a>为什么有nextTick？</h1><p>因为vue采用的异步更新策略，当检测到数据发生变化时不会立即更新DOM，而是开启一个任务队列，并缓存在同一个事件循环中发送的所有变更，<strong>当直接操作DOM改变数据时，DOM不会立刻更新，会等到异步队列清空，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新</strong>，这种做法带来的好处就是可以将多次数据更新合并成一次，减少操作DOM的次数，如果不采用这种方法，假设数据改变100次就要去更新100次DOM，而频繁的DOM更新是很耗性能的；</p><h1 id="nextTick作用"><a href="#nextTick作用" class="headerlink" title="nextTick作用"></a>nextTick作用</h1><p>nextTick <strong>接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后才执行</strong>；<br><strong>使用场景</strong>：想要操作 <em>基于最新数据生成的DOM</em> 时，就将这个操作放在 nextTick 的回调中</p><h1 id="nextTick实现原理"><a href="#nextTick实现原理" class="headerlink" title="nextTick实现原理"></a>nextTick实现原理</h1><p>将传入的回调函数包装成异步任务，异步任务又分为微任务和宏任务，为了尽快执行选择微任务，nextTick 提供了四种异步方法 Promise.then、MutationObserver、setImmediate、setTimeout(fn,0)</p><h2 id="源码解读："><a href="#源码解读：" class="headerlink" title="源码解读："></a>源码解读：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/util&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; handleError &#125; <span class="keyword">from</span> <span class="string">&#x27;./error&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isIE, isIOS, isNative &#125; <span class="keyword">from</span> <span class="string">&#x27;./env&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  上面三行与核心代码关系不大，了解即可</span></span><br><span class="line"><span class="comment">//  noop 表示一个无操作空函数，用作函数默认值，防止传入 undefined 导致报错</span></span><br><span class="line"><span class="comment">//  handleError 错误处理函数</span></span><br><span class="line"><span class="comment">//  isIE, isIOS, isNative 环境判断函数，</span></span><br><span class="line"><span class="comment">//  isNative 判断某个属性或方法是否原生支持，如果不支持或通过第三方实现支持都会返回 false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> isUsingMicroTask = <span class="literal">false</span>     <span class="comment">// 标记 nextTick 最终是否以微任务执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> callbacks = []     <span class="comment">// 存放调用 nextTick 时传入的回调函数</span></span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>     <span class="comment">// 标记是否已经向任务队列中添加了一个任务，如果已经添加了就不能再添加了</span></span><br><span class="line">    <span class="comment">// 当向任务队列中添加了任务时，将 pending 置为 true，当任务被执行时将 pending 置为 false</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 nextTick 函数，接收一个回调函数和一个执行上下文作为参数</span></span><br><span class="line"><span class="comment">// 回调的 this 自动绑定到调用它的实例上</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">nextTick</span>(<span class="params">cb?: <span class="built_in">Function</span>, ctx?: <span class="built_in">Object</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _resolve</span><br><span class="line">    <span class="comment">// 将传入的回调函数存放到数组中，后面会遍历执行其中的回调</span></span><br><span class="line">    callbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cb) &#123;   <span class="comment">// 对传入的回调进行 try catch 错误捕获</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cb.call(ctx)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;    <span class="comment">// 进行统一的错误处理</span></span><br><span class="line">                handleError(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">            _resolve(ctx)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果当前没有在 pending 的回调，</span></span><br><span class="line">    <span class="comment">// 就执行 timeFunc 函数选择当前环境优先支持的异步方法</span></span><br><span class="line">    <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">        pending = <span class="literal">true</span></span><br><span class="line">        timerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果没有传入回调，并且当前环境支持 promise，就返回一个 promise</span></span><br><span class="line">    <span class="comment">// 在返回的这个 promise.then 中 DOM 已经更新好了，</span></span><br><span class="line">    <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            _resolve = resolve</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前环境优先支持的异步方法，优先选择微任务</span></span><br><span class="line"><span class="comment">// 优先级：Promise---&gt; MutationObserver---&gt; setImmediate---&gt; setTimeout</span></span><br><span class="line"><span class="comment">// setTimeout 可能产生一个 4ms 的延迟，而 setImmediate 会在主线程执行完后立刻执行</span></span><br><span class="line"><span class="comment">// setImmediate 在 IE10 和 node 中支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当在同一轮事件循环中多次调用 nextTick 时 ,timerFunc 只会执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timerFunc   </span><br><span class="line"><span class="comment">// 判断当前环境是否原生支持 promise</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;  <span class="comment">// 支持 promise</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 用 promise.then 把 flushCallbacks 函数包裹成一个异步微任务</span></span><br><span class="line">        p.then(flushCallbacks)</span><br><span class="line">        <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记当前 nextTick 使用的微任务</span></span><br><span class="line">    isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果不支持 promise，就判断是否支持 MutationObserver</span></span><br><span class="line">    <span class="comment">// 不是IE环境，并且原生支持 MutationObserver，那也是一个微任务</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> MutationObserver !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">    isNative(MutationObserver) ||</span><br><span class="line">    MutationObserver.toString() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">    <span class="comment">// new 一个 MutationObserver 类</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(flushCallbacks) </span><br><span class="line">    <span class="comment">// 创建一个文本节点</span></span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="built_in">String</span>(counter))   </span><br><span class="line">    <span class="comment">// 监听这个文本节点，当数据发生变化就执行 flushCallbacks </span></span><br><span class="line">    observer.observe(textNode, &#123; <span class="attr">characterData</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">        textNode.data = <span class="built_in">String</span>(counter)  <span class="comment">// 数据更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    isUsingMicroTask = <span class="literal">true</span>    <span class="comment">// 标记当前 nextTick 使用的微任务</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断当前环境是否原生支持 setImmediate</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123; setImmediate(flushCallbacks)  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以上三种都不支持就选择 setTimeout</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123; <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果多次调用 nextTick，会依次执行上面的方法，将 nextTick 的回调放在 callbacks 数组中</span></span><br><span class="line"><span class="comment">// 最后通过 flushCallbacks 函数遍历 callbacks 数组的拷贝并执行其中的回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushCallbacks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    pending = <span class="literal">false</span>    </span><br><span class="line">    <span class="keyword">const</span> copies = callbacks.slice(<span class="number">0</span>)    <span class="comment">// 拷贝一份 callbacks</span></span><br><span class="line">    callbacks.length = <span class="number">0</span>    <span class="comment">// 清空 callbacks</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.length; i++) &#123;    <span class="comment">// 遍历执行传入的回调</span></span><br><span class="line">        copies[i]()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么要拷贝一份 callbacks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 callbacks.slice(0) 将 callbacks 拷贝出来一份，</span></span><br><span class="line"><span class="comment">// 是因为考虑到在 nextTick 回调中可能还会调用 nextTick 的情况,</span></span><br><span class="line"><span class="comment">// 如果在 nextTick 回调中又调用了一次 nextTick，则又会向 callbacks 中添加回调，</span></span><br><span class="line"><span class="comment">// 而 nextTick 回调中的 nextTick 应该放在下一轮执行，</span></span><br><span class="line"><span class="comment">// 否则就可能出现一直循环的情况，</span></span><br><span class="line"><span class="comment">// 所以需要将 callbacks 复制一份出来然后清空，再遍历备份列表执行回调</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么有nextTick？&quot;&gt;&lt;a href=&quot;#为什么有nextTick？&quot; class=&quot;headerlink&quot; title=&quot;为什么有nextTick？&quot;&gt;&lt;/a&gt;为什么有nextTick？&lt;/h1&gt;&lt;p&gt;因为vue采用的异步更新策略，当检测到数据发生变化时</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
</feed>
