<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2022-11-08T12:18:47.551Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>from memory cache与from disk cache</title>
    <link href="https://coloey.github.io/2022/11/08/from-memory-cache%E4%B8%8Efrom-disk-cache/"/>
    <id>https://coloey.github.io/2022/11/08/from-memory-cache%E4%B8%8Efrom-disk-cache/</id>
    <published>2022-11-08T12:02:47.000Z</published>
    <updated>2022-11-08T12:18:47.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器的开发者工具的Network的Size栏出现三种情况："><a href="#浏览器的开发者工具的Network的Size栏出现三种情况：" class="headerlink" title="浏览器的开发者工具的Network的Size栏出现三种情况："></a>浏览器的开发者工具的Network的Size栏出现三种情况：</h1><ul><li>from memory cache</li><li>from disk cache</li><li>资源本身大小(比如13.6k)</li></ul><h1 id="二三级缓存原理："><a href="#二三级缓存原理：" class="headerlink" title="二三级缓存原理："></a>二三级缓存原理：</h1><p>1.先查找内存，如果内存中存在，从内存中加载</p><p>2.如果内存中未查找到，选择硬盘获取，如果硬盘中有，从硬盘中加载</p><p>3.如果硬盘中未查找到，就进行网络请求</p><p>4.加载到的资源缓存到硬盘和内存</p><h1 id="http状态码及区别"><a href="#http状态码及区别" class="headerlink" title="http状态码及区别"></a>http状态码及区别</h1><ul><li>200 from memory cache:不访问服务器，一般已经加载过该资源且缓存在了内存中，直接从内存中读取缓存，浏览器关闭后，数据将不存在（资源被释放掉），<strong>再次打开相同的页面时，不会出现from memory cache，一般脚本，字体，图片会存在内存中</strong></li><li>200 from disk cache:不访问服务器，已经在之前的某个时间加载过该资源，直接从硬盘中读取缓存，关闭浏览器后，数据依然存在，<strong>此资源不会随着该页面的关闭而释放掉，下次打开仍然是from disk cache，一般非脚本存在其中，如css</strong></li><li>200 资源大小数值：从服务器下载最新资源</li><li>304 Not Modified:访问服务器，发现数据没有更新，服务器返回此状态码，然后从缓存中获取数据</li></ul><h1 id="几种状态执行顺序："><a href="#几种状态执行顺序：" class="headerlink" title="几种状态执行顺序："></a>几种状态执行顺序：</h1><p>例子：加载一种资源：访问-&gt;200-&gt;退出浏览器-&gt;再进来-&gt;200(from disk cache)-&gt;刷新-&gt;200(from memory cache)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器的开发者工具的Network的Size栏出现三种情况：&quot;&gt;&lt;a href=&quot;#浏览器的开发者工具的Network的Size栏出现三种情况：&quot; class=&quot;headerlink&quot; title=&quot;浏览器的开发者工具的Network的Size栏出现三种情况：&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>组件设计原则</title>
    <link href="https://coloey.github.io/2022/11/08/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://coloey.github.io/2022/11/08/%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2022-11-08T09:48:12.000Z</published>
    <updated>2022-11-08T09:48:12.718Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>前端工程化-CI/CD</title>
    <link href="https://coloey.github.io/2022/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-CI-CD/"/>
    <id>https://coloey.github.io/2022/11/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96-CI-CD/</id>
    <published>2022-11-08T09:16:40.000Z</published>
    <updated>2022-11-08T12:53:40.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h1><p>1.CI（Continuous integration,<strong>持续集成</strong>)</p><p>频繁地（一天多次）将代码集成到主干</p><p>2.CD(Continous delivery**,持续交付)**</p><p>持续集成的下一步，指的是，频繁将软件的新版本，交付给质量团队或者用户，以供评审，如评审通过，代码进入生产阶段，手动部署</p><p>3.CD(Continous deployment,<strong>持续部署</strong>)</p><p>持续交付的下一步，指的是，代码通过评审后，自动部署到生产环境</p><h1 id="意义："><a href="#意义：" class="headerlink" title="意义："></a>意义：</h1><h2 id="CI（持续集成）"><a href="#CI（持续集成）" class="headerlink" title="CI（持续集成）"></a>CI（持续集成）</h2><p>（1）<strong>快速发现错误</strong>，每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易</p><p>（2）<strong>防止分支大幅偏离主干</strong>，如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成</p><p><strong>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量</strong>，它的核心措施是，代码集成到主干之前，必须通过自动化测试，只要有一个测试用例失败，就不能集成</p><h2 id="CD（持续交付）"><a href="#CD（持续交付）" class="headerlink" title="CD（持续交付）"></a>CD（持续交付）</h2><p>保证不管怎么更新，软件是随时可以交付的</p><h2 id="CD（持续部署）"><a href="#CD（持续部署）" class="headerlink" title="CD（持续部署）"></a>CD（持续部署）</h2><p>保证代码在任何时刻都是可部署，可以进入生产阶段</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><p>开发者提交代码</p><h2 id="测试（第一轮）"><a href="#测试（第一轮）" class="headerlink" title="测试（第一轮）"></a>测试（第一轮）</h2><p>代码仓库commit操作配置钩子，只要提交代码合并进主干，就会跑自动化测试</p><p>三种测试：</p><p>单元测试：针对函数或模块的测试</p><p>集成测试：针对整体产品的某个功能的测试，又称功能测试</p><p>端对端测试：从用户界面直达数据库的全链路测试</p><h2 id="构建："><a href="#构建：" class="headerlink" title="构建："></a>构建：</h2><p>测试通过，代码即可进入主干，就算可以交付</p><p>交付后，就先进行构建，再进入第二轮测试</p><p>所谓构建，指的就是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式，JS脚本，图片）等</p><p>常用的构建工具：</p><p>·<a href="https://links.jianshu.com/go?to=http://jenkins-ci.org/">Jenkins</a></p><p>·<a href="https://links.jianshu.com/go?to=https://travis-ci.com/">Travis</a></p><p>·<a href="https://links.jianshu.com/go?to=https://www.codeship.io/">Codeship</a></p><p>·<a href="https://links.jianshu.com/go?to=http://stridercd.com/">Strider</a></p><h2 id="测试（第二轮）"><a href="#测试（第二轮）" class="headerlink" title="测试（第二轮）"></a>测试（第二轮）</h2><p>全面测试，单元测试和集成测试都会跑，有条件也要做端对端测试，所有测试以自动化为主，少数无法自动化的测试用例，人工跑</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>通过第二轮测试，当前代码就是一个可以直接部署的版本，将这个版本的所有文件打包存档，发到生产服务器，生产服务器将打包文件解包成本地的一个目录，再将允许路径的符号链接指向这个目录，然后重新启动应用</p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>一旦当前版本发送问题，就要回滚到上一个版本的构建结果，最简单的做法就是修改符号链接，指向上一个版本目录</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h1&gt;&lt;p&gt;1.CI（Continuous integration,&lt;strong&gt;持续集成&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;频繁地（一天多次</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>YY直播日常实习</title>
    <link href="https://coloey.github.io/2022/11/08/YY%E7%9B%B4%E6%92%AD%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0/"/>
    <id>https://coloey.github.io/2022/11/08/YY%E7%9B%B4%E6%92%AD%E6%97%A5%E5%B8%B8%E5%AE%9E%E4%B9%A0/</id>
    <published>2022-11-08T08:43:51.000Z</published>
    <updated>2022-11-09T06:44:27.043Z</updated>
    
    <content type="html"><![CDATA[<p>1.实习负责的什么项目，项目中遇到了哪些困难 </p><p> 2.你讲到了Vue-i18n插件，设计插件的思想：x </p><p>  3.Vue中封装组件的思想 </p><p>  4.函数式编程的思想 x</p><p>  5.vue和vue3双向绑定原理，区别 </p><p> 6.Proxy的优点</p><p>  6.data中为什么返回函数比较好，不是对象 </p><p>  7.data中如果用对象，造成了数据污染，要怎么避免数据污染 x</p><p>组件复用造成了数据污染，那就只能避免组件的复用？</p><p>  8.vue方法中声明了对象没有响应式，怎么实现响应式 </p><p>  9.vue源码中，data,comouted,methods声明的顺序的是怎样的 x</p><p>  10.vue的生命周期 </p><p>  11.vue3的生命周期和vue2生命周期的不同点 </p><p>  12.讲讲keep-alive </p><p>  13.keep-alive的实现原理 </p><p>  14.你的项目中用到了组件库，讲讲前端工程化 </p><p>  15.tree-traking原理，怎么实现tree-shaking，tree-shaking怎么知道没用的代码 x</p><p>  16.前端中的CI/CD是怎样的流程 x</p><p>  17.了解抽象语法树AST吗 </p><p>  18.babel-loader原理讲讲 </p><p>  19.http缓存 </p><p>  20.如果浏览器中没有设置强缓存和协商缓存，浏览器会自动缓存吗 </p><p>  21.from disk和from memory的区别 x</p><p>  22.http和https的区别 </p><p>  还问了一些有些没想起来 </p><p>  反问：有点紧张，觉得我面试表现得怎么样 </p><p>  回答：看出来你有点紧张，很多东西原理了解的还不深入，但是整个前端体系比较全面，了解工程化知识，框架也熟悉</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.实习负责的什么项目，项目中遇到了哪些困难 &lt;/p&gt;
&lt;p&gt; 2.你讲到了Vue-i18n插件，设计插件的思想：x &lt;/p&gt;
&lt;p&gt;  3.Vue中封装组件的思想 &lt;/p&gt;
&lt;p&gt;  4.函数式编程的思想 x&lt;/p&gt;
&lt;p&gt;  5.vue和vue3双向绑定原理，区别 &lt;/</summary>
      
    
    
    
    <category term="面经" scheme="https://coloey.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>手写instanceof</title>
    <link href="https://coloey.github.io/2022/11/02/%E6%89%8B%E5%86%99instanceof/"/>
    <id>https://coloey.github.io/2022/11/02/%E6%89%8B%E5%86%99instanceof/</id>
    <published>2022-11-02T12:11:11.000Z</published>
    <updated>2022-11-02T12:12:09.200Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myInstanceof</span>(<span class="params">left,right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prototype = right.prototype</span><br><span class="line">    left = left.__proto__</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!left)<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span>(left == prototype)<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        left = left.__proto__</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
    <category term="手撕代码" scheme="https://coloey.github.io/tags/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>hook原理</title>
    <link href="https://coloey.github.io/2022/11/01/hook%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/01/hook%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-01T07:55:12.000Z</published>
    <updated>2022-11-01T08:55:27.701Z</updated>
    
    <content type="html"><![CDATA[<p>hook就是解决函数组件没有state,生命周期，逻辑不能复用的一种解决方案</p><p>dispatcher</p><p>在真实hook中，组件mount时的hook和update时的hook来源于不同对象，这类对象在源码中称为dispatcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mount时的Dispatcher</span></span><br><span class="line"><span class="keyword">const</span> HooksDispatcherOnMount: Dispatcher = &#123;</span><br><span class="line">  <span class="attr">useCallback</span>: mountCallback,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: mountEffect,</span><br><span class="line">  <span class="attr">useImperativeHandle</span>: mountImperativeHandle,</span><br><span class="line">  <span class="attr">useLayoutEffect</span>: mountLayoutEffect,</span><br><span class="line">  <span class="attr">useMemo</span>: mountMemo,</span><br><span class="line">  <span class="attr">useReducer</span>: mountReducer,</span><br><span class="line">  <span class="attr">useRef</span>: mountRef,</span><br><span class="line">  <span class="attr">useState</span>: mountState,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// update时的Dispatcher</span></span><br><span class="line"><span class="keyword">const</span> HooksDispatcherOnUpdate: Dispatcher = &#123;</span><br><span class="line">  <span class="attr">useCallback</span>: updateCallback,</span><br><span class="line">  <span class="attr">useContext</span>: readContext,</span><br><span class="line">  <span class="attr">useEffect</span>: updateEffect,</span><br><span class="line">  <span class="attr">useImperativeHandle</span>: updateImperativeHandle,</span><br><span class="line">  <span class="attr">useLayoutEffect</span>: updateLayoutEffect,</span><br><span class="line">  <span class="attr">useMemo</span>: updateMemo,</span><br><span class="line">  <span class="attr">useReducer</span>: updateReducer,</span><br><span class="line">  <span class="attr">useRef</span>: updateRef,</span><br><span class="line">  <span class="attr">useState</span>: updateState,</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可见，mount时调用的hook和update时调用的hook是两个不同的函数，在FunctionComponent render前，会根据FunctionComponent对应fiber的一下条件区分mount和update</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>并把不同情况对应的dispatcher赋值给全局变量ReactCurrentDispatcher的current属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReactCurrentDispatcher.current =</span><br><span class="line">    current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span> ? HookDispatcherOnMount : HooksDispatcherOnUpdate</span><br></pre></td></tr></table></figure><p>在FuntionComponent render时，会从ReactCurrentDispatcher.current（即当前dispatcher，则FunctionComponent render时调用的hook是不同函数）</p><p>Hook数据结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hook: Hook = &#123;</span><br><span class="line">    <span class="attr">memoizedState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseState</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">baseQueue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">queue</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>memoizedState:</p><p>hook与FunctionComponent fiber都存在memoizedState属性：</p><p>fiber.memoizedState:FunctionComponent对应fiber保存的Hooks链表</p><p>hook.memoizedState:Hooks链表中保存的单一hook对应的数据</p><p>不同类型hook的memoizedState保存不同类型数据：</p><p>useState:对于const [state,updateState] = useState(initialState),memoizedState保存state的值</p><p>useReducer:对于const[state,dispatch]=useReducer(reducer,[]),memoizedState保存state的值</p><p>useEffect:memoizedState保存包含useEffect回调函数，依赖项等的链表数据结构effect,effect会保存在fiber.updateQueue</p><p>useRef:对于useRef(1),memoizedState保存{current:1}</p><p>useMemo:对于useMemo(callback,[depA]),memoizedState保存[callback,depA],与useMemo的区别是，useCallback保存的是callback函数本身，而useMemo保存的是callback函数的执行结果</p><p>有些hook没有memoizedState:</p><p>如useContext</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hook就是解决函数组件没有state,生命周期，逻辑不能复用的一种解决方案&lt;/p&gt;
&lt;p&gt;dispatcher&lt;/p&gt;
&lt;p&gt;在真实hook中，组件mount时的hook和update时的hook来源于不同对象，这类对象在源码中称为dispatcher&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>computed原理</title>
    <link href="https://coloey.github.io/2022/11/01/computed%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/11/01/computed%E5%8E%9F%E7%90%86/</id>
    <published>2022-11-01T01:13:00.000Z</published>
    <updated>2022-11-01T03:50:37.575Z</updated>
    
    <content type="html"><![CDATA[<p>effect是用来注册副作用函数，同时它允许指定一些选项参数options,例如指定scheduler调度器控制副作用函数的执行时机和方式，先实现一个懒执行的副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn,options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup(effectFn)</span><br><span class="line">        activeEffect = effectFn</span><br><span class="line">        effectStack.push(effectFn)</span><br><span class="line">        fn()</span><br><span class="line">        effectStack.pop()</span><br><span class="line">        activeEffect = effectStack[effectStack.length-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    effectFn.options = options</span><br><span class="line">    effectFn.deps = []</span><br><span class="line">    <span class="comment">//只有非lazy才执行</span></span><br><span class="line">    <span class="keyword">if</span>(!options.lazy) &#123;</span><br><span class="line">        effectFn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将副作用函数作为返回值返回</span></span><br><span class="line">    <span class="keyword">return</span> effectFn<span class="comment">//新增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了让副作用函数不立即执行的功能，将副作用函数effectFn作为effect函数的返回值，这就意味着当调用effect函数时，通过其返回值能够拿到对应的副作用函数，这样我们能够手动执行副作用函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectFn = effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.foo)</span><br><span class="line">&#125;,&#123;<span class="attr">lazy</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">//手动执行副作用函数</span></span><br><span class="line">effectFn()</span><br></pre></td></tr></table></figure><p>如果把传递给effect的函数看做一个getter，那么这个getter函数可以返回任何值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectFn = effect(</span><br><span class="line"><span class="comment">//getter返回obj.foo和obj.bar</span></span><br><span class="line">    <span class="function">() =&gt;</span> obj.foo + obj.bar,</span><br><span class="line">    &#123; <span class="attr">lazy</span>: <span class="literal">true</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了手动执行副作用函数时就能拿到其返回值，改动effect函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">effect</span>(<span class="params">fn,options = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> effectFn = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        cleanup(effectFn)</span><br><span class="line">        activeEffect = effectFn</span><br><span class="line">        effectStack.push(effectFn)</span><br><span class="line">        <span class="comment">//将fn执行结果存储到res</span></span><br><span class="line">        <span class="keyword">const</span> res = fn()</span><br><span class="line">        effectStack.pop()</span><br><span class="line">        activeEffect = effectStack[effectStack.length-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">//将res作为effectFn返回值</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    effectFn.options = options</span><br><span class="line">    effectFn.deps = []</span><br><span class="line">    <span class="keyword">if</span>(!options.lazy)&#123;</span><br><span class="line">        effectFn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> effectFn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递给effect函数的参数fn才是真正的副作用函数，而effectFn是我们包装后的副作用函数，为了通过effectFn得到真正的副作用函数fn的执行结果，我们需要将其保存到res变量，然后将其作为effectFn函数的返回值</p><p>接下来就可以定义cmputed函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//把getter作为副作用函数，创建一个lazy的effect</span></span><br><span class="line">    <span class="keyword">const</span> effectFn = effect(getter,&#123;</span><br><span class="line">        <span class="attr">lazy</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="comment">//当读取value时才执行effectFn</span></span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">return</span> effectFn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>computed函数接收一个getter函数作为参数，我们把getter函数作为副作用函数，用它创建一个lazy的effect,computed函数的执行会返回一个对象，该对象的value属性是一个访问器属性，只有当读取value值时，才执行effectFn并将结果作为返回值返回</p><p>使用computed函数创建一个计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data =&#123; <span class="attr">foo</span>: <span class="number">1</span>, <span class="attr">bar</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;...&#125;)</span><br><span class="line"><span class="keyword">const</span> sumRes = computed(<span class="function">() =&gt;</span> obj.foo + obj.bar)</span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>当多次访问sumRes.value的值，会导致effectFn进行多次计算，即使obj.foo和obj,bar的值本身没有变化，利用闭包实现对值进行缓存的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//value用来缓存上一次计算的值</span></span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="comment">//dirty标志，用来标识是否需要重新计算值，为true意味着“脏”没需要计算</span></span><br><span class="line">    <span class="keyword">let</span> dirty = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> effectFn = effect(getter,&#123;</span><br><span class="line">        <span class="attr">lazy</span>:<span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>()&#123;</span><br><span class="line">            <span class="comment">//只有脏时才计算值，并将得到的值缓存到value</span></span><br><span class="line">            <span class="keyword">if</span>(dirty)&#123;</span><br><span class="line">                value = effectFn()</span><br><span class="line">                <span class="comment">//将dirty设置为false,下一次访问直接使用缓存到value中的值</span></span><br><span class="line">                dirty = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是此时改变obj.foo或者obj.bar,再访问sumRes.value会发现访问到的值没有发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;<span class="attr">foo</span>: <span class="number">1</span>,<span class="attr">bar</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data,&#123;...&#125;)</span><br><span class="line"><span class="keyword">const</span> sumRes = computed(<span class="function">() =&gt;</span> obj.foo+obj.bar)</span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br><span class="line">obj.foo++;</span><br><span class="line"><span class="comment">//再次访问得到的仍然是3</span></span><br><span class="line"><span class="built_in">console</span>.log(sumRes.value)<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>这是因为，第一次访问sumRes.value的值后，变量dirty被设置为false,代表不需要计算，即使我们修改obj.foo的值，但只要dirty的值为false,就不会重新计算，所有导致我们得到错误的值，因此当obj.foo或者obj.bar的值发生改变时，只要dirty的值重置为true就可以，这时就用到scheduler选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">let</span> dirty = <span class="literal">true</span></span><br><span class="line">    cont effectFn = effect(getter, &#123;</span><br><span class="line">        <span class="attr">lazy</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="function"><span class="title">scheduler</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dirty) &#123;</span><br><span class="line">                dirty = <span class="literal">true</span></span><br><span class="line">                <span class="comment">//当计算属性依赖的响应式数据变化时，手动调用trigger函数触发响应</span></span><br><span class="line">                trigger(obj,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="keyword">get</span> <span class="title">value</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span>(dirty)&#123;</span><br><span class="line">                value = effectFn()</span><br><span class="line">                dirty = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当读取value手动调用track函数进行追踪</span></span><br><span class="line">            track(obj,<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当读取一个计算属性value，需要手动调用track函数，把计算属性返回的对象obj作为target,同时作为第一个参数传递给track函数，当计算属性所依赖的响应式数据变化时会立即调度函数，在调度函数内手动调用trigger函数触发响应即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;effect是用来注册副作用函数，同时它允许指定一些选项参数options,例如指定scheduler调度器控制副作用函数的执行时机和方式，先实现一个懒执行的副作用函数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>数组拍平</title>
    <link href="https://coloey.github.io/2022/10/30/%E6%95%B0%E7%BB%84%E6%8B%8D%E5%B9%B3/"/>
    <id>https://coloey.github.io/2022/10/30/%E6%95%B0%E7%BB%84%E6%8B%8D%E5%B9%B3/</id>
    <published>2022-10-30T12:04:41.000Z</published>
    <updated>2022-10-30T12:05:54.159Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(arr[i]))&#123;</span><br><span class="line">            res = res.concat(flatten(arr[i]))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    <category term="手撕代码" scheme="https://coloey.github.io/categories/JavaScript/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>React合成事件机制</title>
    <link href="https://coloey.github.io/2022/10/30/React%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://coloey.github.io/2022/10/30/React%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</id>
    <published>2022-10-30T08:14:12.000Z</published>
    <updated>2022-10-30T08:16:52.195Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="https://juejin.cn/post/6955636911214067720#comment">https://juejin.cn/post/6955636911214067720#comment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转自&lt;a href=&quot;https://juejin.cn/post/6955636911214067720#comment&quot;&gt;https://juejin.cn/post/6955636911214067720#comment&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Js执行上下文和作用域链以及this</title>
    <link href="https://coloey.github.io/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/"/>
    <id>https://coloey.github.io/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/</id>
    <published>2022-10-29T13:31:37.000Z</published>
    <updated>2022-10-29T14:24:25.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js执行流程："><a href="#Js执行流程：" class="headerlink" title="Js执行流程："></a>Js执行流程：</h1><h2 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h2><h3 id="变量提升："><a href="#变量提升：" class="headerlink" title="变量提升："></a>变量提升：</h3><p><strong>是指在JavaScript代码执行过程中，JavaScript引擎把变量的声明部分和函数的声明部分提升到代码开头的“行为”。变量被提升后，会给变量设置默认值，这个默认值就是我们熟悉的undefined</strong>。</p><h3 id="执行部分的代码"><a href="#执行部分的代码" class="headerlink" title="执行部分的代码"></a>执行部分的代码</h3><p>经过编译后，生成两部分内容：<strong>执行上下文和可执行代码</strong></p><p><strong>执行上下文包括变量环境，词法环境，外部引用Outer（指向外部的执行上下文）和this</strong>，一般包括三种：全局执行上下文，函数执行上下文（调用函数，函数内代码被编译，创建函数上下文，函数执行结束，上下文销毁），eval（使用eval函数时，eval的代码会被编译，并创建执行上下文）</p><p>执行上下文会被js引擎压入调用栈中，执行完毕后，会把执行上下文弹出栈</p><h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><p>Js引擎开始执行可执行代码，按照顺序一行行执行，当出现相同的变量和函数，会保存到执行上下文的变量环境中，<strong>一段代码如果定义了两个相同名字的函数，那么最终生效的是最后一个函数</strong>，而</p><h1 id="作用域和作用域链以及词法作用域"><a href="#作用域和作用域链以及词法作用域" class="headerlink" title="作用域和作用域链以及词法作用域"></a>作用域和作用域链以及词法作用域</h1><p><strong>作用域指在程序定义变量的区域，该位置决定了变量的生命周期，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</strong></p><p>ES6之前只有全局作用域和函数作用域</p><ul><li>全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。</li><li>函数作用域就是在函数内部定义的变量或者函数，并且定义的变量或者函数只能在函数内部被访问。函数执行结束之后，函数内部定义的变量会被销毁。</li></ul><p>ES6后多了一个块级作用域,let和const会创建块级作用域</p><h3 id="变量提升造成的危害："><a href="#变量提升造成的危害：" class="headerlink" title="变量提升造成的危害："></a>变量提升造成的危害：</h3><p>1.变量容易在不被察觉的情况在被覆盖</p><p>2.本应该被销毁的变量没被销毁：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i); </span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>由于变量提升，变量i在创建执行上下文阶段被提升，当for循环结束，变量i没有被销毁</p><h3 id="ES6解决变量提升带来的缺陷："><a href="#ES6解决变量提升带来的缺陷：" class="headerlink" title="ES6解决变量提升带来的缺陷："></a>ES6解决变量提升带来的缺陷：</h3><p>使用let和const支持块级作用域，<strong>块作用域中的变量会被放到执行上下文中的词法环境中</strong>，而不是变量环境，因此块级作用域中的变量不会出现变量提升的现象</p><h2 id="词法作用域："><a href="#词法作用域：" class="headerlink" title="词法作用域："></a>词法作用域：</h2><p><strong>指作用域是由代码中函数声明的位置决定的，所以词法作用域是静态的作用域，通过它能够预测代码在执行过程中如何查找标识符</strong></p><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/%E4%B8%8B%E8%BD%BD.png"></p><p>词法作用域由代码声明时的位置决定，所以整个词法作用域链顺序：foo函数作用域-&gt;bar函数作用域-&gt;main函数作用域-&gt;全局作用域</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客世界 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test1 = <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> myName = <span class="string">&quot;Chrome 浏览器 &quot;</span></span><br><span class="line">        <span class="built_in">console</span>.log(test)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test = <span class="number">2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> test = <span class="number">3</span></span><br><span class="line">        bar()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line"><span class="keyword">let</span> myAge = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="number">1</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>它的执行上下文栈如下：</p><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.png"></p><p>先在执行上下文中的词法环境中查找-&gt;变量环境-&gt;外部作用域,最后在全局执行上下文的词法环境中找到test</p><h1 id="从执行上下文角度看闭包："><a href="#从执行上下文角度看闭包：" class="headerlink" title="从执行上下文角度看闭包："></a>从执行上下文角度看闭包：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName = <span class="string">&quot; 极客时间 &quot;</span></span><br><span class="line">    <span class="keyword">let</span> test1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> test2 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> innerBar = &#123;</span><br><span class="line">        <span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(test1)</span><br><span class="line">            <span class="keyword">return</span> myName</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">setName</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;</span><br><span class="line">            myName = newName</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerBar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo()</span><br><span class="line">bar.setName(<span class="string">&quot; 极客邦 &quot;</span>)</span><br><span class="line">bar.getName()</span><br><span class="line"><span class="built_in">console</span>.log(bar.getName())</span><br></pre></td></tr></table></figure><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/3-16670527476563.png"></p><p>根据词法作用域的规则，内部函数getName和setName总是可以访问到外部函数foo中的变量，左移当InnerBar对象返回给全局变量bar后，虽然foo函数已经执行结束，但是getName和setName函数依然可以使用foo函数中的变量myName和test1,当foo函数执行完成后，整个调用栈状态如下：</p><p><img src="/2022/10/29/Js%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E4%BB%A5%E5%8F%8Athis/4-16670527329372.png"></p><p>闭包定义：<strong>在JavaScript中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束，但是内部函数引用外部函数的变量依然保存在内存中，我们把这些变量的集合称为闭包。</strong></p><h2 id="闭包回收"><a href="#闭包回收" class="headerlink" title="闭包回收"></a>闭包回收</h2><p>如果引用闭包的函数是全局变量，那么闭包会一直存在直到页面关闭；但如果这个闭包以后不再使用的话，就会造成内存泄漏。</p><p>如果引用闭包的函数是个局部变量，等函数销毁后，在下次 JavaScript 引擎执行垃圾回收时，判断闭包这块内容如果已经不再被使用了，那么 JavaScript 引擎的垃圾回收器就会回收这块内存。</p><p>所以在使用闭包的时候，你要尽量注意一个原则：如果该闭包会一直使用，那么它可以作为全局变量而存在；但如果使用频率不高，而且占用内存又比较大的话，那就尽量让它成为一个局部变量。</p><h1 id="在执行上下文的视角讲this"><a href="#在执行上下文的视角讲this" class="headerlink" title="在执行上下文的视角讲this"></a>在执行上下文的视角讲this</h1><p>作用域链和this是两套不同的系统，</p><p><strong>this 是和执行上下文绑定的，也就是说每个执行上下文中都有一个 this</strong>。执行上下文主要分为三种——全局执行上下文、函数执行上下文和 eval 执行上下文，所以对应的 this 也只有这三种——<strong>全局执行上下文中的 this、函数中的 this 和 eval 中的 this。</strong></p><h2 id="全局执行上下文中的-this"><a href="#全局执行上下文中的-this" class="headerlink" title="全局执行上下文中的 this"></a>全局执行上下文中的 this</h2><p>全局执行上下文中的 this 是指向 window 对象的。这也是 this 和作用域链的唯一交点，作用域链的最底端包含了 window 对象，全局执行上下文中的 this 也是指向 window 对象</p><h2 id="函数执行上下文中的-this"><a href="#函数执行上下文中的-this" class="headerlink" title="#函数执行上下文中的 this"></a><a href="https://blog.poetries.top/browser-working-principle/guide/part2/lesson11.html#%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E4%B8%AD%E7%9A%84-this">#</a>函数执行上下文中的 this</h2><p><strong>1. 通过函数的 call 方法设置</strong></p><p><strong>2. 通过对象调用方法设置</strong></p><p><strong>3. 通过构造函数中设置</strong></p><h2 id="this-的设计缺陷以及应对方案"><a href="#this-的设计缺陷以及应对方案" class="headerlink" title="this 的设计缺陷以及应对方案"></a>this 的设计缺陷以及应对方案</h2><p><strong>1. 嵌套函数中的 this 不会从外层函数中继承</strong></p><p>我认为这是一个严重的设计错误，并影响了后来的很多开发者，让他们“前赴后继”迷失在该错误中。我们还是结合下面这样一段代码来分析下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&quot; 极客时间 &quot;</span>, </span><br><span class="line">  <span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125;</span><br><span class="line">    bar()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.showThis()</span><br></pre></td></tr></table></figure><p>解决：</p><p>1.在外层函数中用一个变量self保存this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&quot; 极客时间 &quot;</span>, </span><br><span class="line">  <span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      self.name = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    bar()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.showThis()</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name)</span><br></pre></td></tr></table></figure><p>2 内部函数使用箭头函数的形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&quot; 极客时间 &quot;</span>, </span><br><span class="line">  <span class="attr">showThis</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.name = <span class="string">&quot; 极客邦 &quot;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    bar()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myObj.showThis()</span><br><span class="line"><span class="built_in">console</span>.log(myObj.name)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name)</span><br></pre></td></tr></table></figure><p>箭头函数不会创建自身的执行上下文，因此箭头函数中的this取决于它的作用域链中的上一个执行上下文中的this</p><p><strong>2. 普通函数中的 this 默认指向全局对象 window</strong></p><p>上面我们已经介绍过了，在默认情况下调用一个函数，其执行上下文中的 this 是默认指向全局对象 window 的。</p><p>不过这个设计也是一种缺陷，因为在实际工作中，我们并不希望函数执行上下文中的 this 默认指向全局对象，因为这样会打破数据的边界，造成一些误操作。如果要让函数执行上下文中的 this 指向某个对象，最好的方式是通过 call 方法来显示调用。</p><p>这个问题可以通过设置 JavaScript 的“严格模式”来解决。在严格模式下，默认执行一个函数，其函数的执行上下文中的 this 值是 undefined，这就解决上面的问题了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js执行流程：&quot;&gt;&lt;a href=&quot;#Js执行流程：&quot; class=&quot;headerlink&quot; title=&quot;Js执行流程：&quot;&gt;&lt;/a&gt;Js执行流程：&lt;/h1&gt;&lt;h2 id=&quot;编译阶段&quot;&gt;&lt;a href=&quot;#编译阶段&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>async-await原理</title>
    <link href="https://coloey.github.io/2022/10/28/async-await%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/10/28/async-await%E5%8E%9F%E7%90%86/</id>
    <published>2022-10-28T10:00:41.000Z</published>
    <updated>2022-10-28T12:21:13.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Generator和协程"><a href="#Generator和协程" class="headerlink" title="Generator和协程"></a>Generator和协程</h1><p>生成器函数的具体使用方式：</p><p><strong>在生成器函数内部执行一段代码，如果遇到 yield 关键字，那么 JavaScript 引擎将返回关键字后面的内容给外部，并暂停该函数的执行。</strong><br><strong>外部函数可以通过 next 方法恢复函数的执行</strong></p><p><strong>Generator返回的是一个协程</strong>，协程是一种比线程更轻量级的存在，你可以把协程看出是跑在线程上的任务，<strong>一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，</strong>比如当前执行的是A协程，要启动B协程，那么协程就需要把主线程的控制权交给B协程。如果从A协程启动B协程，把A协程称为B协程的父协程</p><p>一个进程拥有多个线程，一个线程也可以拥有多个协程，<strong>协程不是由操作系统内核管理，而完全是由程序控制（也就是用户态执行）</strong>，好处就是性能得到了提升，不会像线程切换那样消耗资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第一段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第二段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 开始执行第三段 &quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot; 执行结束 &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;generator 2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 0&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> gen = genDemo()</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 1&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 2&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 3&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main 4&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2022/10/28/async-await%E5%8E%9F%E7%90%86/1-16669575177321.png"></p><h1 id="协程四点规则："><a href="#协程四点规则：" class="headerlink" title="协程四点规则："></a>协程四点规则：</h1><ul><li>调用生成器函数genDemo创建一个写成gen,创建后，gen协程并没有立即执行</li><li>要让gen协程执行，需要通过调用gen.next</li><li>当协程正在执行时，可以通过yield关键字来暂停gen协程的执行，并返回主信息给父协程</li><li>如果协程在执行期间，遇到return关键字，那么js引擎会结束当前协程，并将return后面的内容返回给父协程</li></ul><p>父协程有自己的调用栈，gen 协程时也有自己的调用栈，当 gen 协程通过 yield 把控制权交给父协程时，V8 是如何切换到父协程的调用栈？当父协程通过 gen.next 恢复 gen 协程时，又是如何切换 gen 协程的调用栈？</p><p>要搞清楚上面的问题，你需要关注以下两点内容。</p><p>第一点：gen 协程和父协程是在主线程上<strong>交互执行</strong>的，并不是并发执行的，它们之前的切换是通过 <strong>yield 和 gen.next</strong> 来配合完成的。</p><p>第二点：<strong>当在 gen 协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复 gen 协程的调用栈信息。</strong></p><h1 id="使用Promise和generator"><a href="#使用Promise和generator" class="headerlink" title="使用Promise和generator:"></a>使用Promise和generator:</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//foo 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response1 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response1)</span><br><span class="line">    <span class="keyword">let</span> response2 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org/test&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response2)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行 foo 函数的代码</span></span><br><span class="line"><span class="keyword">let</span> gen = foo()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGenPromise</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gen.next().value</span><br><span class="line">&#125;</span><br><span class="line">getGenPromise(gen).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">    <span class="keyword">return</span> getGenPromise(gen)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在foo函数里实现了用同步方式实现异步操作，foo函数外部代码：</p><ul><li>let gen=foo()创建gen协程</li><li>父协程中通过执行gen.next把主线程控制权交给gen协程</li><li>gen协程获取到主线程控制权，就调用fetch函数创建一个Promise对象reponse1,然后通过yield暂停gen协程的执行，将response1返回给父协程</li><li>父协程恢复执行后，调用reponse1.then方法等待结果</li><li>等通过fetch发起的请求完成后，会调用then中回调函数，then中的回调函数拿到结果后，通过调用gen.next放弃主线程控制权</li></ul><p>把执行生成器的代码封装成一个函数，并把这个执行生成器代码的函数称为执行器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response1 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response1)</span><br><span class="line">    <span class="keyword">let</span> response2 = <span class="keyword">yield</span> fetch(<span class="string">&#x27;https://www.geekbang.org/test&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(response2)</span><br><span class="line">&#125;</span><br><span class="line">co(foo());</span><br></pre></td></tr></table></figure><h1 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h1><p>async是一个通过<strong>异步执行</strong>并<strong>隐式返回Promise</strong>作为结果的函数</p><p>调用async的foo函数返回一个Promise对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>foo函数被async标记，当进入该函数时，js引擎会保存当前调用栈信息，当执行到await(100),会默认创建一个Promise对象。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise_ = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve,reject)&#123;</span><br><span class="line">  resolve(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这个promise__对象创建过程中，executor函数调用resolve函数，js引擎会将该任务<strong>提交给微任务，然后js引擎会暂停当前协程执行，将主线程的控制权交给父协程执行，同时将promise__对象返回给父协程</strong>，主线程的控制权已经交给父协程，这时候父协程要做的事就是调用promise_.then监控 promise状态的改变。继续执行父协程的流程，执行console.log(3),父协程执行结束后，在结束之前，会进入微任务检查点，执行微任务队列，微任务队列有resolve（100），触发promise_.then的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise_.then(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//回调函数被激活后，将主线程控制权交给foo协程，并将value值传给协程</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Generator和协程&quot;&gt;&lt;a href=&quot;#Generator和协程&quot; class=&quot;headerlink&quot; title=&quot;Generator和协程&quot;&gt;&lt;/a&gt;Generator和协程&lt;/h1&gt;&lt;p&gt;生成器函数的具体使用方式：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Promise告别回调函数</title>
    <link href="https://coloey.github.io/2022/10/28/Promise%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://coloey.github.io/2022/10/28/Promise%E5%91%8A%E5%88%AB%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2022-10-28T08:02:15.000Z</published>
    <updated>2022-10-28T09:56:59.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步编程的问题："><a href="#异步编程的问题：" class="headerlink" title="异步编程的问题："></a>异步编程的问题：</h1><p>1.代码逻辑不连续</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">response</span>)</span>&#123;<span class="built_in">console</span>.log(response) &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onReject</span>(<span class="params">error</span>)</span>&#123;<span class="built_in">console</span>.log(error) &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; onReject(e)&#125;</span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; onReject(e) &#125;</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; onResolve(xhr.response) &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置请求类型，请求 URL，是否同步信息</span></span><br><span class="line"><span class="keyword">let</span> URL = <span class="string">&#x27;https://time.geekbang.com&#x27;</span></span><br><span class="line">xhr.open(<span class="string">&#x27;Get&#x27;</span>, URL, <span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置参数</span></span><br><span class="line">xhr.timeout = <span class="number">3000</span> <span class="comment">// 设置 xhr 请求的超时时间</span></span><br><span class="line">xhr.responseType = <span class="string">&quot;text&quot;</span> <span class="comment">// 设置响应返回的数据格式</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">&quot;X_TEST&quot;</span>,<span class="string">&quot;time.geekbang&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 发出请求</span></span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>上述代码包含五个回调，导致代码逻辑不连贯，不线性，这就是异步回调影响我们的编程方式。</p><p>2.回调地狱</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">XFetch(makeRequest(<span class="string">&#x27;https://time.geekbang.org/?category&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(response)</span><br><span class="line">      XFetch(makeRequest(<span class="string">&#x27;https://time.geekbang.org/column&#x27;</span>),</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(response)</span><br><span class="line">              XFetch(makeRequest(<span class="string">&#x27;https://time.geekbang.org&#x27;</span>)</span><br><span class="line">                  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(response)</span><br><span class="line">                  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                      <span class="built_in">console</span>.log(e)</span><br><span class="line">                  &#125;)</span><br><span class="line">          &#125;, <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(e)</span><br><span class="line">          &#125;)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol><li><p>嵌套调用，下面的任务依赖上个任务的请求结果，<strong>并在上个任务的回调函数内部执行新的业务逻辑，这样嵌套层次多了以后，代码可读性变差</strong></p></li><li><p><strong>任务不确定性，</strong>执行每个任务有两种可能的结果（成功或者失败），所以体现在代码中就需要对每个任务的执行结果做两次判断，这种对每个任务都要进行一次额外的错误处理方式，明显增加了代码的混乱程度。</p></li></ol><p>解决两个问题：</p><ol><li>消灭嵌套调用</li><li>合并多个任务的错误处理</li></ol><h1 id="Promise如何消灭嵌套调用和多次错误处理"><a href="#Promise如何消灭嵌套调用和多次错误处理" class="headerlink" title="Promise如何消灭嵌套调用和多次错误处理"></a>Promise如何消灭嵌套调用和多次错误处理</h1><p>产生嵌套函数的<strong>主要原因就是在发起任务请求时会带上回调函数，这样当任务处理结束后，下个任务就只能在回调函数中处理</strong></p><p>1.<strong>Promise实现回调函数延时绑定</strong>。在代码上体现就是先创建Promise对象x1,通过Promise的构造函数executor来执行业务逻辑，创建好Promise对象x1后，再使用x1.then设置回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象 x1，并在 executor 函数中执行业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//x1 延迟绑定回调函数 onResolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line">x1.then(onResolve)</span><br></pre></td></tr></table></figure><p>2.将回调函数onResolve的返回值穿透到最外层，<strong>因为我们会根据onResolve函数的传入值来决定创建什么类型的Promise任务，创建好的Promise对象需要返回到最外层，这样就可以摆脱嵌套循环。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象 x1，并在 executor 函数中执行业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//x1 延迟绑定回调函数 onResolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">    <span class="keyword">let</span> x2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        resolve(value+<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> x2;<span class="comment">//内部返回值穿透到最外层</span></span><br><span class="line">&#125;</span><br><span class="line">x1.then(onResolve)</span><br></pre></td></tr></table></figure><p>处理异常：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rand = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(rand)</span><br><span class="line">    <span class="keyword">if</span> (rand &gt; <span class="number">0.5</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        reject()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p0 = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p1 = p0.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;succeed-1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p3 = p1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;succeed-2&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> p4 = p3.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;succeed-3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">p4.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>这段代码四个Promise对象，无论哪个对象抛出异常，都可以通过最后一个对象p4.catch捕获异常，通过这种方式可以将所有Promise对象的错误合并到一个函数来处理，这样就解决了每个任务需要单独处理异常的问题。Promise对象的错误具有“冒泡”性质，会一直向后传递，直到被onReject函数处理或catch语句捕获为止。具备这样的“冒泡”特性后，就不需要在每个Promise对象中单独捕获异常。</p><p>Promise与微任务</p><p>由于Promise采用回调函数延迟绑定技术，所以在执行resolve函数时，回调函数还没有绑定，那么只能推迟回调函数的执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onResolve_=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> onReject_=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//模拟实现resolve和then</span></span><br><span class="line">    <span class="built_in">this</span>.then=<span class="function"><span class="keyword">function</span>(<span class="params">onResolve,onReject</span>)</span>&#123;</span><br><span class="line">        onResolve_ = onResolve</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        onResolve_(value)</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve,<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> demo = <span class="keyword">new</span> <span class="built_in">Promise</span>(executor)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onResolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;</span><br><span class="line">demo.then(onResolve)</span><br></pre></td></tr></table></figure><p><strong>代码报错是由于Promise的延迟绑定导致的</strong>，在调用onResolve_时，Promise.then还没执行，所以会报onResolve_ is not a function错误</p><p>因此，改造Promise的resolve方法，让resolve延迟调用onResolve_</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> onResolve_=<span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> onReject_=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//模拟实现resolve和then</span></span><br><span class="line">    <span class="built_in">this</span>.then=<span class="function"><span class="keyword">function</span>(<span class="params">onResolve,onReject</span>)</span>&#123;</span><br><span class="line">        onResolve_ = onResolve</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">           onResolve_(value)</span><br><span class="line">        &#125;,<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    executor(resolve,<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用定时器推迟onResolve执行，用定时器效率低，<strong>因此用微任务</strong></p><p>参考链接：</p><p><a href="https://blog.poetries.top/browser-working-principle/guide/part4/lesson19.html#promise-%E6%B6%88%E7%81%AD%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E5%92%8C%E5%A4%9A%E6%AC%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">https://blog.poetries.top/browser-working-principle/guide/part4/lesson19.html#promise-%E6%B6%88%E7%81%AD%E5%B5%8C%E5%A5%97%E8%B0%83%E7%94%A8%E5%92%8C%E5%A4%9A%E6%AC%A1%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异步编程的问题：&quot;&gt;&lt;a href=&quot;#异步编程的问题：&quot; class=&quot;headerlink&quot; title=&quot;异步编程的问题：&quot;&gt;&lt;/a&gt;异步编程的问题：&lt;/h1&gt;&lt;p&gt;1.代码逻辑不连续&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>nextTick原理</title>
    <link href="https://coloey.github.io/2022/10/28/nextTick%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/10/28/nextTick%E5%8E%9F%E7%90%86/</id>
    <published>2022-10-28T04:21:20.000Z</published>
    <updated>2022-11-01T01:20:55.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么有nextTick？"><a href="#为什么有nextTick？" class="headerlink" title="为什么有nextTick？"></a>为什么有nextTick？</h1><p>因为vue采用的异步更新策略，当检测到数据发生变化时不会立即更新DOM，而是开启一个任务队列，并缓存在同一个事件循环中发送的所有变更，<strong>当直接操作DOM改变数据时，DOM不会立刻更新，会等到异步队列清空，也就是下一个事件循环开始时执行更新时才会进行必要的DOM更新</strong>，这种做法带来的好处就是可以将多次数据更新合并成一次，减少操作DOM的次数，如果不采用这种方法，假设数据改变100次就要去更新100次DOM，而频繁的DOM更新是很耗性能的；</p><h1 id="nextTick作用"><a href="#nextTick作用" class="headerlink" title="nextTick作用"></a>nextTick作用</h1><p>nextTick <strong>接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后才执行</strong>；<br><strong>使用场景</strong>：想要操作 <em>基于最新数据生成的DOM</em> 时，就将这个操作放在 nextTick 的回调中</p><h1 id="nextTick实现原理"><a href="#nextTick实现原理" class="headerlink" title="nextTick实现原理"></a>nextTick实现原理</h1><p>将传入的回调函数包装成异步任务，异步任务又分为微任务和宏任务，为了尽快执行选择微任务，nextTick 提供了四种异步方法 Promise.then、MutationObserver、setImmediate、setTimeout(fn,0)</p><h2 id="源码解读："><a href="#源码解读：" class="headerlink" title="源码解读："></a>源码解读：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">&#x27;shared/util&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; handleError &#125; <span class="keyword">from</span> <span class="string">&#x27;./error&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isIE, isIOS, isNative &#125; <span class="keyword">from</span> <span class="string">&#x27;./env&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  上面三行与核心代码关系不大，了解即可</span></span><br><span class="line"><span class="comment">//  noop 表示一个无操作空函数，用作函数默认值，防止传入 undefined 导致报错</span></span><br><span class="line"><span class="comment">//  handleError 错误处理函数</span></span><br><span class="line"><span class="comment">//  isIE, isIOS, isNative 环境判断函数，</span></span><br><span class="line"><span class="comment">//  isNative 判断某个属性或方法是否原生支持，如果不支持或通过第三方实现支持都会返回 false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> isUsingMicroTask = <span class="literal">false</span>     <span class="comment">// 标记 nextTick 最终是否以微任务执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> callbacks = []     <span class="comment">// 存放调用 nextTick 时传入的回调函数</span></span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>     <span class="comment">// 标记是否已经向任务队列中添加了一个任务，如果已经添加了就不能再添加了</span></span><br><span class="line">    <span class="comment">// 当向任务队列中添加了任务时，将 pending 置为 true，当任务被执行时将 pending 置为 false</span></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明 nextTick 函数，接收一个回调函数和一个执行上下文作为参数</span></span><br><span class="line"><span class="comment">// 回调的 this 自动绑定到调用它的实例上</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">nextTick</span>(<span class="params">cb?: <span class="built_in">Function</span>, ctx?: <span class="built_in">Object</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> _resolve</span><br><span class="line">    <span class="comment">// 将传入的回调函数存放到数组中，后面会遍历执行其中的回调</span></span><br><span class="line">    callbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cb) &#123;   <span class="comment">// 对传入的回调进行 try catch 错误捕获</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cb.call(ctx)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;    <span class="comment">// 进行统一的错误处理</span></span><br><span class="line">                handleError(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">            _resolve(ctx)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果当前没有在 pending 的回调，</span></span><br><span class="line">    <span class="comment">// 就执行 timeFunc 函数选择当前环境优先支持的异步方法</span></span><br><span class="line">    <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">        pending = <span class="literal">true</span></span><br><span class="line">        timerFunc()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果没有传入回调，并且当前环境支持 promise，就返回一个 promise</span></span><br><span class="line">    <span class="comment">// 在返回的这个 promise.then 中 DOM 已经更新好了，</span></span><br><span class="line">    <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            _resolve = resolve</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前环境优先支持的异步方法，优先选择微任务</span></span><br><span class="line"><span class="comment">// 优先级：Promise---&gt; MutationObserver---&gt; setImmediate---&gt; setTimeout</span></span><br><span class="line"><span class="comment">// setTimeout 可能产生一个 4ms 的延迟，而 setImmediate 会在主线程执行完后立刻执行</span></span><br><span class="line"><span class="comment">// setImmediate 在 IE10 和 node 中支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当在同一轮事件循环中多次调用 nextTick 时 ,timerFunc 只会执行一次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timerFunc   </span><br><span class="line"><span class="comment">// 判断当前环境是否原生支持 promise</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;  <span class="comment">// 支持 promise</span></span><br><span class="line">    <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 用 promise.then 把 flushCallbacks 函数包裹成一个异步微任务</span></span><br><span class="line">        p.then(flushCallbacks)</span><br><span class="line">        <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记当前 nextTick 使用的微任务</span></span><br><span class="line">    isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果不支持 promise，就判断是否支持 MutationObserver</span></span><br><span class="line">    <span class="comment">// 不是IE环境，并且原生支持 MutationObserver，那也是一个微任务</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> MutationObserver !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">    isNative(MutationObserver) ||</span><br><span class="line">    MutationObserver.toString() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">    <span class="comment">// new 一个 MutationObserver 类</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(flushCallbacks) </span><br><span class="line">    <span class="comment">// 创建一个文本节点</span></span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="built_in">String</span>(counter))   </span><br><span class="line">    <span class="comment">// 监听这个文本节点，当数据发生变化就执行 flushCallbacks </span></span><br><span class="line">    observer.observe(textNode, &#123; <span class="attr">characterData</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">        textNode.data = <span class="built_in">String</span>(counter)  <span class="comment">// 数据更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    isUsingMicroTask = <span class="literal">true</span>    <span class="comment">// 标记当前 nextTick 使用的微任务</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断当前环境是否原生支持 setImmediate</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123; setImmediate(flushCallbacks)  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以上三种都不支持就选择 setTimeout</span></span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123; <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果多次调用 nextTick，会依次执行上面的方法，将 nextTick 的回调放在 callbacks 数组中</span></span><br><span class="line"><span class="comment">// 最后通过 flushCallbacks 函数遍历 callbacks 数组的拷贝并执行其中的回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushCallbacks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    pending = <span class="literal">false</span>    </span><br><span class="line">    <span class="keyword">const</span> copies = callbacks.slice(<span class="number">0</span>)    <span class="comment">// 拷贝一份 callbacks</span></span><br><span class="line">    callbacks.length = <span class="number">0</span>    <span class="comment">// 清空 callbacks</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.length; i++) &#123;    <span class="comment">// 遍历执行传入的回调</span></span><br><span class="line">        copies[i]()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么要拷贝一份 callbacks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 callbacks.slice(0) 将 callbacks 拷贝出来一份，</span></span><br><span class="line"><span class="comment">// 是因为考虑到在 nextTick 回调中可能还会调用 nextTick 的情况,</span></span><br><span class="line"><span class="comment">// 如果在 nextTick 回调中又调用了一次 nextTick，则又会向 callbacks 中添加回调，</span></span><br><span class="line"><span class="comment">// 而 nextTick 回调中的 nextTick 应该放在下一轮执行，</span></span><br><span class="line"><span class="comment">// 否则就可能出现一直循环的情况，</span></span><br><span class="line"><span class="comment">// 所以需要将 callbacks 复制一份出来然后清空，再遍历备份列表执行回调</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;为什么有nextTick？&quot;&gt;&lt;a href=&quot;#为什么有nextTick？&quot; class=&quot;headerlink&quot; title=&quot;为什么有nextTick？&quot;&gt;&lt;/a&gt;为什么有nextTick？&lt;/h1&gt;&lt;p&gt;因为vue采用的异步更新策略，当检测到数据发生变化时</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>fiber架构原理</title>
    <link href="https://coloey.github.io/2022/10/25/fiber%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/10/25/fiber%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</id>
    <published>2022-10-25T13:38:41.000Z</published>
    <updated>2022-10-25T14:21:28.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fiber起源"><a href="#Fiber起源" class="headerlink" title="Fiber起源"></a>Fiber起源</h1><p>React15之前，Reconciler采用递归创建虚拟DOM，递归过程不能中断，如果组件树的层级很深，递归会占用线程很多时间，造成卡顿</p><p>React16将递归的无法中断的更新重构为异步的可中断更新，由于曾经用于递归的虚拟DOM数据结构已经无法满足需要，全新的Fiber诞生</p><h1 id="Fiber含义"><a href="#Fiber含义" class="headerlink" title="Fiber含义"></a>Fiber含义</h1><p>1.作为架构，React15的Reconciler采用递归的方式执行，数据保存在递归调用栈中，所以被称为stack Reconciler,React 16 的Reconciler基于Fiber节点实现，<strong>被称为Fiber Reconciler</strong></p><p>2.作为静态数据结构来说，每个Fiber节点对应于一个React element**,保存了该组件的类型**（函数组件/类组件/原生组件…），对应的DOM结点信息</p><p>3.对于动态的工作单元来说，每个Fiber结点保存了<strong>本次更新中该组件改变的状态，要执行的工作（需要被删除/被插入页面/被更新）</strong></p><h1 id="Fiber结构："><a href="#Fiber结构：" class="headerlink" title="Fiber结构："></a>Fiber结构：</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FiberNode</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    tag: WorkTag,</span></span></span><br><span class="line"><span class="params"><span class="function">    pendingProps:mixed,</span></span></span><br><span class="line"><span class="params"><span class="function">    key: <span class="literal">null</span>|stirng,</span></span></span><br><span class="line"><span class="params"><span class="function">    mode: TypeofMode,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//作为静态数据结构的属性</span></span><br><span class="line">        <span class="built_in">this</span>.tag = tag;</span><br><span class="line">        <span class="built_in">this</span>.key=key;</span><br><span class="line">        <span class="built_in">this</span>.elementType=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.type=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.stateNode=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//用于连接其他Fiber结点形成Fiber树</span></span><br><span class="line">        <span class="built_in">this</span>.return=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.child=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.sibling=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.index=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.ref=<span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//作为动态的工作单元的属性</span></span><br><span class="line">        <span class="built_in">this</span>.pendingProps=pendingProps;</span><br><span class="line">        <span class="built_in">this</span>.memoizedProps=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.updateQueue=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.memoizedState=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.dependencies=<span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.mode=mode;</span><br><span class="line">        <span class="built_in">this</span>.effectTag = NoEffect;</span><br><span class="line">        <span class="built_in">this</span>.nextEffect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.firstEffect = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.lastEffect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调度优先级相关</span></span><br><span class="line">        <span class="built_in">this</span>.lanes = NoLanes;</span><br><span class="line">        <span class="built_in">this</span>.childLanes = NoLanes;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指向该fiber在另一次更新时对应的fiber</span></span><br><span class="line">        <span class="built_in">this</span>.alternate = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="作为架构来说"><a href="#作为架构来说" class="headerlink" title="作为架构来说"></a>作为架构来说</h1><p>每个Fiber节点有个对应的React element,多个Fiber节点如何连接成树？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指向父级Fiber结点</span></span><br><span class="line"><span class="built_in">this</span>.return=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//指向子Fiber节点</span></span><br><span class="line"><span class="built_in">this</span>.child=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//指向右边第一个兄弟Fiber结点</span></span><br><span class="line"><span class="built_in">this</span>.sibling=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h1 id="作为静态的数据结构"><a href="#作为静态的数据结构" class="headerlink" title="作为静态的数据结构"></a>作为静态的数据结构</h1><p>保存了相关组件的信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fiber对应组件的类型 Function/Class/Host...</span></span><br><span class="line"><span class="built_in">this</span>.tag = tag;</span><br><span class="line"><span class="comment">// key属性</span></span><br><span class="line"><span class="built_in">this</span>.key = key;</span><br><span class="line"><span class="comment">// 大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹</span></span><br><span class="line"><span class="built_in">this</span>.elementType = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName</span></span><br><span class="line"><span class="built_in">this</span>.type = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// Fiber对应的真实DOM节点</span></span><br><span class="line"><span class="built_in">this</span>.stateNode = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h1 id="作为动态的工作单元"><a href="#作为动态的工作单元" class="headerlink" title="作为动态的工作单元"></a>作为动态的工作单元</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存本次更新造成的状态改变相关信息</span></span><br><span class="line"><span class="built_in">this</span>.pendingProps = pendingProps;</span><br><span class="line"><span class="built_in">this</span>.memoizedProps = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.updateQueue = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.memoizedState = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.dependencies = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.mode = mode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存本次更新会造成的DOM操作</span></span><br><span class="line"><span class="built_in">this</span>.effectTag = NoEffect;</span><br><span class="line"><span class="built_in">this</span>.nextEffect = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.firstEffect = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.lastEffect = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>保存优先级调度的相关信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调度优先级相关</span></span><br><span class="line"><span class="built_in">this</span>.lanes = NoLanes;</span><br><span class="line"><span class="built_in">this</span>.childLanes = NoLanes;</span><br></pre></td></tr></table></figure><h1 id="Fiber架构的工作原理："><a href="#Fiber架构的工作原理：" class="headerlink" title="Fiber架构的工作原理："></a>Fiber架构的工作原理：</h1><h2 id="双缓存："><a href="#双缓存：" class="headerlink" title="双缓存："></a>双缓存：</h2><p><strong>在内存中构建并直接替换的技术叫做双缓存</strong></p><p>React使用双缓存来完成Fiber树的构建和替换——对应着DOM树的创建和更新</p><h2 id="双缓存Fiber树"><a href="#双缓存Fiber树" class="headerlink" title="双缓存Fiber树"></a>双缓存Fiber树</h2><p>React中最多同时存在两棵Fiber树，当前屏幕显示内容对应的Fiber树称为current Fiber树，正在内存中构建的Fiber树称为workInProgress Fiber树，current Fiber树中的Fiber节点称为current fiber,workInProgress Fiber树中的Fiber节点被称为workInProgress fiber,它们通过alternate属性连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">currentFiber.alternate === workInProgressFiber;</span><br><span class="line">workInProgressFiber.alternate === currentFiber;</span><br></pre></td></tr></table></figure><p>React应用的根节点通过<strong>使用current指针在不同的Fiber树的rootFiber间切换来完成current Fiber树之间的切换</strong></p><p>即当workInProgress Fiber树构建完成交给Renderer渲染在页面后，应用根结点的current指针指向workInProgress Fiber树，此时workInProgress Fiber树就变为current Fiber树</p><p>总结:</p><p>Reconciler工作的阶段称为render阶段，因为该阶段会调用组件的render方法</p><p>Renderer工作的阶段称为commit阶段，commit阶段会把renderer阶段提交的信息渲染到页面</p><p>render与commit阶段统称为work,即React在工作中，相对应的，如果任务正在Scheduler内调度，不属于work.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fiber起源&quot;&gt;&lt;a href=&quot;#Fiber起源&quot; class=&quot;headerlink&quot; title=&quot;Fiber起源&quot;&gt;&lt;/a&gt;Fiber起源&lt;/h1&gt;&lt;p&gt;React15之前，Reconciler采用递归创建虚拟DOM，递归过程不能中断，如果组件树的层级很</summary>
      
    
    
    
    <category term="React深入学习" scheme="https://coloey.github.io/categories/React%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>手写一个loader</title>
    <link href="https://coloey.github.io/2022/10/24/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAloader/"/>
    <id>https://coloey.github.io/2022/10/24/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAloader/</id>
    <published>2022-10-24T01:48:09.000Z</published>
    <updated>2022-10-24T02:33:44.565Z</updated>
    
    <content type="html"><![CDATA[<p>loader是导出为一个函数的node模块，该函数在loader转换资源时调用，给定函数将调用loader API,并通过this上下文访问</p><h1 id="最简单的loader源码："><a href="#最简单的loader源码：" class="headerlink" title="最简单的loader源码："></a>最简单的loader源码：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//source为compiler传递给Loader的一个文件的原内容</span></span><br><span class="line">    <span class="comment">//该函数需要返回处理后的内容</span></span><br><span class="line">    <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获得Loader的options"><a href="#获得Loader的options" class="headerlink" title="获得Loader的options:"></a>获得Loader的options:</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">&quot;loader-utils&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取到用户给当前loader传入的options</span></span><br><span class="line">    <span class="keyword">const</span> options = loaderUtils.getOptions(<span class="built_in">this</span>)</span><br><span class="line">    <span class="keyword">return</span> source</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="返回其他结果"><a href="#返回其他结果" class="headerlink" title="返回其他结果"></a>返回其他结果</h1><p>有些场景下还需要返回除了内容外的东西，比如source Map,以方便调试源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//通过this.callback告诉webpack返回的结果</span></span><br><span class="line">    <span class="built_in">this</span>.callback(<span class="literal">null</span>,source,sourceMaps)</span><br><span class="line">    <span class="comment">//当使用this.callback返回内容时，该loader必须返回undefined</span></span><br><span class="line">    <span class="comment">//以让webpack知道该loader返回的结果在thi.callback中，而不是在return中</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this.callback是webpack给loader注入的api,以方便loader和webpack之间的通信，this.callback详细用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.callback(</span><br><span class="line">    <span class="comment">// 当无法转换原内容时，给 Webpack 返回一个 Error</span></span><br><span class="line">    err: <span class="built_in">Error</span> | <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 原内容转换后的内容</span></span><br><span class="line">    <span class="attr">content</span>: string | Buffer,</span><br><span class="line">    <span class="comment">// 用于把转换后的内容得出原内容的 Source Map，方便调试</span></span><br><span class="line">    sourceMap?: SourceMap,</span><br><span class="line">    <span class="comment">// 如果本次转换为原内容生成了 AST 语法树，可以把这个 AST 返回，</span></span><br><span class="line">    <span class="comment">// 以方便之后需要 AST 的 Loader 复用该 AST，以避免重复生成 AST，提升性能</span></span><br><span class="line">    abstractSyntaxTree?: AST</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><p>loader有同步和异步，同步loader的转换流程都是同步的，转换完成后再返回结果，但在有些场景下转换是异步的，例如一些网络请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 告诉 Webpack 本次转换是异步的，Loader 会在 callback 中回调结果</span></span><br><span class="line">    <span class="keyword">var</span> callback = <span class="built_in">this</span>.async();</span><br><span class="line">    someAsyncOperation(source, <span class="function"><span class="keyword">function</span>(<span class="params">err, result, sourceMaps, ast</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 通过 callback 返回异步执行后的结果</span></span><br><span class="line">        callback(err, result, sourceMaps, ast);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="本地测试自定义loader"><a href="#本地测试自定义loader" class="headerlink" title="本地测试自定义loader:"></a>本地测试自定义loader:</h1><p>1.在rule对象使用path.resolve指定一个本地文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: path.resolve(<span class="string">&#x27;path/to/loader.js&#x27;</span>),</span><br><span class="line">                        <span class="attr">options</span>:&#123;</span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配多个loader可以使用resolveLoader.modules配置，webpack将会从这些目录中搜索这些loaders，例如你的项目中有一个/loaders本地目录：</p><p>webpack.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">resolveLoader</span>:&#123;</span><br><span class="line">        <span class="attr">modules</span>: [<span class="string">&#x27;node_modules&#x27;</span>,path.resolve(__dirname,<span class="string">&#x27;loaders&#x27;</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;loader是导出为一个函数的node模块，该函数在loader转换资源时调用，给定函数将调用loader API,并通过this上下文访问&lt;/p&gt;
&lt;h1 id=&quot;最简单的loader源码：&quot;&gt;&lt;a href=&quot;#最简单的loader源码：&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="webpack" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>编写一个插件</title>
    <link href="https://coloey.github.io/2022/10/22/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/"/>
    <id>https://coloey.github.io/2022/10/22/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6/</id>
    <published>2022-10-22T08:11:26.000Z</published>
    <updated>2022-10-22T10:10:24.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack插件由以下组成："><a href="#webpack插件由以下组成：" class="headerlink" title="webpack插件由以下组成："></a>webpack插件由以下组成：</h1><p>一个javaScript命名函数或者JavaScript类</p><p>由插件函数的prototype上定义的一个apply方法</p><p>指定一个绑定到webpack自身的事件钩子</p><p>处理webpack内部实例的特定数据</p><p>功能完成后调用webpack提供的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个 JavaScript 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExampleWebpackPlugin</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在插件函数的 prototype 上定义一个 `apply` 方法，以 compiler 为参数。</span></span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">compiler</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 指定一个挂载到 webpack 自身的事件钩子。</span></span><br><span class="line">    compiler.hooks.emit.tapAsync(</span><br><span class="line">      <span class="string">&#x27;MyExampleWebpackPlugin&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;这是一个示例插件！&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">&#x27;这里表示了资源的单次构建的 `compilation` 对象：&#x27;</span>,</span><br><span class="line">          compilation</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用 webpack 提供的插件 API 处理构建过程</span></span><br><span class="line">        compilation.addModule(<span class="comment">/* ... */</span>);</span><br><span class="line"></span><br><span class="line">        callback();</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack通过plugin机制让其更加灵活，以适应各种应用场景，在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的api改变输出结果</p><h1 id="Compiler和Compilation"><a href="#Compiler和Compilation" class="headerlink" title="Compiler和Compilation"></a>Compiler和Compilation</h1><p>插件开发中最重要的两个资源就是compiler和compilation对象，理解它们的角色是扩展webpack引擎重要的第一步</p><p>compiler对象代表了完整的webpack环境配置，这个对象在<strong>启动webpack时被一次性实例化</strong>，可以简单理解为webpack实例，并配置好所有可操作的设置，包括options,loader和plugin。当在webpack环境中启用一个插件时，插件将受到compiler对象的引用，可以使用它来访问webpack的主环境</p><p>compilation对象代表一次资源版本构建，当运行webpack开发环境中间件时，每当检测一个文件变化，就会创建一个新的compilation，从而生成一组新的编译资源，一个compilation对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖大的状态信息。compilation对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用，通过compilation也能读取到compiler对象</p><p><strong>compiler和compilation区别在于：compiler代表了整个webpack从启动到关闭的生命周期，而compilation只是代表了一次新的编译</strong></p><h1 id="基本插件架构"><a href="#基本插件架构" class="headerlink" title="基本插件架构"></a>基本插件架构</h1><p>插件是由具有apply方法的prototype对象所实例化出来的，这个apply方法在安装插件时，会被webpack compiler调用一次，apply方法可以接受一个webpack compiler对象的引用，从而可以在回调函数中访问到compiler对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldPlugin</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">apply</span>(<span class="params">compiler</span>)</span> &#123;</span><br><span class="line">    compiler.hooks.done.tap(</span><br><span class="line">      <span class="string">&#x27;Hello World Plugin&#x27;</span>,</span><br><span class="line">      <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        stats <span class="comment">/* 绑定 done 钩子后，stats 会作为参数传入。 */</span></span></span></span><br><span class="line"><span class="params"><span class="function">      </span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HelloWorldPlugin;</span><br></pre></td></tr></table></figure><p>安装插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> HelloWorldPlugin = <span class="built_in">require</span>(<span class="string">&#x27;hello-world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ... 这里是其他配置 ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> HelloWorldPlugin(&#123; <span class="attr">options</span>: <span class="literal">true</span> &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;webpack插件由以下组成：&quot;&gt;&lt;a href=&quot;#webpack插件由以下组成：&quot; class=&quot;headerlink&quot; title=&quot;webpack插件由以下组成：&quot;&gt;&lt;/a&gt;webpack插件由以下组成：&lt;/h1&gt;&lt;p&gt;一个javaScript命名函数或者</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="webpack" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>实习遇到的问题</title>
    <link href="https://coloey.github.io/2022/10/20/%E5%AE%9E%E4%B9%A0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://coloey.github.io/2022/10/20/%E5%AE%9E%E4%B9%A0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-10-20T10:01:08.000Z</published>
    <updated>2022-10-20T10:01:08.672Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML,CSS和Js如何变成页面</title>
    <link href="https://coloey.github.io/2022/10/19/HTML-CSS%E5%92%8CJs%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E9%A1%B5%E9%9D%A2/"/>
    <id>https://coloey.github.io/2022/10/19/HTML-CSS%E5%92%8CJs%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E9%A1%B5%E9%9D%A2/</id>
    <published>2022-10-19T11:55:01.000Z</published>
    <updated>2022-10-19T13:14:53.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h2><p>将HTML转换为浏览器能够理解的DOM树结构</p><h2 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h2><p>生成DOM树后，根据CSS样式表，计算出DOM树中所有节点的样式</p><h2 id="布局阶段"><a href="#布局阶段" class="headerlink" title="布局阶段"></a>布局阶段</h2><p>1.构建布局树：</p><ul><li>遍历DOM树中所有可见结点，并把这些结点加到布局中</li><li>不可见的结点会被布局树忽略，如head标签下大雾全部内容，以及display:none的元素</li></ul><p>2.布局计算</p><p>计算布局树中节点的坐标位置</p><h2 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h2><p>1拥有层叠上下文属性的元素会被提升为单独的一层</p><p>2需要剪裁的地方也会被创建为图层</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">overflow</span>:auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="css">        &#125; </span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>所以元素有了层叠上下文的属性或者需要被剪裁，那么就会被提升成为单独一层，你可以参看下图：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>从上图我们可以看到，document层上有A和B层，而B层之上又有两个图层。这些图层组织在一起也是一颗树状结构。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>图层树是基于布局树来创建的，为了找出哪些元素需要在哪些层中，渲染引擎会遍历布局树来创建层树（Update LayerTree）。<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当div里面文字内容过多，文字显示区域超出200*200面积，产生了剪裁，渲染引擎会把裁剪文字内容的一部分用于显示在div区域，出现裁剪情况时，渲染引擎会为文字不烦单独创建一个层，如果出现滚动条，滚动条也会被提升为单独的层</p><h2 id="图层绘制"><a href="#图层绘制" class="headerlink" title="图层绘制"></a>图层绘制</h2><p>图层树构建完成后，渲染引擎会对图层树中每个图层进行绘制</p><p>渲染引擎会把图层的绘制拆分成很多小的绘制指令，然后把这些指令按照顺序组成一个待绘制列表</p><h2 id="栅格化操作"><a href="#栅格化操作" class="headerlink" title="栅格化操作"></a>栅格化操作</h2><p>绘制列表是用来记录绘制顺序和绘制指令的列表，实际上绘制操作是由渲染引擎中的合成线程完成的，当图层的绘制列表准备好后，主线程会把绘制列表提交给合成线程，合成线程会把图层划分为图块，这些图块的大小通常为256x256或512*x512,合成线程按照视口附近的图块优先生成位图，实际生成的位图由栅格化来执行，栅格化就是将图块转为位图，渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行。使用GPU生成位图的过程叫做快速栅格化。</p><h2 id="合成和显示"><a href="#合成和显示" class="headerlink" title="合成和显示"></a>合成和显示</h2><p>图块栅格化完成后，合成线程就会生成一个绘制图块命令”DrawQuad”，将该命令提交给浏览器进程，浏览器进程有一个viz组件，用来接收合成线程发过来的DrawQuad命令，根据该命令，将页面内容绘制到内存中，最后将内存显示在屏幕上</p><p><img src="/2022/10/19/HTML-CSS%E5%92%8CJs%E5%A6%82%E4%BD%95%E5%8F%98%E6%88%90%E9%A1%B5%E9%9D%A2/1-16661850075471.png"></p><h2 id="渲染流程总结："><a href="#渲染流程总结：" class="headerlink" title="渲染流程总结："></a>渲染流程总结：</h2><ul><li>渲染进程将HTML内容转换为浏览器能读懂的DOM树结构</li><li>渲染引擎将CSS样式表转化为浏览器能理解的styleSheets,计算出DOM结点样式</li><li>创建布局树，并计算元素的布局信息</li><li>对布局树进行分层，并生成分层树</li><li>为每个图层生成绘制列表，并将其提交到合成线程</li><li>合成线程将图层分层图块，并在光栅化线程池中将图块转为位图</li><li>合成线程发送绘制图块命令DrawQuad给浏览器进程</li><li>浏览器进程根据DrawQuad消息生成页面，并显示到显示器上</li></ul><p>参考链接：</p><p><a href="https://blog.poetries.top/browser-working-principle/guide/part1/lesson06.html#_1-%E6%9B%B4%E6%96%B0%E4%BA%86%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E4%BD%95%E5%B1%9E%E6%80%A7%EF%BC%88%E9%87%8D%E6%8E%92%EF%BC%89">https://blog.poetries.top/browser-working-principle/guide/part1/lesson06.html#_1-%E6%9B%B4%E6%96%B0%E4%BA%86%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E4%BD%95%E5%B1%9E%E6%80%A7%EF%BC%88%E9%87%8D%E6%8E%92%EF%BC%89</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;构建DOM树&quot;&gt;&lt;a href=&quot;#构建DOM树&quot; class=&quot;headerlink&quot; title=&quot;构建DOM树&quot;&gt;&lt;/a&gt;构建DOM树&lt;/h2&gt;&lt;p&gt;将HTML转换为浏览器能够理解的DOM树结构&lt;/p&gt;
&lt;h2 id=&quot;样式计算&quot;&gt;&lt;a href=&quot;#样式计</summary>
      
    
    
    
    <category term="浏览器" scheme="https://coloey.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>声明空间</title>
    <link href="https://coloey.github.io/2022/10/15/%E5%A3%B0%E6%98%8E%E7%A9%BA%E9%97%B4/"/>
    <id>https://coloey.github.io/2022/10/15/%E5%A3%B0%E6%98%8E%E7%A9%BA%E9%97%B4/</id>
    <published>2022-10-15T13:41:52.000Z</published>
    <updated>2022-10-15T14:04:51.569Z</updated>
    
    <content type="html"><![CDATA[<p>在TypeScript中存在两种声明空间：类型声明空间和变量声明空间</p><h1 id="类型声明空间"><a href="#类型声明空间" class="headerlink" title="类型声明空间"></a>类型声明空间</h1><p>类型声明空间包含用来当做类型注解的内容，例如下面的类型声明：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> Bar&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Bas = &#123;&#125;</span><br></pre></td></tr></table></figure><p>你可以将Foo,Bar,Bas作为类型注解使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo: Foo;</span><br><span class="line"><span class="keyword">let</span> bar: Bar;</span><br><span class="line"><span class="keyword">let</span> bas: Bas;</span><br></pre></td></tr></table></figure><p>尽管你定义了interface Bar,却不能把它作为一个变量使用，因为它没有定义在变量声明空间中。</p><h1 id="变量声明空间"><a href="#变量声明空间" class="headerlink" title="变量声明空间"></a>变量声明空间</h1><p>变量声明空间包含可用作变量的内容，在上文中Class Foo提供了一个类型Foo到类型声明空间，此外它同样提供了一个变量Foo到变量声明空间</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> someVar = Foo;</span><br><span class="line"><span class="keyword">const</span> someOtherVar = <span class="number">123</span></span><br></pre></td></tr></table></figure><p>一些用var声明的变量，也只能在变量声明空间中使用，不能用作类型注解</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> bar: foo;<span class="comment">//ERROR:&quot;cannot find name &#x27;foo&#x27;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在TypeScript中存在两种声明空间：类型声明空间和变量声明空间&lt;/p&gt;
&lt;h1 id=&quot;类型声明空间&quot;&gt;&lt;a href=&quot;#类型声明空间&quot; class=&quot;headerlink&quot; title=&quot;类型声明空间&quot;&gt;&lt;/a&gt;类型声明空间&lt;/h1&gt;&lt;p&gt;类型声明空间包含用来当做</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://coloey.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>实现虚拟列表组件</title>
    <link href="https://coloey.github.io/2022/10/15/%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6/"/>
    <id>https://coloey.github.io/2022/10/15/%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6/</id>
    <published>2022-10-15T08:11:11.000Z</published>
    <updated>2022-10-15T09:40:16.662Z</updated>
    
    <content type="html"><![CDATA[<p>当遇到不能用分页方式来加载列表数据的业务情况，可以使用长列表，但是同时加载大量数据时性能消耗大，因此可以使用虚拟列表，只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染，从而达到较高的渲染性能</p><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><p>虚拟列表的实现，就是在首屏加载时，只加载可视区域内需要的列表项，当滚动发生时，动态通过计算获得可视区域内的列表项，并将非可视区域内存在的列表项删除</p><p><img src="/2022/10/15/%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6/1-16658230394741.png"></p><h2 id="可以计算出："><a href="#可以计算出：" class="headerlink" title="可以计算出："></a>可以计算出：</h2><ul><li><p>列表总高度：listHeight = lisyData.length*itemSize</p></li><li><p>可显示列表项数:visibleCount </p></li><li><p>数据起始索引:startIndex = Math.floor(scrollTop/itemSize)</p></li><li><p>数据结束索引：endIndex = startIndex + visibleCount</p></li><li><p>列表显示数据visibleData = listData.slice(startIndex,endIndex)</p><p>滚动后渲染区域对于可视区域已经发生了偏移，此时我需要获取一个偏移量startOffset,通过样式将渲染区域便宜到可是区域中</p></li><li><p>偏移量startOffset = scrollTop - (scrollTop % itemSize)</p></li></ul><h1 id="列表项动态高度"><a href="#列表项动态高度" class="headerlink" title="列表项动态高度"></a>列表项动态高度</h1><p>当列表中包含文本之类的可变内容时，会导致列表项的高度并不相同，在虚拟列表中应用动态高度的解决方案一般有三种：</p><p>1.对组件属性itemSize进行扩展，支持传递类型为数字，数组，函数</p><p>2.将列表项渲染到屏幕外，对其高度进行测量并缓存，然后再将其渲染到可视区域内</p><p>先渲染到屏幕外，再渲染到屏幕内，会导致渲染成本增加一倍，对于数百万用户在低端移动设备上使用的产品来说不切实际</p><p>3.以预估高度先行渲染，然后获取真实高度并缓存</p><p>使用第三种方法：positions用来存储列表项渲染后每一项高度以及位置信息：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="built_in">number</span> &#125; <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> PositionType = &#123;</span><br><span class="line">    <span class="attr">index</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">bottom</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓存列表的总体初始化高度</span></span><br><span class="line"><span class="keyword">const</span> initPositionCache = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    estimatedItemSize: <span class="built_in">number</span> =<span class="number">32</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    length: <span class="built_in">number</span> = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>,</span><br><span class="line">    positions = <span class="built_in">Array</span>(length)</span><br><span class="line">    <span class="keyword">while</span>(index &lt; length) &#123;</span><br><span class="line">        positions[index] = &#123;</span><br><span class="line">            index,</span><br><span class="line">            <span class="attr">height</span>: estimatedItemSize,</span><br><span class="line">            <span class="attr">top</span>: index * estimatedItemSize,</span><br><span class="line">            <span class="attr">bottom</span>: (index++ +<span class="number">1</span>) * estimatedItemSize<span class="comment">//下一条数据的开始位置就是上一条数据的结束位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> positions</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> initPositionCache</span><br></pre></td></tr></table></figure><p>列表的总高度等于列表项实际中最后一项的地步距离列表顶部的位置</p><p>getListHeight.ts:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PositionType &#125; <span class="keyword">from</span> <span class="string">&quot;./initPositionCache&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getListHeight = <span class="function">(<span class="params">positions: <span class="built_in">Array</span>&lt;PotionType&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> index = positions.length -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> index &lt; <span class="number">0</span> ? <span class="number">0</span> : positions[index].bottom</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新缓存：通过遍历列表每一项，获得实际内容撑起的高度height,和预估的高度oldHeight,如果两者存在差值，则更新该列表项的bottom和height,以及更新列表项后面每一项的top和bottom</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updateItemSize = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    positions: <span class="built_in">Array</span>&lt;PositionType&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    items: HTMLCollection,</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Array</span>.from(items).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">Number</span>(item.getAttribute(<span class="string">&#x27;date-index&#x27;</span>))</span><br><span class="line">        <span class="comment">//内容撑起的高度</span></span><br><span class="line">        <span class="keyword">let</span> &#123;height&#125; = item.getBoundingClientRect()</span><br><span class="line">        <span class="keyword">let</span> oldHeight = positions[index].height</span><br><span class="line">        <span class="comment">//存在差值，减去差值，并更新该结点以后的所有结点</span></span><br><span class="line">        <span class="keyword">let</span> dValue = oldHeight - height</span><br><span class="line">        <span class="keyword">if</span>(dValue) &#123;</span><br><span class="line">            positions[index].bottom = positions[index].bottom - dValue</span><br><span class="line">            positions[index].height = height</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k = index + <span class="number">1</span>; k &lt; positions.length; k++) &#123;</span><br><span class="line">                positions[k].top = positions[k-<span class="number">1</span>].bottom</span><br><span class="line">                positions[k].bottom = positions[k].bottom - dValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滚动后获取列表的开始索引的方法修改为通过缓存获取：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取列表起始索引</span></span><br><span class="line"><span class="function"><span class="title">getStartIndex</span>(<span class="params">scrollTop = <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> item = <span class="built_in">this</span>.positions.find(<span class="function"><span class="params">i</span> =&gt;</span> i &amp;&amp; i.bottom &gt; scrollTop);</span><br><span class="line">  <span class="keyword">return</span> item.index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于缓存数据是有顺序的，所以获取开始索引的方法可以考虑通过二分查找的方式降低检索次数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; PositionType &#125; <span class="keyword">from</span> <span class="string">&quot;./initPositionCache&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> binarySearch = <span class="function">(<span class="params">list: <span class="built_in">Array</span>&lt;PotionType&gt;,value: <span class="built_in">number</span> = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> start: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> end: <span class="built_in">number</span> = list.length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> tempIndex = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">while</span>(start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">let</span> midIndex = <span class="built_in">Math</span>.floor((start + end)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">let</span> midValue = list[midIndex].bottom</span><br><span class="line">        <span class="comment">//因为用bottom 所有查找到的数据索引为下一条</span></span><br><span class="line">        <span class="keyword">if</span>(midValue === value)&#123;</span><br><span class="line">            <span class="keyword">return</span> midIndex + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(midValue &lt; value) &#123;</span><br><span class="line">            start = midIndex+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(midValue &gt; value) &#123;</span><br><span class="line">            <span class="comment">//tempIndex存放最靠值为value的所有</span></span><br><span class="line">            <span class="keyword">if</span>(tempIndex === <span class="literal">null</span> || tempIndex &gt; midIndex) &#123;</span><br><span class="line">                tempIndex = midIndex;</span><br><span class="line">            &#125;</span><br><span class="line">            end = midIndex -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempIndex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滚动过程中二分查找到可视区域的内容</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数在浏览器下一次重绘之前执行</span></span><br><span class="line">   <span class="keyword">const</span> onScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">       requestAnimationFrame(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">let</span> &#123; scrollTop &#125; = getEl()</span><br><span class="line">           <span class="keyword">let</span> startIndex = binarySearch(positions,scrollTop)</span><br><span class="line">           <span class="comment">//startIndex变更，更新endIndex,ListHeight</span></span><br><span class="line">           updateState(&#123;myvisibleCount,startIndex&#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在每一次页面重新挂载后监听滚动事件，卸载后移除回调函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useLayoutEffect相当于componentDidMount,在dom更新后，页面渲染前执行，避免出现闪烁现象</span></span><br><span class="line">   useLayoutEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">const</span> el = getEl()</span><br><span class="line">       el.addEventListener(<span class="string">&#x27;scroll&#x27;</span>,onScroll,<span class="literal">false</span>)</span><br><span class="line">       <span class="comment">//火狐浏览器是DOMMouseScroll</span></span><br><span class="line">       <span class="keyword">if</span>(isFF)el.addEventListener(<span class="string">&#x27;DOMMouseScroll&#x27;</span>,onScroll,<span class="literal">false</span>)</span><br><span class="line">       <span class="keyword">else</span> el.addEventListener(<span class="string">&#x27;wheel&#x27;</span>,onScroll,<span class="literal">false</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">if</span>(el)&#123;</span><br><span class="line">               el.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>,onScroll,<span class="literal">false</span>)</span><br><span class="line">               <span class="keyword">if</span>(isFF)el.removeEventListener(<span class="string">&#x27;DOMMouseScroll&#x27;</span>,onScroll,<span class="literal">false</span>)</span><br><span class="line">               <span class="keyword">else</span> el.removeEventListener(<span class="string">&#x27;wheel&#x27;</span>,onScroll,<span class="literal">false</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,[])</span><br></pre></td></tr></table></figure><p>滚动后将偏移量的获取方式进行变更：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.start &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>.startOffset = <span class="built_in">this</span>.positions[<span class="built_in">this</span>.start - <span class="number">1</span>].bottom</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.startOffset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在componetDidUpdate阶段更新缓存</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在componentDidUpdate阶段更新缓存，useEffect渲染到页面后异步执行</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> nodes: HTMLCollection = items.current?.children</span><br><span class="line">        <span class="keyword">if</span>(!nodes.length) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">//更新缓存</span></span><br><span class="line">        updateItemSize(positions,nodes)</span><br><span class="line">        <span class="comment">//更新总高度</span></span><br><span class="line">        setListHeight(getListHeight(positions))</span><br><span class="line">        <span class="comment">//更新总偏移量</span></span><br><span class="line">        setStartOffset(getStartOffset(startIndex,positions,aboveCount))       </span><br><span class="line">    &#125;,[])</span><br></pre></td></tr></table></figure><p>获取结束索引的函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getEndIndex = <span class="function">(<span class="params">resource:<span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;,startIndex: <span class="built_in">number</span>,visibleCount: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> resourceLength = resource.length</span><br><span class="line">    <span class="keyword">let</span> endIndex = startIndex + visibleCount</span><br><span class="line">    <span class="keyword">return</span> resourceLength &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.min(resourceLength,endIndex) : endIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当滚动过快时，会出现短暂的白屏现象，为了使页面平滑滚动，我们还需要再可见区域的上方和下方渲染额外的项目，在滚动时基于一些缓冲，所以将屏幕分为三个区域：</p><p>可视区域上方：above</p><p>可视区域：screen</p><p>可视区域下方：below</p><p>定义bufferScale，用于接收缓冲区数据和可视区数据的比例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bufferScale = <span class="number">1</span></span><br><span class="line"> <span class="keyword">const</span> aboveCount = <span class="built_in">Math</span>.min(startIndex,bufferScale * myvisibleCount)</span><br><span class="line">   <span class="keyword">const</span> blowCount = <span class="built_in">Math</span>.min(resources.length - endIndex,bufferScale * myvisibleCount)</span><br><span class="line">   <span class="comment">//可视区域数据</span></span><br><span class="line">   <span class="keyword">let</span> visibleData = resources.slice(startIndex - aboveCount,endIndex + blowCount)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取总偏移量getStartOffset:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStartOffset = <span class="function">(<span class="params">startIndex: <span class="built_in">number</span>,positions: <span class="built_in">Array</span>&lt;PositionType&gt; = [],aboveCount: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(startIndex &gt;=<span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="keyword">let</span> size = positions[startIndex].top - (positions[startIndex-aboveCount] ? positions[startIndex-aboveCount].top : <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//如果上一个数据条目滚动到一半，则要获取的是上一个数据条目的bottom值即为startOffset</span></span><br><span class="line">        <span class="keyword">return</span> positions[startIndex-<span class="number">1</span>].bottom -size</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整源码：<a href="https://github.com/Coloey/july-design/tree/master/src/vitual-list">https://github.com/Coloey/july-design/tree/master/src/vitual-list</a></p><p>参考：</p><ul><li><a href="https://link.juejin.cn/?target=https://github.com/dwqs/blog/issues/70">浅说虚拟列表的实现原理</a></li><li><a href="https://link.juejin.cn/?target=https://github.com/dwqs/blog/issues/72">react-virtualized组件的虚拟列表实现</a></li><li><a href="https://link.juejin.cn/?target=https://itsze.ro/blog/2017/04/09/infinite-list-and-react.html">React和无限列表</a></li><li><a href="https://link.juejin.cn/?target=https://zhuanlan.zhihu.com/p/34585166">再谈前端虚拟列表的实现</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当遇到不能用分页方式来加载列表数据的业务情况，可以使用长列表，但是同时加载大量数据时性能消耗大，因此可以使用虚拟列表，只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染，从而达到较高的渲染性能&lt;/p&gt;
&lt;h1 id=&quot;实现：&quot;&gt;&lt;a href=&quot;#实现：&quot; clas</summary>
      
    
    
    
    <category term="项目总结" scheme="https://coloey.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
</feed>
