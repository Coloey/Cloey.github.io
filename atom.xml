<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2022-05-27T14:18:46.340Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git commit规范</title>
    <link href="https://coloey.github.io/2022/05/27/git-commit%E8%A7%84%E8%8C%83/"/>
    <id>https://coloey.github.io/2022/05/27/git-commit%E8%A7%84%E8%8C%83/</id>
    <published>2022-05-27T14:18:46.000Z</published>
    <updated>2022-05-27T14:18:46.340Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>函数柯里化</title>
    <link href="https://coloey.github.io/2022/05/26/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://coloey.github.io/2022/05/26/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2022-05-26T08:37:28.000Z</published>
    <updated>2022-05-26T10:02:56.826Z</updated>
    
    <content type="html"><![CDATA[<p>柯里化：把接受多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并且返回接收余下的参数而且返回结果的新函数的技术</p><h1 id="柯里化的通用实现方法："><a href="#柯里化的通用实现方法：" class="headerlink" title="柯里化的通用实现方法："></a>柯里化的通用实现方法：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry=<span class="function">(<span class="params">fn,...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.length&lt;fn.length<span class="comment">//函数参数个数可以通过函数.length属性访问，</span></span><br><span class="line">    ?<span class="function">(<span class="params">..._args</span>)=&gt;</span>curry(fn,...args,..._args)<span class="comment">//传入参数小于原始函数fn参数的个数时，继续对当前函数进行柯里化，返回一个接受所有参数（当前参数和剩余参数）的函数</span></span><br><span class="line">    :fn(...args)<span class="comment">//否则直接执行函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add1</span>(<span class="params">a,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c+d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add=curry(add1)</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>));<span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//10</span></span><br></pre></td></tr></table></figure><h1 id="柯里化的作用："><a href="#柯里化的作用：" class="headerlink" title="柯里化的作用："></a>柯里化的作用：</h1><h2 id="参数复用"><a href="#参数复用" class="headerlink" title="参数复用"></a>参数复用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常正则验证字符串 reg.test(txt)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数封装后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">reg, txt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reg.test(txt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check(<span class="regexp">/\d+/g</span>, <span class="string">&#x27;test&#x27;</span>)       <span class="comment">//false</span></span><br><span class="line">check(<span class="regexp">/[a-z]+/g</span>, <span class="string">&#x27;test&#x27;</span>)    <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Currying后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curryingCheck</span>(<span class="params">reg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">txt</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reg.test(txt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasNumber = curryingCheck(<span class="regexp">/\d+/g</span>)</span><br><span class="line"><span class="keyword">var</span> hasLetter = curryingCheck(<span class="regexp">/[a-z]+/g</span>)</span><br><span class="line"></span><br><span class="line">hasNumber(<span class="string">&#x27;test1&#x27;</span>)      <span class="comment">// true</span></span><br><span class="line">hasNumber(<span class="string">&#x27;testtest&#x27;</span>)   <span class="comment">// false</span></span><br><span class="line">hasLetter(<span class="string">&#x27;21212&#x27;</span>)      <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>第一个参数reg进行了复用</p><h2 id="提前返回"><a href="#提前返回" class="headerlink" title="提前返回"></a>提前返回</h2><p>举个例子，兼容现代浏览器以及IE浏览器的事件添加方法，我们正常情况可能这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent=<span class="function"><span class="keyword">function</span>(<span class="params">el,type,fn,capture</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">        el.addEventListener(type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            fn.call(el,e);</span><br><span class="line">        &#125;,capture);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line">        el.attachEvent(<span class="string">&quot;on&quot;</span>+type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            fn.call(el,e);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法我们每次使用addEvent为元素添加事件的时候，都会走一遍if…else if…，其实只要判断一次，用柯里化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addEvent=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">        el.addEventListener(type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            fn.call(el,e);</span><br><span class="line">        &#125;,capture);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line">        el.attachEvent(<span class="string">&quot;on&quot;</span>+type,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            fn.call(el,e);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h2><p>比如bind方法的实现机制就是柯里化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind=<span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self=<span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args=<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="title">funtion</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> self.apply(context,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文章：</p><p><a href="https://juejin.cn/post/6844904093467541517">https://juejin.cn/post/6844904093467541517</a></p><p><a href="https://www.zhangxinxu.com/wordpress/2013/02/js-currying/">https://www.zhangxinxu.com/wordpress/2013/02/js-currying/</a></p><p><a href="https://www.jianshu.com/p/2975c25e4d71">https://www.jianshu.com/p/2975c25e4d71</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;柯里化：把接受多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并且返回接收余下的参数而且返回结果的新函数的技术&lt;/p&gt;
&lt;h1 id=&quot;柯里化的通用实现方法：&quot;&gt;&lt;a href=&quot;#柯里化的通用实现方法：&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>手写Object.is</title>
    <link href="https://coloey.github.io/2022/05/24/%E6%89%8B%E5%86%99Object-is/"/>
    <id>https://coloey.github.io/2022/05/24/%E6%89%8B%E5%86%99Object-is/</id>
    <published>2022-05-24T08:23:28.000Z</published>
    <updated>2022-05-24T08:37:57.701Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">is=<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x===y)&#123;<span class="comment">//如果x===y并且+0和-0=&gt;+0!==0false -0!==0false 1/+0===1/-0false返回false</span></span><br><span class="line">        <span class="keyword">return</span> x!==<span class="number">0</span>||y!==<span class="number">0</span>||<span class="number">1</span>/x===<span class="number">1</span>/y</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//解决NaN===NaN为false,NaN!==NaNtrue NaN!==NaN true 返回true</span></span><br><span class="line">        <span class="keyword">return</span> x!==x&amp;&amp;y!==y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(is(<span class="number">0</span>,<span class="number">0</span>))<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(is(+<span class="number">0</span>,-<span class="number">0</span>))<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(is(<span class="literal">NaN</span>,<span class="literal">NaN</span>))<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="手撕代码系列" scheme="https://coloey.github.io/categories/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>手写object.assign</title>
    <link href="https://coloey.github.io/2022/05/24/%E6%89%8B%E5%86%99object-assign/"/>
    <id>https://coloey.github.io/2022/05/24/%E6%89%8B%E5%86%99object-assign/</id>
    <published>2022-05-24T07:48:46.000Z</published>
    <updated>2022-05-24T07:59:43.030Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>,<span class="string">&#x27;assign&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>:</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">target,...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target===<span class="literal">null</span>)<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Can&#x27;t convert null or undefined to object&quot;</span>)</span><br><span class="line">        <span class="comment">//目标对象统一为引用数据类型</span></span><br><span class="line">        <span class="keyword">const</span> to=<span class="built_in">Object</span>(target);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">            <span class="comment">//每一个源对象</span></span><br><span class="line">            <span class="keyword">const</span> nextSource=args[i];</span><br><span class="line">            <span class="keyword">if</span>(nextSource!==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//使用for...in 和hasOwnProperty双重判断，确保只拿到本身的属性，方法（不包含继承的)</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">const</span> nextKey <span class="keyword">in</span> nextSource)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(nextSource,nextKey))&#123;</span><br><span class="line">                        to[nextKey]=nextSource[nextKey];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> to;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//不可枚举</span></span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>手写call</title>
    <link href="https://coloey.github.io/2022/05/24/%E6%89%8B%E5%86%99call/"/>
    <id>https://coloey.github.io/2022/05/24/%E6%89%8B%E5%86%99call/</id>
    <published>2022-05-24T07:06:30.000Z</published>
    <updated>2022-05-24T07:17:38.449Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype._call=<span class="function"><span class="keyword">function</span>(<span class="params">context=<span class="built_in">window</span>,...args</span>)</span>&#123;<span class="comment">//如果没有传入对象，则会默认this指向window</span></span><br><span class="line">    <span class="keyword">if</span>(typeOf context !==<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&#x27;Type Error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fn=<span class="built_in">Symbol</span>(<span class="string">&#x27;thisObj&#x27;</span>);</span><br><span class="line">    context[fn]=<span class="built_in">this</span>;<span class="comment">//给目标对象增加一个属性，并且将this赋给该属性</span></span><br><span class="line">    <span class="keyword">let</span> res=context[fn](ars);<span class="comment">//通过临时属性调用该函数并返回结果</span></span><br><span class="line">    <span class="keyword">delete</span> context[fn];<span class="comment">//删除该临时属性</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="https://coloey.github.io/2022/05/19/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/19/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-19T13:25:01.000Z</published>
    <updated>2022-05-19T13:35:28.338Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式指的是定义一系列算法，把他们一个个封装起来，目的就是将算法的使用和算法的实现分离开来。同时它还可以用来封装一系列的规则，比如常见的表单验证规则，只要这些规则指向的目标一致，并且可以被替换使用，那么就可以用策略模式来封装它们。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>算法可以自由切换，避免了使用多层条件判断，增加了扩展性</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>策略类增多，所有策略类都需要对外暴露。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>写表单验证经常无止境的if…else写法，意识到这种写法不靠谱，于是我把检验规则放在一个对象中，在函数中对它进行控制，把规则与实现进行了分离，每次只需要在封装的规则中去修改配置。在后面的多种场景都用这种方法，解决了频繁使用if…else的问题，当第一次接触倒策略模式才知道这种写法也算策略模式。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">    <span class="attr">cover_img</span>: &#123;</span><br><span class="line">        <span class="attr">must</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;请上传封面图片&#x27;</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">must</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;姓名不能为空&#x27;</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">sex</span>: &#123;</span><br><span class="line">        <span class="attr">must</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;请填写性别&#x27;</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">birthday</span>: &#123;</span><br><span class="line">        <span class="attr">must</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;请选择生日&#x27;</span>,</span><br><span class="line">        <span class="attr">val</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> rules)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rules[key].must&amp;&amp;!rules[key].val)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(rules[key].msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">verify()</span><br></pre></td></tr></table></figure><p>对于分支语句的优化，工厂方法模式，状态模式，策略模式。</p><p>工厂方法模式：是一种创建型模式，最终目的是创建对象</p><p>状态模式和策略模式都是行为性模式，在状态模式中，核心是对状态的控制来决定表现行为，所以状态之间通常不能相互替代，否则将产生不同的行为结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;策略模式指的是定义一系列算法，把他们一个个封装起来，目的就是将算法的使用和算法的实现分离开来。同时它还可以用来封装一系列的规则，比如常见的表单验证规则，只要这些规则指向的目标一致，并且可以被替换使用，那么就可以用策略模式来封装它们。&lt;/p&gt;
&lt;h4 id=&quot;优点&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="https://coloey.github.io/2022/05/19/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/19/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-19T11:42:49.000Z</published>
    <updated>2022-05-19T11:54:51.486Z</updated>
    
    <content type="html"><![CDATA[<p>模板方法的核心在于对方法的重用，它将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法的共用，当然这种设计模式将导致基类控制子类必须遵守某些法则，这是一种行为的约束，但是为了让行为的约束更加可靠，基类中封装的方法通常是不变的算法，或者具有稳定的调用方式。</p><p>子类继承的方法也可以扩展，要求对基类继承的方法进行重写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板类 基础提示框data渲染数据</span></span><br><span class="line"><span class="keyword">var</span> Alert=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!data)<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//设置内容</span></span><br><span class="line">    <span class="built_in">this</span>.content=data.content;</span><br><span class="line">    <span class="comment">//创建提示面板</span></span><br><span class="line">    <span class="built_in">this</span>.panel=<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    <span class="comment">//创建内容提示组件</span></span><br><span class="line">    <span class="built_in">this</span>.contentNode=<span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    <span class="comment">//创建确定按钮组件</span></span><br><span class="line">    <span class="built_in">this</span>.confirmBtn=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="comment">//创建关闭按钮组件</span></span><br><span class="line">    <span class="built_in">this</span>.closeBtn=<span class="built_in">document</span>.createElement(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">    <span class="comment">//为提示面板添加类</span></span><br><span class="line">    <span class="built_in">this</span>.panel.className=<span class="string">&#x27;alert&#x27;</span>;</span><br><span class="line">    <span class="comment">//为关闭按钮添加类</span></span><br><span class="line">    <span class="built_in">this</span>.closeBtn.className=<span class="string">&#x27;a-close&#x27;</span>;</span><br><span class="line">    <span class="comment">//为确定按钮添加类</span></span><br><span class="line">    <span class="built_in">this</span>.confirmBtn.className=<span class="string">&#x27;a-confirm&#x27;</span>;</span><br><span class="line">    <span class="comment">//为确定按钮添加文案</span></span><br><span class="line">    <span class="built_in">this</span>.confirmBtn.innerHTML=data.confirm||<span class="string">&#x27;确认&#x27;</span></span><br><span class="line">    <span class="comment">//为提示内容添加文本</span></span><br><span class="line">    <span class="built_in">this</span>.contentNode.innerHTML=<span class="built_in">this</span>.content;</span><br><span class="line">    <span class="comment">//点击确定按钮执行方法 如果data中有success方法则为success方法，否则为空函数</span></span><br><span class="line">    <span class="built_in">this</span>.success=data.success||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="comment">//点击关闭按钮执行方法</span></span><br><span class="line">    <span class="built_in">this</span>.fail=data.fail||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype=&#123;</span><br><span class="line">    <span class="attr">init</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//生成提示框</span></span><br><span class="line">        <span class="built_in">this</span>.panel.appendChild(<span class="built_in">this</span>.closeBtn);</span><br><span class="line">        <span class="built_in">this</span>.panel.appendChild(<span class="built_in">this</span>.contentNode);</span><br><span class="line">        <span class="built_in">this</span>.panel.appendChild(<span class="built_in">this</span>.confirmBtn);</span><br><span class="line">        <span class="comment">//插入页面</span></span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(<span class="built_in">this</span>.panel);</span><br><span class="line">        <span class="comment">//绑定事件</span></span><br><span class="line">        <span class="built_in">this</span>.bindEvent();</span><br><span class="line">        <span class="comment">//显示提示框</span></span><br><span class="line">        <span class="built_in">this</span>.show();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">bindEvent</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> me=<span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">//关闭按钮点击事件</span></span><br><span class="line">        <span class="built_in">this</span>.closeBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            me.fail();</span><br><span class="line">            <span class="comment">//隐藏弹层</span></span><br><span class="line">            me.hide()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//确认按钮点击事件</span></span><br><span class="line">        <span class="built_in">this</span>.confirmBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            me.success();</span><br><span class="line">            me.hide();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hide</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.panel.style.display=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//显示弹层</span></span><br><span class="line">    <span class="attr">show</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.panel.style.display=<span class="string">&#x27;block&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右侧按钮提示框</span></span><br><span class="line"><span class="keyword">var</span> RightAlert=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承基本提示框构造函数</span></span><br><span class="line">    Alert.call(<span class="built_in">this</span>,data);</span><br><span class="line">    <span class="comment">//为确认按钮添加right类</span></span><br><span class="line">    <span class="built_in">this</span>.confirmBtn.className=<span class="built_in">this</span>.confirmBtn.className+<span class="string">&#x27;right&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承基本提示框方法</span></span><br><span class="line">RightAlert.prototype=<span class="keyword">new</span> Alert();</span><br><span class="line"><span class="comment">//标题提示框</span></span><br><span class="line"><span class="keyword">var</span> TitleAlert=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    Alert.call(<span class="built_in">this</span>,data);</span><br><span class="line">    <span class="built_in">this</span>.title=data.title;</span><br><span class="line">    <span class="built_in">this</span>.titleNode=<span class="built_in">document</span>.createElement(<span class="string">&#x27;h3&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.titleNode.innerHTML=<span class="built_in">this</span>.title</span><br><span class="line">&#125;</span><br><span class="line">TitleAlert.prototype=<span class="keyword">new</span> Alert();</span><br><span class="line"><span class="comment">//对基本提示框创建方法的拓展</span></span><br><span class="line">TitleAlert.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//插入标题</span></span><br><span class="line">    <span class="built_in">this</span>.panel.insertBefore(<span class="built_in">this</span>.titleNode,<span class="built_in">this</span>.panel.firstChild);</span><br><span class="line">    <span class="comment">//继承基本提示框的init方法</span></span><br><span class="line">    Alert.prototype.init.call(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//带有取消按钮的弹出框</span></span><br><span class="line"><span class="keyword">var</span> CancleAlert=<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承标题提示框构造函数</span></span><br><span class="line">    TitleAlert.call(<span class="built_in">this</span>,data)</span><br><span class="line">    <span class="comment">//取消按钮文案</span></span><br><span class="line">    <span class="built_in">this</span>.cancel=data.cancel;</span><br><span class="line">    <span class="comment">//创建取消按钮</span></span><br><span class="line">    <span class="built_in">this</span>.cancelBtn=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="comment">//为取消按钮添加类</span></span><br><span class="line">    <span class="built_in">this</span>.cancelBtn.className=<span class="string">&#x27;cancel&#x27;</span></span><br><span class="line">    <span class="comment">//设置取消按钮内容</span></span><br><span class="line">    <span class="built_in">this</span>.cancelBtn.innerHTML=<span class="built_in">this</span>.cancel||<span class="string">&#x27;取消&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承标题提示框原型方法</span></span><br><span class="line">CancleAlert.prototype=<span class="keyword">new</span> Alert()</span><br><span class="line">CancleAlert.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//继承标题提示框创建方法</span></span><br><span class="line">    TitleAlert.prototype.init.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">//由于取消按钮要添加在末尾，所以在创建完其他组件后添加</span></span><br><span class="line">    <span class="built_in">this</span>.panel.appendChild(<span class="built_in">this</span>.cancelBtn)</span><br><span class="line">&#125;</span><br><span class="line">CancleAlert.prototype.bindEvent=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> me=<span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">//标题提示框绑定事件方法继承</span></span><br><span class="line">    TitleAlert.prototype.bindEvent.call(me);</span><br><span class="line">    <span class="comment">//取消按钮绑定事件</span></span><br><span class="line">    <span class="built_in">this</span>.cancelBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        me.fail();</span><br><span class="line">        me.hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> CancleAlert(&#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="string">&#x27;提示标题&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>:<span class="string">&#x27;提示内容&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;cancel&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).init()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;模板方法的核心在于对方法的重用，它将核心方法封装在基类中，让子类继承基类的方法，实现基类方法的共享，达到方法的共用，当然这种设计模式将导致基类控制子类必须遵守某些法则，这是一种行为的约束，但是为了让行为的约束更加可靠，基类中封装的方法通常是不变的算法，或者具有稳定的调用方式</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="https://coloey.github.io/2022/05/16/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/16/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-16T03:12:05.000Z</published>
    <updated>2022-05-16T03:27:56.033Z</updated>
    
    <content type="html"><![CDATA[<p>组合模式能够给我们提供一个清晰的组成结构，组合对象类通过集成同一个父类使其具有统一的方法，方便我们统一管理和使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> form=<span class="keyword">new</span> FormItem=(<span class="string">&#x27;ForemItem&#x27;</span>,documebt.body);</span><br><span class="line">form.add(</span><br><span class="line">    <span class="keyword">new</span> FieldsetItem(<span class="string">&#x27;account&#x27;</span>,<span class="string">&#x27;账号&#x27;</span>).add(</span><br><span class="line">        <span class="keyword">new</span> Group().add(</span><br><span class="line">            <span class="keyword">new</span> LabelItem(<span class="string">&#x27;user_name&#x27;</span>,<span class="string">&#x27;用户名：&#x27;</span>)</span><br><span class="line">        ).add(</span><br><span class="line">            <span class="keyword">new</span> InputItem(<span class="string">&#x27;user_name&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        ).add(</span><br><span class="line">            <span class="keyword">new</span> SpanItem(<span class="string">&#x27;4到6位字母&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">    ).add(</span><br><span class="line">        <span class="keyword">new</span> Group().add(</span><br><span class="line">            <span class="keyword">new</span> LabelItem(<span class="string">&#x27;user_password&#x27;</span>,<span class="string">&#x27;密码:&#x27;</span>)</span><br><span class="line">        ).add(</span><br><span class="line">            <span class="keyword">new</span> InputItem(<span class="string">&#x27;user_password&#x27;</span>)</span><br><span class="line">        ).add(</span><br><span class="line">            <span class="keyword">new</span> SpanItem(<span class="string">&#x27;6到12位数字或密码&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prototype=<span class="built_in">Object</span>.create(superType.prototype)</span><br><span class="line">    prototype.constructor=subType;</span><br><span class="line">    subType.prototype=prototype</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Form=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//子组件容器</span></span><br><span class="line">    <span class="built_in">this</span>.children=[]</span><br><span class="line">    <span class="comment">//当前组件元素</span></span><br><span class="line">    <span class="built_in">this</span>.element=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Form.prototype=&#123;</span><br><span class="line">    <span class="attr">init</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请重写方法&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">add</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请重写方法&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getElement</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请重写方法&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> FormItem =<span class="function"><span class="keyword">function</span>(<span class="params">id,parent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数继承父类</span></span><br><span class="line">    Form.call(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">this</span>.id=id;</span><br><span class="line">    <span class="built_in">this</span>.parent=parent;</span><br><span class="line">    <span class="built_in">this</span>.init()</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(FormItem,Form)</span><br><span class="line">FormItem.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.element.id=<span class="built_in">this</span>.id;</span><br><span class="line">    <span class="built_in">this</span>.element.className=<span class="string">&#x27;new-container&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加子元素方法</span></span><br><span class="line">FormItem.prototype.add=<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在子元素容器中插入子元素</span></span><br><span class="line">    <span class="built_in">this</span>.children.push(child);</span><br><span class="line">    <span class="comment">//插入当前组件的元素树</span></span><br><span class="line">    <span class="built_in">this</span>.element.appendChild(child.getElement())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取当前元素方法</span></span><br><span class="line">FormItem.prototype.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示方法</span></span><br><span class="line">FormItem.prototype.show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.parent.appendChild(<span class="built_in">this</span>.element)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> FieldsetItem=<span class="function"><span class="keyword">function</span>(<span class="params">classname,name</span>)</span>&#123;</span><br><span class="line">    Form.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.classname=classname||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.name=name||<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(FieldsetItem,Form);</span><br><span class="line">FieldsetItem.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.element.className=<span class="built_in">this</span>.classname</span><br><span class="line">&#125;</span><br><span class="line">FieldsetItem.prototype.add=<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.children.push(child)</span><br><span class="line">    <span class="built_in">this</span>.element.appendChild(child.getElement());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">FieldsetItem.prototype.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Group=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Form.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(Group,Form);</span><br><span class="line">Group.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Group.prototype.add=<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.children.push(child);</span><br><span class="line">    <span class="built_in">this</span>.element.appendChild(child.getElement());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Group.prototype.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> LabelItem=<span class="function"><span class="keyword">function</span>(<span class="params">classname,text</span>)</span>&#123;</span><br><span class="line">    Form.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.classname=classname||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.text=text||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.init()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(LabelItem,Form)</span><br><span class="line">LabelItem.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.element.innerHTML=<span class="built_in">this</span>.text;</span><br><span class="line">    <span class="built_in">this</span>.element.className=<span class="built_in">this</span>.classname</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LabelItem.prototype.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> InputItem=<span class="function"><span class="keyword">function</span>(<span class="params">classname</span>)</span>&#123;</span><br><span class="line">    Form.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.classname=classname;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(InputItem,Form)</span><br><span class="line">InputItem.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.element.className=<span class="built_in">this</span>.classname;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">InputItem.prototype.add=<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.children.push(child);</span><br><span class="line">    <span class="built_in">this</span>.element.appendChild(child.getElement());</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">InputItem.prototype.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> SpanItem=<span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">    Form.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.text=text;</span><br><span class="line">    <span class="built_in">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(SpanItem,Form)</span><br><span class="line">SpanItem.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.element=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">    <span class="built_in">this</span>.element.innerHTML=<span class="built_in">this</span>.text;</span><br><span class="line">    <span class="built_in">this</span>.element.className=<span class="built_in">this</span>.classname;</span><br><span class="line">&#125;</span><br><span class="line">SpanItem.prototype.getElement=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;组合模式能够给我们提供一个清晰的组成结构，组合对象类通过集成同一个父类使其具有统一的方法，方便我们统一管理和使用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>划分链表</title>
    <link href="https://coloey.github.io/2022/05/16/%E5%88%92%E5%88%86%E9%93%BE%E8%A1%A8/"/>
    <id>https://coloey.github.io/2022/05/16/%E5%88%92%E5%88%86%E9%93%BE%E8%A1%A8/</id>
    <published>2022-05-15T16:23:16.000Z</published>
    <updated>2022-05-15T16:34:36.382Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ListPartition=<span class="function">(<span class="params">head,pivot</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sH=<span class="literal">null</span>,sT=<span class="literal">null</span>,eH=<span class="literal">null</span>,eT=<span class="literal">null</span>,mH=<span class="literal">null</span>,mT=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> next=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(head!==<span class="literal">null</span>)&#123;</span><br><span class="line">        next=head.next;</span><br><span class="line">        head.next=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(head.value&lt;pivot)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sH===<span class="literal">null</span>)&#123;</span><br><span class="line">                sH=head;</span><br><span class="line">                sT=head;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sT.next=head;</span><br><span class="line">                sT=head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(head.value===pivot)&#123;</span><br><span class="line">            <span class="keyword">if</span>(eH===<span class="literal">null</span>)&#123;</span><br><span class="line">                eH=head;</span><br><span class="line">                eT=head;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                eT.next=head;</span><br><span class="line">                eT=head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(mH==<span class="literal">null</span>)&#123;</span><br><span class="line">                mH=head;</span><br><span class="line">                mT=head;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mT.next=head;</span><br><span class="line">                mT=head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head=next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sT!==<span class="literal">null</span>)&#123;<span class="comment">//如果有小于区域</span></span><br><span class="line">        sT.next=eH;</span><br><span class="line">        eT=eT===<span class="literal">null</span>?sT:eT;<span class="comment">//下一步谁连大于区域的头谁就是eT</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(eT!==<span class="literal">null</span>)&#123;<span class="comment">//小于区域和等于区域不是都没有</span></span><br><span class="line">        eT.next=mH;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sH!==<span class="literal">null</span>?sH:(eH!==<span class="literal">null</span>?eH:mH)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="算法" scheme="https://coloey.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="https://coloey.github.io/categories/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>桥接模式</title>
    <link href="https://coloey.github.io/2022/05/14/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/14/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-14T02:58:44.000Z</published>
    <updated>2022-05-14T03:17:04.635Z</updated>
    
    <content type="html"><![CDATA[<p>桥接模式：在系统沿着多个维度变化的同时，又不增加其复杂度并达到解耦</p><p>提取共同点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象处公共部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params">dom,color,bg</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//设置元素的字体颜色</span></span><br><span class="line">    dom.style.color=color</span><br><span class="line">    <span class="comment">//设置元素的背景颜色</span></span><br><span class="line">    dom.style.background=bg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> spans=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line">spans[<span class="number">0</span>].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//匿名函数作为回调函数作为桥接方法，解除this和事件之间的耦合，changeColor方法中的dom实质上是事件回调函数中的this</span></span><br><span class="line">    changeColor(<span class="built_in">this</span>,<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;#ddd&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">spans[<span class="number">0</span>].onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    changeColor(<span class="built_in">this</span>,<span class="string">&#x27;#333&#x27;</span>,<span class="string">&#x27;#f5f5f5&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>桥接模式最主要特点就是将实现层（如元素绑定的事件）与抽象层（如修饰页面UI逻辑）解耦分离，使两部分可以独立变化，桥接模式主要是针对结构之间的结构，而抽象工厂模式和创建者模式主要业务在于创建。通过桥接模式实现的解耦，使实现层和抽象层分开处理，避免需求的改变造成对象内部的修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;桥接模式：在系统沿着多个维度变化的同时，又不增加其复杂度并达到解耦&lt;/p&gt;
&lt;p&gt;提取共同点&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>装饰器模式</title>
    <link href="https://coloey.github.io/2022/05/14/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/14/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-14T01:57:53.000Z</published>
    <updated>2022-05-14T02:41:58.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器模式是在对原有功能的基础上对功能拓展的模式"><a href="#装饰器模式是在对原有功能的基础上对功能拓展的模式" class="headerlink" title="装饰器模式是在对原有功能的基础上对功能拓展的模式"></a>装饰器模式是在对原有功能的基础上对功能拓展的模式</h1><p>为输入框增加新功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰者</span></span><br><span class="line"><span class="keyword">var</span> decorator=<span class="function"><span class="keyword">function</span>(<span class="params">input,fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取事件源</span></span><br><span class="line">    <span class="keyword">var</span> input=<span class="built_in">document</span>.getElementById(input)</span><br><span class="line">    <span class="comment">//若事件源已经绑定事件</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> input.onclick===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//缓存事件原有回调函数</span></span><br><span class="line">        <span class="keyword">var</span> oldClickFn=input.onclick</span><br><span class="line">        input.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//事件原有回调函数</span></span><br><span class="line">            oldClickFn()</span><br><span class="line">            <span class="comment">//执行事件新增回调函数</span></span><br><span class="line">            fn()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//事件源未绑定事件，直接为事件源添加新增回调函数</span></span><br><span class="line">        input.onclick=fn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//电话输入框功能装饰</span></span><br><span class="line">decorator(<span class="string">&#x27;tel_input&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tel_demo_text&#x27;</span>).style.display=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//姓名输入框功能装饰</span></span><br><span class="line">decorator(<span class="string">&#x27;name_input&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;name_demo_text&#x27;</span>).style.display=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="适配器模式和装饰器模式的区别："><a href="#适配器模式和装饰器模式的区别：" class="headerlink" title="适配器模式和装饰器模式的区别："></a>适配器模式和装饰器模式的区别：</h1><p>适配器模式是对原有对象的适配，添加的方法与原有方法功能上大致相似，但是装饰器模式提供的方法与原有方法的功能项是由一定区别的，使用适配器模式时我们新增的方法是要调用原来的方法，不过在装饰器模式，不需要了解对象原有功能没并且对象原有方法原封不动的使用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装饰器模式是在对原有功能的基础上对功能拓展的模式&quot;&gt;&lt;a href=&quot;#装饰器模式是在对原有功能的基础上对功能拓展的模式&quot; class=&quot;headerlink&quot; title=&quot;装饰器模式是在对原有功能的基础上对功能拓展的模式&quot;&gt;&lt;/a&gt;装饰器模式是在对原有功能的基</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="https://coloey.github.io/2022/05/12/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/12/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-12T15:39:04.000Z</published>
    <updated>2022-05-12T15:55:29.472Z</updated>
    
    <content type="html"><![CDATA[<p>JQuey适配器</p><p>如果A框架和jQuery很像我，直接用适配器适配两种代码库中不兼容的代码，window.A=A=jQuery</p><p>参数适配器</p><p>当传递多个参数，记住参数顺序比较困难，所有我们经常以一个参数对象方式传入，调用它的时候又不知道传递的参数是否完整，如果有一些参数没有传入，一些参数是有默认值的等等，此时用适配器传入这个参数对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _adapter=&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;lala&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;设计模式&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">24</span>,</span><br><span class="line">        <span class="attr">color</span>:<span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">        <span class="attr">size</span>:<span class="number">100</span>,</span><br><span class="line">        <span class="attr">prize</span>:<span class="number">50</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> _adapter)&#123;</span><br><span class="line">        _adapter[i]=obj[i]||_adapter[i]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据适配</p><p>var arr=[‘JavaScript’,’book’,’前端编程’]</p><p>这种数据结构语义不好，通常会适配成对象形式，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrToObjAdapter</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>:arr[<span class="number">0</span>],</span><br><span class="line">        <span class="attr">type</span>:arr[<span class="number">1</span>],</span><br><span class="line">        <span class="attr">title</span>:arr[<span class="number">2</span>]</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> adapterData=arrToObjAdapter(arr)</span><br><span class="line"><span class="built_in">console</span>.log(adapterData)</span><br></pre></td></tr></table></figure><p>服务器端数据适配</p><p>如果后端因为架构改变导致传递的数据结构发生变化，我们只需要写个适配器将传递过来的数据适配成对我们可用的数据再使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajaxAdapter</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//处理数据并返回数据</span></span><br><span class="line">    <span class="keyword">return</span> [data[<span class="string">&#x27;key1&#x27;</span>],data[<span class="string">&#x27;key2&#x27;</span>],data[<span class="string">&#x27;key3&#x27;</span>]]</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;someAddress.php&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data,status</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data)&#123;</span><br><span class="line">            <span class="comment">//使用适配器后的数据——返回的对象</span></span><br><span class="line">            doSomething(ajaxAdapter(data))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JQuey适配器&lt;/p&gt;
&lt;p&gt;如果A框架和jQuery很像我，直接用适配器适配两种代码库中不兼容的代码，window.A=A=jQuery&lt;/p&gt;
&lt;p&gt;参数适配器&lt;/p&gt;
&lt;p&gt;当传递多个参数，记住参数顺序比较困难，所有我们经常以一个参数对象方式传入，调用它的时候又不知</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="https://coloey.github.io/2022/05/12/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/12/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-12T14:26:08.000Z</published>
    <updated>2022-05-12T16:23:00.209Z</updated>
    
    <content type="html"><![CDATA[<p>外观模式：为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易，在javaScript中用于对底层结构兼容性做统一封装来简化用户使用</p><h1 id="兼容性优化："><a href="#兼容性优化：" class="headerlink" title="兼容性优化："></a>兼容性优化：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">dom,type,fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//支持DOM2的事件处理程序addEventListener方法的浏览器</span></span><br><span class="line">    <span class="keyword">if</span>(dom.addEventListener)&#123;</span><br><span class="line">        dom.addEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//对于addEventListener方法但支持attachEvent方法的浏览器</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(dom.attachEvent)&#123;</span><br><span class="line">        dom.attachEvent(<span class="string">&#x27;on&#x27;</span>+type,fn)</span><br><span class="line">        <span class="comment">//对于不支持addEventListener方法也不支持attachEvent方法，但支持&#x27;on+事件名&#x27;的浏览器</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        dom[<span class="string">&#x27;on&#x27;</span>+type]=fn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取事件对象</span></span><br><span class="line"><span class="keyword">var</span> getEvent=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event||<span class="built_in">window</span>.event</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">var</span> getTarget=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event=getEvent(event)</span><br><span class="line">    <span class="comment">//标准浏览器下event.target，IE下event.srcElement</span></span><br><span class="line">    <span class="keyword">return</span> event.target||event.srcElement</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//阻止默认行为</span></span><br><span class="line"><span class="keyword">var</span> preventDefault=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event=getEvent(event)</span><br><span class="line">    <span class="comment">//标准浏览器</span></span><br><span class="line">    <span class="keyword">if</span>(event.preventDefault)&#123;</span><br><span class="line">        event.preventDefault()</span><br><span class="line">        <span class="comment">//IE浏览器</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        event.returnValue=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addEvent(myInput,<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    preventDefault(e)</span><br><span class="line">    <span class="comment">//获取事件源目标对象</span></span><br><span class="line">    <span class="keyword">if</span>(getTarget(e)!==<span class="built_in">document</span>.getElementById(<span class="string">&#x27;myInput&#x27;</span>))&#123;</span><br><span class="line">        hideInputSug()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="对接口方法的外层包装"><a href="#对接口方法的外层包装" class="headerlink" title="对接口方法的外层包装"></a>对接口方法的外层包装</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A=&#123;</span><br><span class="line">    <span class="comment">//通过id获取元素</span></span><br><span class="line">    <span class="attr">g</span>:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置元素css属性</span></span><br><span class="line">    <span class="attr">css</span>:<span class="function"><span class="keyword">function</span>(<span class="params">id,key,value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).style[key]=value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置元素的属性</span></span><br><span class="line">    <span class="attr">attr</span>:<span class="function"><span class="keyword">function</span>(<span class="params">id,key,value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id)[key]=value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">html</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id).innerHTML=html</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//为元素绑定事件</span></span><br><span class="line">    <span class="attr">on</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(id)[<span class="string">&#x27;on&#x27;</span>+type]=fn</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.css(<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)<span class="comment">//设置css样式</span></span><br><span class="line">A.attr(<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;className&#x27;</span>,<span class="string">&#x27;box&#x27;</span>)<span class="comment">//设置class</span></span><br><span class="line">A.html(<span class="string">&#x27;box&#x27;</span>,<span class="string">&#x27;这是新添加的内容&#x27;</span>)<span class="comment">//设置内容</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;外观模式：为一组复杂的子系统接口提供一个更高级的统一接口，通过这个接口使得对子系统接口的访问更容易，在javaScript中用于对底层结构兼容性做统一封装来简化用户使用&lt;/p&gt;
&lt;h1 id=&quot;兼容性优化：&quot;&gt;&lt;a href=&quot;#兼容性优化：&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://coloey.github.io/2022/05/12/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/12/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-12T13:29:46.000Z</published>
    <updated>2022-05-12T16:22:46.145Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建代码库"><a href="#创建代码库" class="headerlink" title="创建代码库"></a>创建代码库</h2><p>单例模式是一个只允许实例化一次的对象类，有时这么做是为了节省系统资源，javaScript中单例模式经常会作为命名空间对象来实现，通过单例对象可以将各个模块的代码井井有条的梳理在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A=&#123;</span><br><span class="line">    <span class="attr">Util</span>:&#123;</span><br><span class="line">        <span class="attr">util_method1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="attr">util_method2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">Tool</span>:&#123;</span><br><span class="line">        <span class="attr">tool_method1</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="attr">tool_method2</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">Ajax</span>:&#123;</span><br><span class="line">        <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="attr">post</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">others</span>:&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">A.Util.util_method1()</span><br><span class="line">A.Tool.tool_method1()</span><br><span class="line">A.Ajax.get()</span><br></pre></td></tr></table></figure><h2 id="单例模式管理静态变量"><a href="#单例模式管理静态变量" class="headerlink" title="单例模式管理静态变量"></a>单例模式管理静态变量</h2><p>静态变量：<strong>只能访问不能修改并且创建后就能使用</strong>，为了实现创建后就能使用这一需求，我们需要让创建的函数执行一次，我们创建的对象内保存着静态变量通过取值器访问，最后将这个对象作为一个单例放在全局空间里作为<strong>静态变量单例对象</strong>供他人使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Conf=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> conf=&#123;</span><br><span class="line">        <span class="attr">MAX_NUM</span>:<span class="number">100</span>,</span><br><span class="line">        <span class="attr">MIN_NUM</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">COUNT</span>:<span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回取值器对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> conf[name]?conf[name]:<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> count=Conf.get(<span class="string">&#x27;COUNT&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(count)<span class="comment">//1000</span></span><br></pre></td></tr></table></figure><h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>对于单例对象延迟创建，称为惰性创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LazySingle=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//单例实例引用</span></span><br><span class="line">    <span class="keyword">var</span> _instance=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//单例</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Single</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这里定义私有属性和方法</span></span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">publicMethod</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            <span class="attr">publicProperty</span>:<span class="string">&#x27;1.0&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取单例对象接口</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!_instance)&#123;</span><br><span class="line">            _instance=Single()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回单例</span></span><br><span class="line">        <span class="keyword">return</span> _instance</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(LazySingle().publicProperty);<span class="comment">//1.0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建代码库&quot;&gt;&lt;a href=&quot;#创建代码库&quot; class=&quot;headerlink&quot; title=&quot;创建代码库&quot;&gt;&lt;/a&gt;创建代码库&lt;/h2&gt;&lt;p&gt;单例模式是一个只允许实例化一次的对象类，有时这么做是为了节省系统资源，javaScript中单例模式经常会作为命名空</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="https://coloey.github.io/2022/05/12/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-1/"/>
    <id>https://coloey.github.io/2022/05/12/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F-1/</id>
    <published>2022-05-12T09:58:50.000Z</published>
    <updated>2022-05-12T13:30:13.652Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片轮播类</span></span><br><span class="line"><span class="keyword">var</span> LoopImages=<span class="function"><span class="keyword">function</span>(<span class="params">ImgArr,container</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.ImgArr=ImgArr;<span class="comment">//轮播图片数组</span></span><br><span class="line">    <span class="built_in">this</span>.container=container<span class="comment">//轮播图片容器</span></span><br><span class="line">&#125;</span><br><span class="line">LoopImages.prototype=&#123;</span><br><span class="line">    <span class="comment">//创建轮播图片</span></span><br><span class="line">    <span class="attr">createImg</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;LoopImages createImage function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">changeImage</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;LoopImages changeImage function&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上下切换滑动类</span></span><br><span class="line"><span class="keyword">var</span> SlideLoopImg=<span class="function"><span class="keyword">function</span>(<span class="params">imgArr,container</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数继承图片轮播类</span></span><br><span class="line">    LoopImages.call(<span class="built_in">this</span>,imgArr,container)</span><br><span class="line">&#125;</span><br><span class="line">SlideLoopImg.prototype=<span class="keyword">new</span> LoopImages()</span><br><span class="line"><span class="comment">//重写继承的切换下一张图片的方法</span></span><br><span class="line">SlideLoopImg.prototype.changeImage=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;SlideLoopImage changeImage function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渐隐切换类</span></span><br><span class="line"><span class="keyword">var</span> FadeLoopImg=<span class="function"><span class="keyword">function</span>(<span class="params">imgArr,container,arrow</span>)</span>&#123;</span><br><span class="line">    LoopImages.call(<span class="built_in">this</span>,imgArr,container)</span><br><span class="line">    <span class="built_in">this</span>.arrow=arrow</span><br><span class="line">&#125;</span><br><span class="line">FadeLoopImg.prototype=<span class="keyword">new</span> LoopImages()</span><br><span class="line">FadeLoopImg.prototype.changeImage=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;FadeLoopImage changeImage function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类将简单的属性放在构造函数中，将复杂的方法放在原型中，子类通过组合继承或者寄生组合继承将父类的方法和属性继承，子类可以将方法重写</p><p><strong>需要让每个继承对象独立拥有一份原型对象</strong>，或者创建的实例对象的构造函数比较复杂，或者耗时较长，或者通过创建多个对象实现，此时我们最好不用new关键字去复制这些基类，可以通过对这些对象属性和方法进行复制来实现创建，如果涉及多个对象，我们也可以通过原型模式来实现对新对象的创建。首先要有一个<strong>原型模式的对象复制方法</strong></p><p>基于已经存在的模板对象克隆新对象的模式</p><p>argument[0],arguments[1]…参数1，参数2…表示模板对象</p><p>这里对模板引用是浅复制，也可以根据需求深复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototypeExtend</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  &#125;,<span class="comment">//缓存类，为实例化返回对象临时创建</span></span><br><span class="line">    args=<span class="built_in">arguments</span>,<span class="comment">//模板对象参数序列</span></span><br><span class="line">    i=<span class="number">0</span>,</span><br><span class="line">    len=args.length;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//遍历每个模板对象中的属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j <span class="keyword">in</span> args[i])&#123;</span><br><span class="line">            <span class="comment">//将这些属性复制到缓存类原型中</span></span><br><span class="line">            F.prototype[j]=args[i][j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回缓存类的一个实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> penguin=prototypeExtend(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">speed</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">swim</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;游泳速度&#x27;</span>+<span class="built_in">this</span>.speed)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">run</span>:<span class="function"><span class="keyword">function</span>(<span class="params">speed</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;跑步速度&#x27;</span>+speed)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">jump</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;跳跃动作&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">penguin.swim();<span class="comment">//游泳速度 20</span></span><br><span class="line">penguin.run(<span class="number">10</span>)<span class="comment">//奔跑速度 10</span></span><br><span class="line">penguin.jump()<span class="comment">//跳跃动作</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="https://coloey.github.io/2022/05/12/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/12/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-12T08:54:57.000Z</published>
    <updated>2022-05-12T09:33:56.419Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建以为人类</span></span><br><span class="line"><span class="keyword">var</span> Human=<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.skill=param&amp;&amp;param.skill||<span class="string">&#x27;保密&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.hobby=param&amp;&amp;param.hobby||<span class="string">&#x27;保密&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类人原型方法</span></span><br><span class="line">Human.prototype=&#123;</span><br><span class="line">    <span class="attr">getSkill</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.skill</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getHobby</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.hobby</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化姓名类</span></span><br><span class="line"><span class="keyword">var</span> Named=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that=<span class="built_in">this</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//构造函数解析姓名的姓与名</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">name,that</span>)</span>&#123;</span><br><span class="line">        that.wholeName=name</span><br><span class="line">        <span class="keyword">if</span>(name.indexOf(<span class="string">&#x27; &#x27;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">            that.FirstName=name.splice(<span class="number">0</span>,name.indexOf(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">            that.SecondName=name.splice(name.indexOf(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(name,that)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化职位类</span></span><br><span class="line"><span class="keyword">var</span> Work=<span class="function"><span class="keyword">function</span>(<span class="params">work</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that=<span class="built_in">this</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">work,that</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(work)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;code&#x27;</span>:</span><br><span class="line">                that.work=<span class="string">&#x27;工程师&#x27;</span>;</span><br><span class="line">                that.workDescript=<span class="string">&#x27;每天沉迷于编程&#x27;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;UI&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;UE&#x27;</span>:</span><br><span class="line">                that.work=<span class="string">&#x27;设计师&#x27;</span>;</span><br><span class="line">                that.workDescript=<span class="string">&#x27;设计是一种艺术&#x27;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;teacher&#x27;</span>:</span><br><span class="line">                that.work=<span class="string">&#x27;教师&#x27;</span>;</span><br><span class="line">                that.workDescript=<span class="string">&#x27;分享是一种快乐&#x27;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                that.work=work</span><br><span class="line">                that.workDescript=<span class="string">&#x27;对不起，无您选择的职位&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(work,that)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更好期望的职位</span></span><br><span class="line">Work.prototype.changeWork=<span class="function"><span class="keyword">function</span>(<span class="params">work</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.work=work</span><br><span class="line">&#125;</span><br><span class="line">Work.prototype.changeDescript=<span class="function"><span class="keyword">function</span>(<span class="params">sentecnce</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.workDescript=sentecnce</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//应聘者建造者</span></span><br><span class="line"><span class="comment">//参数 name work</span></span><br><span class="line"><span class="keyword">var</span> Person=<span class="function"><span class="keyword">function</span>(<span class="params">name,work</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建应聘者缓存对象</span></span><br><span class="line">    <span class="keyword">var</span> _person=<span class="keyword">new</span> Human()</span><br><span class="line">    <span class="comment">//创建应聘者姓名解析对象</span></span><br><span class="line">    _person.name=<span class="keyword">new</span> Named(name)</span><br><span class="line">    <span class="comment">//创建应聘者工作解析对象</span></span><br><span class="line">    _person.work=<span class="keyword">new</span> Work(work)</span><br><span class="line">    <span class="keyword">return</span> _person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(<span class="string">&#x27;xiao ming&#x27;</span>,<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(person.skill)<span class="comment">//保密</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name.FirstName)<span class="comment">//xiao</span></span><br><span class="line"><span class="built_in">console</span>.log(person.work.work)<span class="comment">//工程师</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="建造者模式和工厂模式的区别"><a href="#建造者模式和工厂模式的区别" class="headerlink" title="建造者模式和工厂模式的区别"></a>建造者模式和工厂模式的区别</h2><p><strong>工厂模式创建出来的是一个对象，它追求的是创建的结果</strong>，创建的过程不是重点，<strong>而建造者模式不仅可以得到创建的结果，也参与了创建的具体过程，对于创建的具体实现的细节也参与了干涉</strong>，创建的对象更复杂，这种模式创建的对象时一个复合对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="https://coloey.github.io/2022/05/12/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/05/12/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-05-12T07:35:32.000Z</published>
    <updated>2022-05-12T08:55:09.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><p>只提供一个类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//蓝球基类</span></span><br><span class="line"><span class="keyword">var</span> Basketball=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.intro=<span class="string">&quot;篮球&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">Basketball.prototype=&#123;</span><br><span class="line">    <span class="attr">getMember</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;每个队伍5名队员&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getBallSize</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;蓝球很大&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//足球基类</span></span><br><span class="line"><span class="keyword">var</span> Football=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.intro=<span class="string">&#x27;足球&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">Football.prototype=&#123;</span><br><span class="line">    <span class="attr">getMember</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;每个队伍需要11名队员&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getBallSize</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;租足球很大&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运动工厂</span></span><br><span class="line"><span class="keyword">var</span> SportFactory=<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(name)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;NBA&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Basketball();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;wordCup&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Football()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为世界杯创建一个足球，只需要记住运动工厂，调用并创建</span></span><br><span class="line"><span class="keyword">var</span> football=SportFactory(<span class="string">&#x27;wordCup&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(football)</span><br><span class="line"><span class="built_in">console</span>.log(football.intro)</span><br><span class="line">football.getMember()</span><br></pre></td></tr></table></figure><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂其实就是一个实现子类继承父类的方法，在这个方法中我们通过传递子类以及要继承父类（抽象类）的名称，在抽象工厂方法中增加一次对抽象类存在性的一次判断，如果存在，则将子类继承父类的方法，然后子类通过寄生式继承，继承父类过程中，在对过渡类的原型继承时，我们不是继承父类的原型，<strong>而是通过new复制父类的一个实例，这么做是因为过渡类不应该仅仅继承父类的原型方法，还要继承父类的对象属性，通过new关键字将父类构造函数执行一遍来复制构造函数中的属性和方法。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象工厂方法</span></span><br><span class="line"><span class="keyword">var</span> VehicleFactory=<span class="function"><span class="keyword">function</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断抽象工厂中是否有该抽象类</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> VehicleFactory[superType]===<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//缓存类</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;  &#125;</span><br><span class="line">        <span class="comment">//继承父类属性和方法</span></span><br><span class="line">        F.prototype=<span class="keyword">new</span> VehicleFactory[superType]()</span><br><span class="line">        <span class="comment">//将子类constructor指向子类</span></span><br><span class="line">        subType.constructor=subType</span><br><span class="line">        <span class="comment">//子类原型继承父类</span></span><br><span class="line">        subType.prototype=<span class="keyword">new</span> F()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//不存在抽象类抛出错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;未创建该抽象类&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//汽车抽象类</span></span><br><span class="line">VehicleFactory.Car=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.type=<span class="string">&#x27;car&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">VehicleFactory.Car.prototype=&#123;</span><br><span class="line">    <span class="attr">getPrice</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;抽象方法不能调用&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getSpeed</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;抽象方法不能调用&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//公共车抽象类</span></span><br><span class="line">VehicleFactory.Bus=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.type=<span class="string">&#x27;bus&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">VehicleFactory.Bus.prototype=&#123;</span><br><span class="line">    <span class="attr">getPrice</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;抽象方法不能调用&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getSpeed</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;抽象方法不能调用&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//货车抽象类</span></span><br><span class="line">VehicleFactory.Truck=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.type=<span class="string">&#x27;truck&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">VehicleFactory.Truck.prototype=&#123;</span><br><span class="line">    <span class="attr">getPrice</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;抽象方法不能调用&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getSpeed</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;抽象方法不能调用&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//宝马汽车子类</span></span><br><span class="line"><span class="keyword">var</span> BMW=<span class="function"><span class="keyword">function</span>(<span class="params">price,speed</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.price=price;</span><br><span class="line">    <span class="built_in">this</span>.speed=speed</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象工厂实现对Car抽象类继承</span></span><br><span class="line">VehicleFactory(BMW,<span class="string">&#x27;Car&#x27;</span>)</span><br><span class="line">BMW.prototype.getPrice=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.price</span><br><span class="line">&#125;</span><br><span class="line">BMW.prototype.getSpeed=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.speed</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兰博基尼汽车子类</span></span><br><span class="line"><span class="keyword">var</span> Lamborghini=<span class="function"><span class="keyword">function</span> (<span class="params">price,speed</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.price=price;</span><br><span class="line">    <span class="built_in">this</span>.speed=speed</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象工厂实现对Car抽象类继承</span></span><br><span class="line">VehicleFactory(Lamborghini,<span class="string">&#x27;Car&#x27;</span>)</span><br><span class="line">Lamborghini.prototype.getPrice=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.price</span><br><span class="line">&#125;</span><br><span class="line">Lamborghini.prototype.getSpeed=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.speed</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h1&gt;&lt;p&gt;只提供一个类&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>记vuecli3聊天室项目webpack打包优化</title>
    <link href="https://coloey.github.io/2022/05/11/%E8%AE%B0vuecli3%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AEwebpack%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <id>https://coloey.github.io/2022/05/11/%E8%AE%B0vuecli3%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AEwebpack%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</id>
    <published>2022-05-11T09:58:40.000Z</published>
    <updated>2022-05-11T16:10:02.815Z</updated>
    
    <content type="html"><![CDATA[<p>vue.config.js:</p><h2 id="1-UglifyPlugin-Webpack-Plugin-插件用来缩小js文件"><a href="#1-UglifyPlugin-Webpack-Plugin-插件用来缩小js文件" class="headerlink" title="1 UglifyPlugin Webpack Plugin 插件用来缩小js文件"></a>1 UglifyPlugin Webpack Plugin 插件用来缩小js文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin=<span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;/Vue-chat/&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span> ,</span><br><span class="line">    <span class="comment">// 输出文件目录</span></span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="comment">// eslint-loader 是否在保存的时候检查</span></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// use the full build with in-browser compiler?</span></span><br><span class="line">    <span class="comment">// https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only</span></span><br><span class="line">    <span class="comment">// compiler: false,</span></span><br><span class="line">    <span class="comment">// webpack配置</span></span><br><span class="line">    <span class="comment">// see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md</span></span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="comment">//代码压缩</span></span><br><span class="line">    <span class="attr">configureWebpack</span>:&#123;</span><br><span class="line">      <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">          <span class="attr">uglifyOptions</span>:&#123;</span><br><span class="line">            <span class="attr">compress</span>:&#123;</span><br><span class="line">              <span class="attr">drop_debugger</span>:<span class="literal">true</span>,</span><br><span class="line">              <span class="attr">drop_console</span>:<span class="literal">true</span>,</span><br><span class="line">              <span class="attr">pure_funcs</span>:[<span class="string">&#x27;console.log&#x27;</span>]<span class="comment">//删除console.log语句</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">sourceMap</span>:<span class="literal">false</span>,</span><br><span class="line">          <span class="attr">parallel</span>:<span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// vue-loader 配置项</span></span><br><span class="line">    <span class="comment">// https://vue-loader.vuejs.org/en/options.html</span></span><br><span class="line">    <span class="comment">// vueLoader: &#123;&#125;,</span></span><br><span class="line">    <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// css相关配置</span></span><br><span class="line">    <span class="comment">//  css: &#123;</span></span><br><span class="line">    <span class="comment">// //  // 是否使用css分离插件 ExtractTextPlugin</span></span><br><span class="line">    <span class="comment">//     extract: true,</span></span><br><span class="line">    <span class="comment">//  // 开启 CSS source maps?</span></span><br><span class="line">    <span class="comment">//     sourceMap: false,</span></span><br><span class="line">    <span class="comment">// //  // css预设器配置项</span></span><br><span class="line">    <span class="comment">//     loaderOptions: &#123;</span></span><br><span class="line">    <span class="comment">//       css:&#123;&#125;,//这里的选项会传递给css-loader</span></span><br><span class="line">    <span class="comment">//       postcss:&#123;&#125;//这里的选项会传递给postcss-loader</span></span><br><span class="line">    <span class="comment">//     &#125;,</span></span><br><span class="line">    <span class="comment">// //  // 启用 CSS modules for all css / pre-processor files.</span></span><br><span class="line">    <span class="comment">//     requireModuleExtension: false</span></span><br><span class="line">    <span class="comment">//  &#125;,</span></span><br><span class="line">    <span class="comment">// use thread-loader for babel &amp; TS in production build</span></span><br><span class="line">    <span class="comment">// enabled by default if the machine has more than 1 cores</span></span><br><span class="line">    <span class="attr">parallel</span>: <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).cpus().length &gt; <span class="number">1</span>,<span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</span></span><br><span class="line">    <span class="comment">// 是否启用dll</span></span><br><span class="line">    <span class="comment">// See https://github.com/vuejs/vue-cli/blob/dev/docs/cli-service.md#dll-mode</span></span><br><span class="line">    <span class="comment">// dll: false,</span></span><br><span class="line">    <span class="comment">// PWA 插件相关配置</span></span><br><span class="line">    <span class="comment">// see https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa</span></span><br><span class="line">    <span class="attr">pwa</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// webpack-dev-server 相关配置</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">open</span>: process.platform === <span class="string">&#x27;darwin&#x27;</span>,</span><br><span class="line">      <span class="attr">disableHostCheck</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">port</span>:<span class="number">8081</span>,</span><br><span class="line">      <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">hotOnly</span>: <span class="literal">false</span>,</span><br><span class="line">      </span><br><span class="line">     <span class="attr">before</span>: <span class="function"><span class="params">app</span> =&gt;</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第三方插件配置</span></span><br><span class="line">    <span class="attr">pluginOptions</span>: &#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="2-路由懒加载："><a href="#2-路由懒加载：" class="headerlink" title="2 路由懒加载："></a>2 路由懒加载：</h2><p>把不同路由对应的组件分割成不同的代码块，待路由被请求的时候会单独打包路由，使得入口文件变小，加载速度大大增加，以函数的形式加载路由，这样就可以把各自的路由文件分别打包，只有在解析给定的路由时，才会加载路由组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes:[&#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;通讯录&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="built_in">Promise</span>.resolve(<span class="keyword">import</span>(<span class="string">&quot;../components/contact/contact.vue&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="3-UI框架按需加载"><a href="#3-UI框架按需加载" class="headerlink" title="3 UI框架按需加载"></a>3 UI框架按需加载</h2><p>在日常使用的UI框架，例如element-plus，我们经常直接使用整个UI库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElemtPlus <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br></pre></td></tr></table></figure><p>但实际上我用到的组件只有按钮，分页，表格，输入与警告，所以我们需要按需引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Button,Input,Table,TableColumn,MessageBox&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-静态资源本地缓存"><a href="#4-静态资源本地缓存" class="headerlink" title="4 静态资源本地缓存"></a>4 静态资源本地缓存</h2><p>后端返回资源问题：</p><ul><li>采用<code>HTTP</code>缓存，设置<code>Cache-Control</code>，<code>Last-Modified</code>，<code>Etag</code>等响应头</li><li>采用<code>Service Worker</code>离线缓存</li></ul><p>前端合理利用<code>localStorage</code></p><h2 id="5-图片资源的压缩"><a href="#5-图片资源的压缩" class="headerlink" title="5 图片资源的压缩"></a>5 图片资源的压缩</h2><p>图片资源虽然不在编码过程中，但它却是对页面性能影响最大的因素</p><p>对于所有的图片资源，我们可以进行适当的压缩</p><p>对页面上使用到的<code>icon</code>，可以使用在线字体图标，或者雪碧图，将众多小图标合并到同一张图上，用以减轻<code>http</code>请求压力。</p><h3 id="开启GZip压缩"><a href="#开启GZip压缩" class="headerlink" title="开启GZip压缩"></a>开启GZip压缩</h3><p>拆完包之后，我们再用<code>gzip</code>做一下压缩 安装<code>compression-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i compression-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CompressionPlugin = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 为生产环境修改配置...</span></span><br><span class="line">            config.mode = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [<span class="keyword">new</span> CompressionPlugin(&#123;</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/\.js$|\.html$|\.css/</span>, <span class="comment">//匹配文件名</span></span><br><span class="line">                    threshold: <span class="number">10240</span>, <span class="comment">//对超过10k的数据进行压缩</span></span><br><span class="line">                    <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span> <span class="comment">//是否删除原文件</span></span><br><span class="line">                &#125;)]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="6-使用SSR"><a href="#6-使用SSR" class="headerlink" title="6 使用SSR"></a>6 使用SSR</h2><p>SSR（Server side ），也就是服务端渲染，组件或页面通过服务器生成html字符串，再发送到浏览器</p><p>从头搭建一个服务端渲染是很复杂的，<code>vue</code>应用建议使用<code>Nuxt.js</code>实现服务端渲染</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue.config.js:&lt;/p&gt;
&lt;h2 id=&quot;1-UglifyPlugin-Webpack-Plugin-插件用来缩小js文件&quot;&gt;&lt;a href=&quot;#1-UglifyPlugin-Webpack-Plugin-插件用来缩小js文件&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="前端开发工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>vue-loader的使用配置</title>
    <link href="https://coloey.github.io/2022/05/10/vue-loader%E7%9A%84%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://coloey.github.io/2022/05/10/vue-loader%E7%9A%84%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2022-05-10T15:28:58.000Z</published>
    <updated>2022-05-12T16:22:52.372Z</updated>
    
    <content type="html"><![CDATA[<p>一个包含vue-loader的简单webpack配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin=<span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;VueLoadPlugin&#125;=<span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> isProduction=process.evv.NODE_ENV===<span class="string">&#x27;production&#x27;</span></span><br><span class="line"><span class="keyword">const</span> extractLoader=&#123;</span><br><span class="line">    <span class="attr">loader</span>:MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="attr">options</span>:&#123;</span><br><span class="line">        <span class="attr">publicPath</span>:<span class="string">&#x27;../&#x27;</span>,</span><br><span class="line">        <span class="attr">hmr</span>:process.env.NODE_ENV===<span class="string">&#x27;development&#x27;</span><span class="comment">//开发环境下打开热更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cssExtractPlugin=<span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;[name].css&#x27;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>:<span class="string">&#x27;[id].css&#x27;</span>,</span><br><span class="line">    <span class="attr">ignoreOrder</span>:<span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> webpackConfig=&#123;</span><br><span class="line">    <span class="attr">entryd</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;...&#125;,</span><br><span class="line"><span class="attr">optimization</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">resolve</span>:&#123;...&#125;,</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[&#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader:<span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">             <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">             oneof:[&#123;</span><br><span class="line">                  <span class="attr">resourceQuery</span>:<span class="regexp">/\?vue/</span>,</span><br><span class="line">                  use:[isProduction?extractLoader:<span class="string">&#x27;vue-style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">             &#125;,&#123;</span><br><span class="line">               <span class="attr">use</span>:[isproduction?extractLoader:<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            </span><br><span class="line">           &#125;  </span><br><span class="line">            ]</span><br><span class="line">         &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="attr">plugins</span>:[</span><br><span class="line">         <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">         isProduction?cssExtractPlugin:<span class="string">&#x27;&#x27;</span></span><br><span class="line">     ]</span><br><span class="line">                </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vue-loader工作原理"><a href="#vue-loader工作原理" class="headerlink" title="vue-loader工作原理"></a>vue-loader工作原理</h3><p>通过vue-loader,webpack可以将.vue文件转化为浏览器可识别的javascript</p><ul><li><p>将一个.vue文件分割成template,script,styles三部分</p></li><li><p>template部分通过compile生成render,staticRenderFns</p></li><li><p>获取script部分返回的配置对象scriptExports</p></li><li><p>styles部分，会通过css-loader,vue-style-loader,添加到head中，或者通过css-loader,MiniCssExtractPlugin提取到一个公共的css文件</p></li><li><p>使用vue-loader提供的normalizeComponent方法，合并scriptExports,render,staticRenderFns,返回构建vue组件需要的配置对象-options,即{data,props,methods,render,staticRenderFns…}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 template区域块 获取 render、 staticRenderFns 方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; render, staticRenderFns &#125; <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=template&amp;id=7ba5bd90&amp;scoped=true&amp;&quot;</span></span><br><span class="line"><span class="comment">// 从 script区域块 获取 组件的配置项对象</span></span><br><span class="line"><span class="keyword">import</span> script <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span></span><br><span class="line"><span class="comment">// 获取 styles区域块的内容</span></span><br><span class="line"><span class="keyword">import</span> style0 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;&quot;</span></span><br><span class="line"><span class="comment">// 获取 styles(scoped)区域块的内容</span></span><br><span class="line"><span class="keyword">import</span> style1 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=1&amp;id=7ba5bd90&amp;scoped=true&amp;lang=css&amp;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* normalize component */</span></span><br><span class="line"><span class="keyword">import</span> normalizer <span class="keyword">from</span> <span class="string">&quot;!../node_modules/_vue-loader@15.7.1@vue-loader/lib/runtime/componentNormalizer.js&quot;</span></span><br><span class="line"><span class="comment">// 返回构建组件需要的配置项对象， 包含 data、props、render、staticRenderFns 等</span></span><br><span class="line"><span class="keyword">var</span> component = normalizer(</span><br><span class="line">  script,</span><br><span class="line">  render,</span><br><span class="line">  staticRenderFns,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;7ba5bd90&quot;</span>,</span><br><span class="line">  <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">component.options.__file = <span class="string">&quot;src/App.vue&quot;</span></span><br><span class="line"><span class="comment">// 输出组件完整的配置项</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> component.exports</span><br></pre></td></tr></table></figure><h3 id="css-scoped"><a href="#css-scoped" class="headerlink" title="css scoped"></a>css scoped</h3><p>当.vue文件中的style标签有scoped属性，它的css样式只作用于当前组件的元素</p><p><strong>css scoped</strong> 的 <strong>工作流程</strong> 如下:</p><ol><li>使用 <strong>vue-loader</strong> 处理 <strong>.vue</strong> 文件， 根据 <strong>.vue 文件</strong> 的 <strong>请求路径</strong> 和 <strong>文件内容</strong>， 生成 <strong>.vue 文件</strong> 的 <strong>hash</strong> 值, 如：<strong>7ba5bd90</strong>；</li><li>如果 <strong>.vue 文件</strong> 的 <strong>某一个 style 标签</strong> 有 <strong>scoped</strong> 属性， 为 <strong>.vue 文件</strong> 生成一个 <strong>scopedId</strong>，<strong>scopedId</strong> 的格式为 <strong>data-v-hash</strong>， 如：<strong>data-v-7ba5bd90</strong>；</li><li>使用 <strong>vue-loader</strong> 从 <strong>.vue 文件</strong> 中获取 <strong>style区域块(scoped)</strong> 的 **样式内容(字符串)**；如果使用了 <strong>less</strong> 或者 <strong>sass</strong>， 要使用 <strong>less-loader</strong> 或者 <strong>sass-loader</strong> 处理 <strong>样式内容</strong>，使 <strong>样式内容</strong> 变为 <strong>浏览器可识别的css样式</strong>； 然后使用 <strong>PostCSS</strong> 提供的 <strong>parser</strong> 处理 <strong>样式内容</strong>， 为 <strong>样式内容</strong> 中的每一个 <strong>css选择器</strong> 添加 **[data-v-hash]**； 再使用 <strong>css-loader</strong>；最后使用 <strong>style-loader</strong> 把 <strong>css 样式</strong> 添加到 <strong>head</strong> 中或者通过 <strong>miniCssExtractPlugin</strong> 将 <strong>css 样式</strong> 提取一个公共的 <strong>css</strong> 文件中。</li><li>通过 <strong>normalizer</strong> 方法返回 <strong>完整的组件配置项 options</strong>， <strong>options</strong> 中有属性 <strong>_scopeId</strong>, 如 <strong>_scopedId: data-v-7ba5bd90</strong>;</li><li>使用 <strong>组件配置项 options</strong> 构建组件实例， 给 <strong>组件</strong> 中每一个 <strong>dom元素</strong> 添加属性: <strong>data-v-hash</strong>。</li></ol><p>经历上述过程，<strong>style(scoped)</strong> 中的样式就变成了 <strong>组件的私有样式</strong>。</p><h3 id="深度作用选择器"><a href="#深度作用选择器" class="headerlink" title="深度作用选择器"></a>深度作用选择器</h3><p>我们可以通过 <strong>&gt;&gt;&gt;</strong> 操作符， 在 <strong>组件</strong> 中修改 <strong>子组件</strong> 的 <strong>私有样式</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child component</span></span><br><span class="line">.hello &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parent component </span></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .parant .hello &#123;...&#125;</span><br><span class="line">    .parent &gt;&gt;&gt; .hello &#123;...&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进过 postCSS 处理以后的 css</span></span><br><span class="line">.parent .hello[data-v-xxx] &#123;...&#125;  <span class="comment">// 无法影响子组件</span></span><br><span class="line"></span><br><span class="line">.parant[data-v-xxx] .hello &#123;....&#125; <span class="comment">// 可影响子组件</span></span><br></pre></td></tr></table></figure><p>有些像 <strong>Sass</strong> 之类的 <strong>预处理器</strong> 无法 **正确解析 &gt;&gt;&gt;**。这种情况下我们可以使用 <strong>/deep/</strong> 或 <strong>::v-deep</strong> 操作符取而代之，两者都是 <strong>&gt;&gt;&gt;</strong> 的 <strong>别名</strong>，同样可以正常工作。</p><p><strong>深度作用选择器， 必须在含有 scoped 属性 的 style 标签中使用，否则无效</strong>。 这是因为 <strong>&gt;&gt;&gt;、/deep/、::v-deep</strong> 需要被 <strong>postCSS</strong> 解析才能起作用。 只有 <strong>style 标签</strong> 中有 <strong>scoped 属性</strong>， <strong>样式内容</strong> 才会被 <strong>postCSS</strong> 解析。</p><p><strong>postCSS</strong> 解析样式内容的时候， 会给 <strong>&gt;&gt;</strong>&gt; 操作符 <strong>前面</strong> 的 <strong>css选择器</strong> 添加 **[data-v-hash]**。</p><blockquote><p>注意： <strong>父组件</strong> 中修改 <strong>子组件</strong> 的 <strong>私有样式</strong> 时， <strong>父组件</strong> 中的 <strong>样式的优先级</strong> 要大于 <strong>子组件</strong> 中的 <strong>样式的优先级</strong>， 否则会导致 <strong>父组件中定义的样式不生效</strong>。</p></blockquote></li></ul><h3 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h3><p>我们也可以在 <strong>.vue 文件</strong> 的 <strong>style 标签</strong> 上添加 <strong>module 属性</strong>， 使得 <strong>style 标签</strong> 中的 <strong>样式</strong> 变为 <strong>组件私有</strong>，具体使用方法详见 - <a href="https://vue-loader.vuejs.org/zh/guide/css-modules.html#%E7%94%A8%E6%B3%95">官网</a>。</p><p><strong>css modules</strong> 和 <strong>css scoped</strong> 都可以使 <strong>样式</strong> 变为 <strong>组件私有</strong>，但是 <strong>原理</strong> 不一样。</p><p><strong>css scoped</strong> 的实质是利用 <strong>css属性选择器</strong> 使得 <strong>样式</strong> 称为 <strong>局部样式</strong>，而 <strong>css modules</strong> 的实质是让 <strong>样式的类名、id名唯一</strong> 使得 <strong>样式</strong> 称为 <strong>局部样式</strong>。</p><p><strong>css modules</strong> 的 <strong>工作流程</strong> 如下:</p><ol><li>使用 <strong>vue-loader</strong> 处理 <strong>.vue</strong> 文件， 将 <strong>.vue 文件内容</strong> 转化为 <strong>js 代码</strong>。 如果 <strong>.vue 文件</strong> 中的 <strong>style 标签</strong> 中有 <strong>module</strong> 属性， 向 <strong>js 代码</strong> 中注入一个 <strong>injectStyle</strong> 方法， 如下：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; render, staticRenderFns &#125; <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=template&amp;id=3512ffa2&amp;scoped=true&amp;&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> script <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>  </span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> style0 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=0&amp;module=a&amp;lang=css&amp;&quot;</span>  </span><br><span class="line"><span class="keyword">import</span> style1 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=1&amp;id=3512ffa2&amp;module=true&amp;scoped=true&amp;lang=css&amp;&quot;</span>  </span><br><span class="line"><span class="comment">// 通过injectStyle方法， 会向vue实例中添加属性  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">injectStyles</span> (<span class="params">context</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// 对应 &lt;style module=&quot;a&quot;&gt;...&lt;/style&gt;  </span></span><br><span class="line">    <span class="comment">// 给vue实例添加属性a， 对应的值为使用css-loader处理样式内容以后返回的对象  </span></span><br><span class="line">    <span class="built_in">this</span>[<span class="string">&quot;a&quot;</span>] = (style0.locals || style0)  </span><br><span class="line">    <span class="comment">// 对应 &lt;style module&gt;...&lt;/style&gt;  </span></span><br><span class="line">    <span class="comment">// 给vue实例添加属性$style, 对应的值为使用css-loader处理样式内容以后返回的对象  </span></span><br><span class="line">    <span class="built_in">this</span>[<span class="string">&quot;$style&quot;</span>] = (style1.locals || style1)  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/* normalize component */</span>  </span><br><span class="line"><span class="keyword">import</span> normalizer <span class="keyword">from</span> <span class="string">&quot;!../node_modules/_vue-loader@15.7.1@vue-loader/lib/runtime/componentNormalizer.js&quot;</span>  </span><br><span class="line"><span class="comment">// normalize 会返回一个组件完整配置项对象  </span></span><br><span class="line"><span class="comment">// 在执行过程中， 会将render方法重新包装成 renderWithStyleInjection 方法  </span></span><br><span class="line"><span class="comment">// 执行 renderWithStyleInjection 方法时的时候， 先执行 injectStyles 方法， 再执行 原来的render 方法  </span></span><br><span class="line"><span class="keyword">var</span> component = normalizer(  </span><br><span class="line">  script,  </span><br><span class="line">  render,  </span><br><span class="line">  staticRenderFns,  </span><br><span class="line">  <span class="literal">false</span>,  </span><br><span class="line">  injectStyles,  </span><br><span class="line">  <span class="string">&quot;3512ffa2&quot;</span>,  </span><br><span class="line">  <span class="literal">null</span>  </span><br><span class="line">    </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> component.exports<span class="string">&quot;  </span></span><br></pre></td></tr></table></figure><ol><li>使用 <strong>css-loader</strong> 处理 <strong>.vue 文件</strong> 的 <strong>style 区域块</strong>，会将 <strong>style 区域块</strong> 中的样式内容， 转化为 <strong>js 代码</strong>， 如下:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports = <span class="built_in">require</span>(<span class="string">&quot;../node_modules/_css-loader@3.2.0@css-loader/dist/runtime/api.js&quot;</span>)(<span class="literal">false</span>);  </span><br><span class="line"><span class="comment">// Module  </span></span><br><span class="line"><span class="built_in">exports</span>.push([<span class="built_in">module</span>.id, <span class="string">&quot;\n#_3cl756BP8kssTYTEsON-Ao &#123;\n  font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n&#125;\n._3IbrnaW__7RJMXk4rh9tW- &#123;\n  background-color: blue;\n&#125;\n&quot;</span>, <span class="string">&quot;&quot;</span>]);  </span><br><span class="line"><span class="comment">// Exports  </span></span><br><span class="line"><span class="built_in">exports</span>.locals = &#123;  </span><br><span class="line">    <span class="comment">// app是id名  </span></span><br><span class="line"><span class="string">&quot;app&quot;</span>: <span class="string">&quot;_3cl756BP8kssTYTEsON-Ao&quot;</span>,  </span><br><span class="line"><span class="comment">// class 是 类名  </span></span><br><span class="line"><span class="string">&quot;class1&quot;</span>: <span class="string">&quot;_3IbrnaW__7RJMXk4rh9tW-&quot;</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>在处理过程中， <strong>css-loader</strong> 会将样式中的 <strong>类名</strong>、<strong>id名</strong> 等用一个 <strong>唯一的命名代替</strong>。<br>在执行 <strong>步骤1</strong> 的代码时，会执行上面的代码， 返回一个 <strong>对象</strong>， 即 <strong>步骤一</strong> 中的 <strong>style0</strong> 、<strong>style1</strong>， 格式如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css样式内容会通过 style-loader 提供的方法添加到 head 中  </span></span><br><span class="line"><span class="comment">// 或者被 miniCssExtractPlugin 提取到一个 公共的css文件 中  </span></span><br><span class="line">style0 = [[css模块 id, css样式内容字符串, <span class="string">&#x27;&#x27;</span>], ...]  </span><br><span class="line">style0.locals = &#123;  </span><br><span class="line">    <span class="string">&quot;app&quot;</span>: <span class="string">&quot;_3cl756BP8kssTYTEsON-Ao&quot;</span>,  </span><br><span class="line"><span class="string">&quot;class1&quot;</span>: <span class="string">&quot;_3IbrnaW__7RJMXk4rh9tW-&quot;</span>  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="3"><li><strong>运行项目执行打包以后的js代码</strong>， 即 <strong>步骤1中的代码</strong>， 获取 <strong>render</strong>、<strong>staticRenderFns</strong>、<strong>scriptExprots</strong>、 <strong>style0</strong>、<strong>style1</strong>， 然后通过 <strong>normalizer</strong> 方法返回 <strong>组件完整配置项 - options</strong>。 在执行过程中，将 <strong>render</strong> 方法重新包装成 <strong>renderWithStyleInjection</strong> 方法。<br>构建 <strong>vue 实例</strong> 时，执行 <strong>renderWithStyleInjection</strong> 方法， 此时会 <strong>先</strong> 执行 <strong>injectStyles</strong> 方法，给 <strong>vue 实例</strong> 添加 <strong>$style</strong>、<strong>a</strong> 属性，属性值为 <strong>stlye0.locals</strong>、<strong>style1.locals</strong>， 再执行原来的 <strong>render</strong> 方法。<br>这样， 我们就可以通过 <strong>vue 实例</strong> 的 <strong>$styl</strong>e、<strong>a</strong> 属性访问 <strong>样式</strong> 的 <strong>类名</strong>、<strong>id</strong>名。</li></ol><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p><strong>开发模式</strong> 下，当使用 <strong>vue-loader</strong>、 <strong>vue-style-loader</strong> 处理 <strong>.vue 文件</strong> 的时候， 会向 <strong>生成的js代码</strong> 中注入与 <strong>热更新</strong> 相关的代码逻辑。 当我们修改 <strong>.vue 文件</strong> 时， <strong>dev-server</strong> 会通知 <strong>浏览器</strong> 进行 <strong>热更新</strong>。</p><p><strong>.vue 文件</strong> 的 <strong>各个区域块(template、script、styles)</strong> 对应的 <strong>热更新逻辑</strong> 都不一样。</p><ul><li><h4 id="template-amp-script"><a href="#template-amp-script" class="headerlink" title="template &amp; script"></a>template &amp; script</h4></li></ul><p><strong>vue-loader</strong> 会在 <strong>打包代码</strong> 中注入 <strong>热更新 template、script 区域块</strong> 的代码，如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 template区域块 获取 render、 staticRenderFns 方法  </span></span><br><span class="line"><span class="keyword">import</span> &#123; render, staticRenderFns &#125; <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=template&amp;id=7ba5bd90&amp;scoped=true&amp;&quot;</span>  </span><br><span class="line"><span class="comment">// 从 script区域块 获取 组件的配置项对象  </span></span><br><span class="line"><span class="keyword">import</span> script <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>  </span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span>  </span><br><span class="line"><span class="comment">// 获取 styles区域块的内容  </span></span><br><span class="line"><span class="keyword">import</span> style0 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;&quot;</span>  </span><br><span class="line"><span class="comment">// 获取 styles(scoped)区域块的内容  </span></span><br><span class="line"><span class="keyword">import</span> style1 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=1&amp;id=7ba5bd90&amp;scoped=true&amp;lang=css&amp;&quot;</span>  </span><br><span class="line"><span class="comment">/* normalize component */</span>  </span><br><span class="line"><span class="keyword">import</span> normalizer <span class="keyword">from</span> <span class="string">&quot;!../node_modules/_vue-loader@15.7.1@vue-loader/lib/runtime/componentNormalizer.js&quot;</span>  </span><br><span class="line"><span class="comment">// 返回构建组件需要的配置项对象， 包含 data、props、render、staticRenderFns 等  </span></span><br><span class="line"><span class="keyword">var</span> component = normalizer(  </span><br><span class="line">  script,  </span><br><span class="line">  render,  </span><br><span class="line">  staticRenderFns,  </span><br><span class="line">  <span class="literal">false</span>,  </span><br><span class="line">  <span class="literal">null</span>,  </span><br><span class="line">  <span class="string">&quot;7ba5bd90&quot;</span>,  </span><br><span class="line">  <span class="literal">null</span>  </span><br><span class="line">    </span><br><span class="line">)  </span><br><span class="line"><span class="comment">/* hot reload */</span>  </span><br><span class="line"><span class="comment">// .vue 文件的 script 区域块更改时， 客户端执行这一段代码  </span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;  </span><br><span class="line">  <span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">&quot;D:\\study\\demo\\webpack\\webpack-4-demo\\node_modules\\_vue-hot-reload-api@2.3.3@vue-hot-reload-api\\dist\\index.js&quot;</span>)  </span><br><span class="line">  api.install(<span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>))  </span><br><span class="line">  <span class="keyword">if</span> (api.compatible) &#123;  </span><br><span class="line">    <span class="built_in">module</span>.hot.accept()  </span><br><span class="line">    <span class="keyword">if</span> (!api.isRecorded(<span class="string">&#x27;7ba5bd90&#x27;</span>)) &#123;  </span><br><span class="line">      api.createRecord(<span class="string">&#x27;7ba5bd90&#x27;</span>, component.options)  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="comment">// 执行 reload 方法， 触发更新  </span></span><br><span class="line">      <span class="comment">// 使用 新的 options 替换原来的 options  </span></span><br><span class="line">      api.reload(<span class="string">&#x27;7ba5bd90&#x27;</span>, component.options)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">module</span>.hot.accept(<span class="string">&quot;./App.vue?vue&amp;type=template&amp;id=7ba5bd90&amp;scoped=true&amp;&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">      <span class="comment">// 当 .vue 文件的 template 区域块更改时， 客户端执行这一段代码  </span></span><br><span class="line">      <span class="comment">// 使用新的 render、staticRenderFns 更新原来的render、staticRenderFns  </span></span><br><span class="line">      api.rerender(<span class="string">&#x27;7ba5bd90&#x27;</span>, &#123;  </span><br><span class="line">        <span class="attr">render</span>: render,  </span><br><span class="line">        <span class="attr">staticRenderFns</span>: staticRenderFns  </span><br><span class="line">      &#125;)  </span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">component.options.__file = <span class="string">&quot;src/App.vue&quot;</span>  </span><br><span class="line"><span class="comment">// 输出组件完整的配置项  </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> component.exports  </span><br></pre></td></tr></table></figure><p>如果我们只修改了 <strong>.vue 文件</strong> 的 <strong>script</strong> 部分， <strong>客户端(即浏览器)</strong> 会进行 <strong>热更新</strong>， 过程如下：</p><ol><li><strong>服务端</strong> 通过 <strong>websocket 连接</strong> 通知 <strong>客户端</strong> 更新；</li><li><strong>客户端</strong> 通过 <strong>动态添加script元素</strong> 的方式获取 <strong>更新以后的打包文件</strong>；</li><li><strong>安装打包文件</strong>，即执行 <strong>新的打包文件</strong> 中的 <strong>js 代码</strong>， 使用 <strong>打包文件中的 module 更新浏览器缓存的同名 module</strong>；</li><li><strong>重新安装组件对应的 module</strong>， 即 <strong>重新执行组件对应的js代码</strong>， 获取 <strong>render</strong>、<strong>staticRenderFns</strong> 和 新的 <strong>scriptExports</strong>， 重新生成 <strong>组件</strong> 对应的 <strong>完整配置项</strong>；</li><li>执行 <strong>api</strong> 提供的 <strong>reload</strong> 方法， <strong>更新组件</strong>。<br>在 <strong>reload</strong> 方法中，会通过执行 <strong>父组件实例</strong> 的 <strong>$forceUpdate</strong> 方法来 <strong>更新组件</strong>。<br>更新组件的时候， 由于<strong>组件</strong> 的 <strong>配置项(data、props、methods等属性)</strong> 发生变化， 需要为 <strong>组件</strong> 生成 <strong>新的构造函数 VueComponent</strong>， 然后使用 <strong>新的构造函数</strong>，构建 <strong>新的组件实例</strong>。<br>即， 每次修改 <strong>.vue 文件</strong> 的 <strong>script</strong> 部分， 都会为 <strong>组件</strong> 生成一个 <strong>新的实例对象</strong>， <strong>销毁旧的实例对象</strong>。<br>如果我们只修改了 <strong>.vue 文件</strong> 的 <strong>template</strong> 部分, <strong>客户端(即浏览器)</strong> 会进行 <strong>热更新</strong>， 过程如下：</li><li><strong>同上</strong>，<strong>服务端</strong> 通过 <strong>websocket 连接</strong> 通知 <strong>客户端</strong> 更新；</li><li><strong>同上</strong>， <strong>客户端</strong> 通过 <strong>动态添加script元素</strong> 的方式获取 <strong>更新以后的打包文件</strong>；</li><li><strong>同上</strong>， <strong>安装打包文件</strong>，即执行 <strong>新的打包文件</strong> 中的 <strong>js 代码</strong>， 使用 <strong>打包文件中的 module 更新浏览器缓存的同名 module</strong>；</li><li>触发通过 <strong>module.hot.accept</strong> 注册的 <strong>callback</strong>；</li><li>执行 <strong>api</strong> 提供的 <strong>rerender</strong> 方法， <strong>更新组件</strong>。<br>执行 <strong>rerender</strong> 方法时， 会先获取 <strong>修改以后的template区域块</strong> 对应的 <strong>render</strong>、<strong>staticRenderFns</strong>， 然后 <strong>更新原组件的 render、staticRenderFns</strong>， 然后执行 <strong>组件实例</strong> 的 <strong>$forceUpdate</strong> 方法来更新 **组件(更新组件的时候， 会使用新的render方法， 生成新的vnode节点树)**。<br>如果我们 <strong>同时</strong> 修改了 <strong>.vue 文件</strong>的 <strong>template</strong>、 <strong>script</strong>部分， 会按照上面 <strong>第一种情况</strong> 进行 <strong>热更新</strong>，并且不会触发上面代码中通过 <strong>module.hot.accept</strong> 注册的 <strong>callback</strong>。</li></ol><ul><li><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4></li></ul><p><strong>vue-style-loader</strong> 会在 <strong>打包代码</strong> 中注入 <strong>热更新 style区域块</strong> 的代码， 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ar add = <span class="built_in">require</span>(<span class="string">&quot;!../node_modules/_vue-style-loader@4.1.2@vue-style-loader/lib/addStylesClient.js&quot;</span>).default  </span><br><span class="line"><span class="keyword">var</span> update = add(<span class="string">&quot;05835b6f&quot;</span>, content, <span class="literal">false</span>, &#123;&#125;);  </span><br><span class="line"><span class="comment">// Hot Module Replacement  </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">module</span>.hot) &#123;  </span><br><span class="line"> <span class="comment">// When the styles change, update the &lt;style&gt; tags  </span></span><br><span class="line"> <span class="keyword">if</span>(!content.locals) &#123;  </span><br><span class="line">   <span class="built_in">module</span>.hot.accept(<span class="string">&quot;!!../node_modules/_css-loader@3.1.0@css-loader/dist/cjs.js!../node_modules/_vue-loader@15.7.1@vue-loader/lib/loaders/stylePostLoader.js!../node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">     <span class="comment">// 当 .vue 文件的 styles 区域块更改时， 客户端执行这一段代码  </span></span><br><span class="line">     <span class="keyword">var</span> newContent = <span class="built_in">require</span>(<span class="string">&quot;!!../node_modules/_css-loader@3.1.0@css-loader/dist/cjs.js!../node_modules/_vue-loader@15.7.1@vue-loader/lib/loaders/stylePostLoader.js!../node_modules/_vue-loader@15.7.1@vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;&quot;</span>);  </span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">typeof</span> newContent === <span class="string">&#x27;string&#x27;</span>) newContent = [[<span class="built_in">module</span>.id, newContent, <span class="string">&#x27;&#x27;</span>]];  </span><br><span class="line">     <span class="comment">// 执行update方法， 更新styles  </span></span><br><span class="line">     update(newContent);  </span><br><span class="line">   &#125;);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">...  </span><br></pre></td></tr></table></figure><p>如果我们修改了 <strong>.vue 文件</strong> 的 <strong>styles 区域块</strong>，<strong>客户端(即浏览器)</strong> 会进行 <strong>热更新</strong>， 过程如下：</p><ol><li>同上，<strong>服务端</strong> 通过 <strong>websocket 连接</strong> 通知 <strong>客户端</strong> 更新；</li><li>同上，<strong>客户端</strong> 通过 <strong>动态添加script元素</strong> 的方式获取 <strong>更新以后的打包文件</strong>；</li><li>同上，<strong>安装打包文件</strong>，即执行 <strong>新的打包文件</strong> 中的 <strong>js 代码</strong>， 使用 <strong>打包文件中的 module 更新浏览器缓存的同名 module</strong>;</li><li>触发通过 <strong>module.hot.accept</strong> 注册的 <strong>callback</strong>；</li><li>执行 <strong>update</strong> 方法， <strong>更新样式</strong>。<br><strong>更新样式</strong> 的时候， 会先 <strong>移除原来的 style 标签</strong>， 然后 <strong>添加新的 style 标签</strong>。<br>如果 <strong>style 标签</strong> 上有 <strong>module 属性</strong>，除了 <strong>vue-style-loader</strong> 会注入 <strong>热更新代码</strong> 外，<strong>vue-loader</strong> 也会在 <strong>打包代码</strong> 中注入 <strong>热更新代码</strong>，如下:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 热更新代码  </span></span><br><span class="line">   <span class="built_in">module</span>.hot &amp;&amp; <span class="built_in">module</span>.hot.accept([<span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=1&amp;id=7ba5bd90&amp;module=true&amp;scoped=true&amp;lang=css&amp;&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">     <span class="comment">// 当.vue的style区域块发生变化， 且style标签有module属性， 执行这一段逻辑  </span></span><br><span class="line">     <span class="keyword">var</span> oldLocals = cssModules[<span class="string">&quot;$style&quot;</span>]  </span><br><span class="line">     <span class="keyword">if</span> (oldLocals) &#123;  </span><br><span class="line">       <span class="comment">// 获取新的唯一类名、id名  </span></span><br><span class="line">       <span class="keyword">var</span> newLocals = <span class="built_in">require</span>(<span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=1&amp;id=7ba5bd90&amp;module=true&amp;scoped=true&amp;lang=css&amp;&quot;</span>)  </span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(newLocals) !== <span class="built_in">JSON</span>.stringify(oldLocals)) &#123;  </span><br><span class="line">         <span class="comment">// 更新vue实例的$style属性  </span></span><br><span class="line">         cssModules[<span class="string">&quot;$style&quot;</span>] = newLocals  </span><br><span class="line">         <span class="comment">// 执行vue实例的 $forceUpdate 方法，重新执行 render 方法  </span></span><br><span class="line">         <span class="built_in">require</span>(<span class="string">&quot;D:\\study\\demo\\webpack\\webpack-4-demo\\node_modules\\_vue-hot-reload-api@2.3.3@vue-hot-reload-api\\dist\\index.js&quot;</span>).rerender(<span class="string">&quot;7ba5bd90&quot;</span>)  </span><br><span class="line">       &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line">   &#125;)  </span><br></pre></td></tr></table></figure><p>执行上述 <strong>热更新代码</strong>， 会 <strong>更新 vue实例 的 $style 属性</strong>， 然后触发 <strong>vue 实例</strong> 的 <strong>$forceUpdate</strong> 方法， <strong>重新渲染</strong>。<br>一个 <strong>style 区域块</strong> 对应一个 <strong>style 标签</strong>。修改某一个 <strong>style 区域块</strong> 之后，会更新对应的 <strong>style 标签</strong>。<br><strong>style 区域块</strong> 的 <strong>热更新</strong> 和 <strong>template</strong>、<strong>script 区域块</strong>的 <strong>热更新</strong> 互不影响。</p><h3 id="tree-shaking-副作用"><a href="#tree-shaking-副作用" class="headerlink" title="tree shaking 副作用"></a>tree shaking 副作用</h3><p><strong>生产模式</strong> 下， <strong>webpack</strong> 默认启用 <strong>tree shaking</strong>。如果此时项目 <strong>根目录</strong> 中的 <strong>package.json</strong> 中的 <strong>sideEffects</strong> 的值为 <strong>false</strong>，且 <strong>.vue 文件</strong> 的 <strong>style 标签</strong> 没有 <strong>module 属性</strong>，使用 <strong>vue-loader</strong> 处理 <strong>.vue 文件</strong> 的时候， 会产生 <strong>样式丢失</strong> 的情况，即 <strong>styles 区域块 不会添加到 head 中或者 被提取到公共的css文件中</strong>。</p><p>首先，先看一下 <strong>.vue 文件</strong> 经过处理以后生成的 <strong>js代码</strong>， 如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/ 从 template区域块 获取 render、 staticRenderFns 方法</span><br><span class="line"><span class="keyword">import</span> &#123; render, staticRenderFns &#125; <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=template&amp;id=7ba5bd90&amp;scoped=true&amp;&quot;</span></span><br><span class="line"><span class="comment">// 从 script区域块 获取 组件的配置项对象</span></span><br><span class="line"><span class="keyword">import</span> scriptExports <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=script&amp;lang=js&amp;&quot;</span></span><br><span class="line"><span class="comment">// 获取 styles区域块的内容</span></span><br><span class="line"><span class="keyword">import</span> style0 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;&quot;</span></span><br><span class="line"><span class="comment">// 获取 styles(scoped)区域块的内容</span></span><br><span class="line"><span class="keyword">import</span> style1 <span class="keyword">from</span> <span class="string">&quot;./App.vue?vue&amp;type=style&amp;index=1&amp;id=7ba5bd90&amp;scoped=true&amp;lang=css&amp;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* normalize component */</span></span><br><span class="line"><span class="keyword">import</span> normalizer <span class="keyword">from</span> <span class="string">&quot;!../node_modules/_vue-loader@15.7.1@vue-loader/lib/runtime/componentNormalizer.js&quot;</span></span><br><span class="line"><span class="comment">// 返回构建组件需要的配置项对象， 包含 data、props、render、staticRenderFns 等</span></span><br><span class="line"><span class="keyword">var</span> component = normalizer(</span><br><span class="line">  scriptExports,</span><br><span class="line">  render,</span><br><span class="line">  staticRenderFns,</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">&quot;7ba5bd90&quot;</span>,</span><br><span class="line">  <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">component.options.__file = <span class="string">&quot;src/App.vue&quot;</span></span><br><span class="line"><span class="comment">// 输出组件完整的配置项</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> component.exports</span><br></pre></td></tr></table></figure><p>在上面的代码中，<strong>template 区域块</strong> 返回的 <strong>render</strong>、<strong>staticRenderFns</strong>， <strong>script 区域块</strong> 返回的 <strong>scriptExports</strong>， 都有被 <strong>normalizer</strong> 方法使用， 而 <strong>styles 区域块</strong> 返回的 <strong>style0</strong>、<strong>style1</strong> 则没有被使用。 在 <strong>打包代码</strong> 的时候， <strong>tree shaking</strong> 就会自动移除 <strong>styles 区域块</strong> 对应的代码，导致 <strong>样式丢失</strong>。</p><p><strong>解决方法</strong>:</p><ol><li>修改 <strong>package.json</strong> 文件中的 <strong>sideEffects 属性</strong>， 告诉 <strong>webpack</strong> <strong>.vue 文件</strong>在使用 <strong>tree shaking</strong> 的时候会有 <strong>副作用</strong>， 如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;sideEffects&quot;: [  </span><br><span class="line">    &quot;*.vue&quot;  </span><br><span class="line"> ]  </span><br></pre></td></tr></table></figure><p>有了上述配置， <strong>webpack</strong> 在处理 <strong>.vue</strong> 文件的时候， 不会使用 <strong>tree shaking</strong>， <strong>不会出现样式丢失的问题</strong>。<br>但是这种解决方法有一个问题， 如果 <strong>script 区域块</strong> 中通过 <strong>import</strong> 的方式引入了 <strong>未使用的模块</strong>，<strong>未使用的模块在最后打包代码的时候不会被删除</strong>。</p><ol><li>通过 <strong>rule.sideEffects</strong> 指定 <strong>具体的模块</strong> 在使用 <strong>tree shaking</strong> 的时候会有 <strong>副作用</strong>， 如下:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// webpackConfig：  </span><br><span class="line">&#123;  </span><br><span class="line">    test: /\.css$/,  </span><br><span class="line">    oneOf: [&#123;  </span><br><span class="line">        resourceQuery: /\?vue/,  </span><br><span class="line">        // 指定.vue文件的 style区域块 使用 tree shaking 时会有副作用  </span><br><span class="line">        sideEffects: true,  </span><br><span class="line">        use: [isProduction ? MiniCssExtractPlugin.loader  : &#x27;vue-style-loader&#x27;, &#x27;css-loader&#x27;]  </span><br><span class="line">    &#125;, &#123;  </span><br><span class="line">        use: [isProduction ? MiniCssExtractPlugin.loader  : &#x27;style-loader&#x27;, &#x27;css-loader&#x27;]  </span><br><span class="line">    &#125;]  </span><br><span class="line">&#125;,  </span><br><span class="line">&#123;  </span><br><span class="line">    test: /\.scss$/,  </span><br><span class="line">    oneOf: [&#123;  </span><br><span class="line">        resourceQuery: /\?vue/,  </span><br><span class="line">        // 指定.vue文件的 style(lang=scss)区域块 使用 tree shaking 时会有副作用  </span><br><span class="line">        sideEffects: true,  </span><br><span class="line">        use: [isProduction ? MiniCssExtractPlugin.loader  : &#x27;vue-style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27;]  </span><br><span class="line">    &#125;, &#123;  </span><br><span class="line">        use: [isProduction ? MiniCssExtractPlugin.loader  : &#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27;]  </span><br><span class="line">    &#125;]  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">// package.json  </span><br><span class="line">&#123;  </span><br><span class="line">    sideEffects: false  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>上述配置， 明确说明了 <strong>.vue 文件</strong> 的 <strong>style 区域块</strong> 在使用 <strong>tree shaking</strong> 的时候， 会有 <strong>副作用</strong>，<strong>在打包的时候不会删除</strong>。<br>这样的话，样式不会丢失， 并且如果 <strong>script 区域块</strong> 中通过 <strong>import</strong> 的方式引入了 <strong>未使用的模块</strong>，<strong>未使用的模块在最后打包代码的时候会被删除</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个包含vue-loader的简单webpack配置：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>工作流</title>
    <link href="https://coloey.github.io/2022/05/09/%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>https://coloey.github.io/2022/05/09/%E5%B7%A5%E4%BD%9C%E6%B5%81/</id>
    <published>2022-05-09T14:25:05.000Z</published>
    <updated>2022-05-09T14:59:46.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地工作流"><a href="#本地工作流" class="headerlink" title="本地工作流"></a>本地工作流</h1><p>本地工作流是本地工具链阶段的前端工程体系所对应的<strong>工作模式</strong>，此阶段的各个功能模块均由开发人员在本机环境下执行，所有功能模块的两个要素：</p><ul><li>执行人：前端开发人员</li><li>执行环境：分散的本地开发环境</li></ul><h2 id="代码分离与测试沙箱"><a href="#代码分离与测试沙箱" class="headerlink" title="代码分离与测试沙箱"></a>代码分离与测试沙箱</h2><h3 id="代码分离："><a href="#代码分离：" class="headerlink" title="代码分离："></a>代码分离：</h3><p>基本原则是单独编写一个适应各环境的“配置文件”,假设我们将此文件命名为manifest.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Domain=<span class="built_in">window</span>.location.host;</span><br><span class="line"><span class="keyword">if</span>(Domain===<span class="string">&#x27;test.app.com&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//测试环境</span></span><br><span class="line">    <span class="built_in">window</span>.ASYNC_API_DOMAIN=<span class="string">&#x27;apitest.app.com&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Domain===<span class="string">&#x27;www.app.com&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//生产环境</span></span><br><span class="line">    <span class="built_in">window</span>.ASYNC_DOMAIN=<span class="string">&#x27;api.app.com&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将主站域名区分测试环境和生产环境，并将对应的异步API域名以全局变量的形式暴露出来。随后在业务逻辑代码main.app.js中使用全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">`https://<span class="subst">$&#123;<span class="built_in">window</span>.ASYNC_API_DOMAIN&#125;</span>/login`</span>,</span><br><span class="line">    <span class="attr">dataType</span>:<span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">success</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>manifest.app.js可以作为一个通用模块不参与构建，并且必须在业务js文件之前引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;//static.app.com/common/manifest.js&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//static.app.com/common/main.app.js&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>manifest.js作为一个通用模块，无法保证更新后完全兼容历史项目</p><p>代码分离的本质是架构层面的细节设计，架构是跟着业务需求的变动而不断改变的，所以manifest.js只能作为一种临时性的解决方法，而不是从工程角度出发的高度可适应方案</p><h3 id="测试沙箱"><a href="#测试沙箱" class="headerlink" title="测试沙箱"></a>测试沙箱</h3><p>测试沙箱的原则是搭建一个仿真的生产环境，在工作流中加入测试沙箱的支持后，前端只需执行一次针对生产环境的构建行为即可，测试通过后可直接部署上线，无需二次构建</p><p><img src="/2022/05/09/%E5%B7%A5%E4%BD%9C%E6%B5%81/ceshi1.png" alt="image-20220509224958318"></p><p>测试沙箱只需要模拟一个前端仿真环境，比如实现域名的映射，最原始的方案就是通过修改测试人员本地host文件实现，如果要统一规范可以搭建一个专属的VPN服务，所有参与测试的任意统一使用此VPN代理访问测试沙箱。测试沙箱的复杂度取决于生成环境的复杂度</p><h1 id="云平台工作流"><a href="#云平台工作流" class="headerlink" title="云平台工作流"></a>云平台工作流</h1><p>云平台工作流在本地工作流的基础上，将容易因个体差异产生问题的功能模块（比如构建，部署等）提升到云平台运行，通过严谨的流程控制增强开发规范性，云平台的目标不仅是实现功能的集中管理，而且要在此基础上进一步优化工作流程。功能集中的同时以为着权限集中，这也是实现自动构建和自动部署的必要前提</p><p><img src="/2022/05/09/%E5%B7%A5%E4%BD%9C%E6%B5%81/yun.png"></p><p>开发人员负责一线开发工作</p><p>开发负责人汇总开发人员的各个分支并将其合并到dev分支</p><p>云平台管理人员负责项目的发起以及部署队列的控制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本地工作流&quot;&gt;&lt;a href=&quot;#本地工作流&quot; class=&quot;headerlink&quot; title=&quot;本地工作流&quot;&gt;&lt;/a&gt;本地工作流&lt;/h1&gt;&lt;p&gt;本地工作流是本地工具链阶段的前端工程体系所对应的&lt;strong&gt;工作模式&lt;/strong&gt;，此阶段的各个功能模块均由</summary>
      
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
</feed>
