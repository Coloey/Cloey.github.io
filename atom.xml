<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2022-08-24T15:51:20.244Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>函数式组件与类组件的不同</title>
    <link href="https://coloey.github.io/2022/08/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C/"/>
    <id>https://coloey.github.io/2022/08/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C/</id>
    <published>2022-08-24T15:37:14.000Z</published>
    <updated>2022-08-24T15:51:20.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h1><h2 id="类组件："><a href="#类组件：" class="headerlink" title="类组件："></a>类组件：</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + <span class="built_in">this</span>.props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式组件："><a href="#函数式组件：" class="headerlink" title="函数式组件："></a>函数式组件：</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在React中props是不可变的，所以它们永远不会改变，然而,类组件中，this是且永远是可变的</strong></p><p>类组件中this存在的意义：React本身随着时间推移而改变，以便你可以在渲染方法以及生命周期方法中得到最新的实例.</p><p><strong>如果希望类组件中能在一次特定渲染中捕获那一次渲染所用的props或者state，可以使用闭包</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Capture the props!</span></span><br><span class="line">    <span class="keyword">const</span> props = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note: we are *inside render*.</span></span><br><span class="line">    <span class="comment">// These aren&#x27;t class methods.</span></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式组件想捕获最新的props和state"><a href="#函数式组件想捕获最新的props和state" class="headerlink" title="函数式组件想捕获最新的props和state?"></a>函数式组件想捕获最新的props和state?</h1><p>用useRef</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保持追踪最新的值。</span></span><br><span class="line">  <span class="keyword">const</span> latestMessage = useRef(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    latestMessage.current = message;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;You said: &#x27;</span> + latestMessage.current);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>总结于：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;eg&quot;&gt;&lt;a href=&quot;#eg&quot; class=&quot;headerlink&quot; title=&quot;eg:&quot;&gt;&lt;/a&gt;eg:&lt;/h1&gt;&lt;h2 id=&quot;类组件：&quot;&gt;&lt;a href=&quot;#类组件：&quot; class=&quot;headerlink&quot; title=&quot;类组件：&quot;&gt;&lt;/a&gt;类组件：&lt;</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>详解useEffect</title>
    <link href="https://coloey.github.io/2022/08/24/%E8%AF%A6%E8%A7%A3useEffect/"/>
    <id>https://coloey.github.io/2022/08/24/%E8%AF%A6%E8%A7%A3useEffect/</id>
    <published>2022-08-24T07:06:04.000Z</published>
    <updated>2022-08-24T15:36:42.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每次渲染都有它自己的Effects"><a href="#每次渲染都有它自己的Effects" class="headerlink" title="每次渲染都有它自己的Effects"></a>每次渲染都有它自己的Effects</h2><p><code>count</code>是某个特定渲染中的常量。事件处理函数“看到”的是属于它那次特定渲染中的<code>count</code>状态值。对于effects也同样如此：</p><p><strong>并不是<code>count</code>的值在“不变”的effect中发生了改变，而是effect 函数本身在每一次渲染中都不相同,概念上它是组件输出的一部分，可以看到属于某次特定渲染的props和state</strong></p><h2 id="Effects的清除"><a href="#Effects的清除" class="headerlink" title="Effects的清除"></a>Effects的清除</h2><p>effects有时候需要有一个清理步骤，目的是消除副作用，<strong>React只会在浏览器绘制后运行effects</strong>，这使得你的应用更流畅，因为大多数effects不会阻塞屏幕的更新，<strong>effects的清除同样被延迟，上一次的effect会在重新渲染后被清除</strong></p><ul><li><strong>React 渲染<code>&#123;id: 20&#125;</code>的UI。</strong></li><li>浏览器绘制。我们在屏幕上看到<code>&#123;id: 20&#125;</code>的UI。</li><li><strong>React 清除<code>&#123;id: 10&#125;</code>的effect。</strong></li><li>React 运行<code>&#123;id: 20&#125;</code>的effect。</li></ul><p><strong>effect的清除不会读取最新的props，它只能读取到定义它的那次渲染中华的prop值</strong></p><h2 id="告诉React去比对你的Effects"><a href="#告诉React去比对你的Effects" class="headerlink" title="告诉React去比对你的Effects"></a>告诉React去比对你的Effects</h2><p>这是为什么你如果想要避免effects不必要的重复调用，你可以提供给<code>useEffect</code>一个依赖数组参数(deps)：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">&#x27;Hello, &#x27;</span> + name;</span><br><span class="line">&#125;, [name]); <span class="comment">// Our deps</span></span><br></pre></td></tr></table></figure><p><strong>这好比你告诉React：“Hey，我知道你看不到这个函数里的东西，但我可以保证只使用了渲染中的<code>name</code>，别无其他。”</strong></p><p>移除依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, [count]);</span><br></pre></td></tr></table></figure><p>定时器会在每一次<code>count</code>改变后清除和重新设定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><p><strong>React已经知道当前的count,我们需要告知React的仅仅是去递增状态，不管它现在具体是什么值</strong></p><p>解耦来自Actions的更新</p><p>当你写setSomething(something=&gt;…)这种代码时可以考虑使用reducer,reducer可以让你把组件内发生了什么和状态如何响应并更新分开描述</p><p>我们用一个dispatch依赖去替换effect的step依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"><span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;tick&#x27;</span> &#125;); <span class="comment">// Instead of setCount(c =&gt; c + step);</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">&#125;, [dispatch]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">&#x27;tick&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + step, step &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.type === <span class="string">&#x27;step&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; count, <span class="attr">step</span>: action.step &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React保证dispatch在每次渲染中都是一样的，所以可以在依赖中去掉它，不会引起effect不必要的重复执行，当dispatch时，React只记住了action,它会在下一次渲染中再次调用reducer</p><h2 id="无限重复请求问题："><a href="#无限重复请求问题：" class="headerlink" title="无限重复请求问题："></a>无限重复请求问题：</h2><p>1 没有依赖数组，那么每次渲染都会触发这个副作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    fetchData()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2 设置了依赖数组，但是依赖数组里的变量一直在变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [data,setData] = useState()</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetchNewData()</span><br><span class="line">        setData(res.data)</span><br><span class="line">    &#125;</span><br><span class="line">    fetchData()</span><br><span class="line">&#125;,[data])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="定义函数请求"><a href="#定义函数请求" class="headerlink" title="定义函数请求"></a>定义函数请求</h2><ul><li><p>某些函数只在effect中使用，那就在effect中定义</p></li><li><p>某些函数在多个地方使用，就独立定义，最好用useCallBack包裹，并且在依赖数组里把依赖项写全</p><p>eg:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;react&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ✅ Preserves identity until query changes</span></span><br><span class="line">  <span class="keyword">const</span> getFetchUrl = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://hn.algolia.com/api/v1/search?query=&#x27;</span> + query;</span><br><span class="line">  &#125;, [query]);  <span class="comment">// ✅ Callback deps are OK</span></span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl();</span><br><span class="line">    <span class="comment">// ... Fetch data and do something ...</span></span><br><span class="line">  &#125;, [getFetchUrl]); <span class="comment">// ✅ Effect deps are OK</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果query不变，getFetchUrl也会保持不变，effect也不会重新运行，反之，query改变了，getFetchUrl也会随之改变</p><p>参考：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;每次渲染都有它自己的Effects&quot;&gt;&lt;a href=&quot;#每次渲染都有它自己的Effects&quot; class=&quot;headerlink&quot; title=&quot;每次渲染都有它自己的Effects&quot;&gt;&lt;/a&gt;每次渲染都有它自己的Effects&lt;/h2&gt;&lt;p&gt;&lt;code&gt;coun</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>发布订阅模式</title>
    <link href="https://coloey.github.io/2022/08/24/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/08/24/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-24T03:58:59.000Z</published>
    <updated>2022-08-24T04:09:26.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发布订阅模式的实现："><a href="#发布订阅模式的实现：" class="headerlink" title="发布订阅模式的实现："></a>发布订阅模式的实现：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.events=&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.events[type])&#123;</span><br><span class="line">            <span class="built_in">this</span>.events[type]=[]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type].push(handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">addListener</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.on(type,handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">prependListener</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.events[type])&#123;</span><br><span class="line">            <span class="built_in">this</span>.events[type]=[]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type].unshift(handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">removeListener</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.events[type])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type]=<span class="built_in">this</span>.events[type].filter(<span class="function"><span class="params">item</span>=&gt;</span>item !== handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">off</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.removeListener(type,handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">emit</span>(<span class="params">type,...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!events[type]||events[type].length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type].forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">Reflect</span>.apply(item,<span class="built_in">this</span>,args);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">once</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">temp</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">            handler(args)</span><br><span class="line">            <span class="built_in">this</span>.off(type,handler)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.on(type,temp)<span class="comment">//为事件注册单次监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h1><ul><li>时间解耦</li><li>对象之间解耦</li><li>应用上：可以用在异步编程</li><li>架构上：MVC和MVVM都有发布订阅模式的参与，JavaScript本身是一门基于事件驱动的语言</li></ul><h1 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h1><p>创建订阅者本身需要消耗一定的时间和内存，而且当你订阅一个消息后，如果该消息最后都未发生，那么这个订阅者会始终存储在内存中。另外，发布订阅模式虽然会弱化对向之间的联系，但是过度使用，，对象和对象之间的必要联系会被深埋在背后，导致程序难以维护和理解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发布订阅模式的实现：&quot;&gt;&lt;a href=&quot;#发布订阅模式的实现：&quot; class=&quot;headerlink&quot; title=&quot;发布订阅模式的实现：&quot;&gt;&lt;/a&gt;发布订阅模式的实现：&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://coloey.github.io/2022/08/23/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/08/23/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-23T03:25:07.000Z</published>
    <updated>2022-08-23T05:18:02.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h1><p>虚拟代理会把一些开销很大的对象，延迟到真正需要它的时候再执行</p><h1 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h1><p>代理负责预加载图片，预加载操作完成后将请求重新交给本体MyImage，降低耦合度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myImage=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ImageNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(ImageNode)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        ImageNode.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image</span><br><span class="line">    img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        myImage(<span class="built_in">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        myImage(<span class="string">&#x27;file://C:/Users/sevenaeng/Desktop/loading.jpg&#x27;</span>)</span><br><span class="line">        img.src=src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">proxyImage(<span class="string">&#x27;http://imgcache.qq.com/music/a.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="虚拟代理合并https请求"><a href="#虚拟代理合并https请求" class="headerlink" title="虚拟代理合并https请求"></a>虚拟代理合并https请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚拟代理合并http请求</span></span><br><span class="line"><span class="keyword">let</span> synchronusFile = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;开始同步文件,id为:&#x27;</span>+id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxySynchronousFile=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = [],timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        cache.push(id)</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            synchronusFile(cache.join(<span class="string">&#x27;,&#x27;</span>))<span class="comment">//两秒内向本体发送需要同步的ID集合</span></span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer=<span class="literal">null</span></span><br><span class="line">            cache.length=<span class="number">0</span><span class="comment">//清空ID集合</span></span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;c;c=checkbox[i++])&#123;</span><br><span class="line">    c.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.checked === <span class="literal">true</span>)&#123;</span><br><span class="line">            proxySynchronousFile(<span class="built_in">this</span>.id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缓存代理："><a href="#缓存代理：" class="headerlink" title="缓存代理："></a>缓存代理：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存代理计算乘积</span></span><br><span class="line"><span class="keyword">let</span> mult =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        a= a*<span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓存代理工厂</span></span><br><span class="line"><span class="keyword">let</span> createProxyFactory=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache=&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(args <span class="keyword">in</span> cache)&#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args]=fn.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxyMult = createProxyFactory(mult)</span><br></pre></td></tr></table></figure><p>代理的意义：</p><p><strong>实现单一职责原则</strong>，指的是一个类，应该仅有一个引起它变化的原因，如果一个对象承担了多个职责，这个对象将会变得巨大，引起它变化的原因也会很多，这些耦合在一起会导致脆弱和低内聚的设计</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟代理&quot;&gt;&lt;a href=&quot;#虚拟代理&quot; class=&quot;headerlink&quot; title=&quot;虚拟代理&quot;&gt;&lt;/a&gt;虚拟代理&lt;/h1&gt;&lt;p&gt;虚拟代理会把一些开销很大的对象，延迟到真正需要它的时候再执行&lt;/p&gt;
&lt;h1 id=&quot;虚拟代理实现图片预加载&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>vue和react的区别</title>
    <link href="https://coloey.github.io/2022/08/20/vue%E5%92%8Creact%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://coloey.github.io/2022/08/20/vue%E5%92%8Creact%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-08-20T10:07:13.000Z</published>
    <updated>2022-08-20T10:24:31.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue和React的相同点很多："><a href="#Vue和React的相同点很多：" class="headerlink" title="Vue和React的相同点很多："></a>Vue和React的相同点很多：</h1><p>都使用Virtual DOM</p><p>都使用组件化的思想</p><p>都是响应式，使用MVVM模式</p><p>都有自己的构建工具，Vue的vue-cli,React的create-react-app</p><h1 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h1><h2 id="数据流向不同"><a href="#数据流向不同" class="headerlink" title="数据流向不同"></a>数据流向不同</h2><p>react从诞生开始就推崇单向数据流，而Vue是双向数据流</p><p>Vue基于template模板+Option API/Compnent API,React本质核心只有一个Virtual DOM+Diff算法，Api非常少</p><h2 id="响应式原理不同："><a href="#响应式原理不同：" class="headerlink" title="响应式原理不同："></a>响应式原理不同：</h2><p>Vue依赖收集，自动优化，数据可变</p><p>Vue递归监听data的所有属性，直接修改</p><p>当数据改变时，自动找到引用组件重新渲染</p><p>React:</p><p>React基于状态机，手动优化，数据不可变，需要setState驱动新的State替换旧的State</p><p>当数据改变时，以组件为根目录，默认全部重新渲染</p><h2 id="diff算法不同："><a href="#diff算法不同：" class="headerlink" title="diff算法不同："></a>diff算法不同：</h2><p>两者思维相似，都是基于两个假设：</p><p>不同的组件产生不同的DOM结构，当type不同时，对应DOM操作就是直接销毁老的DOM，创建新的DOM</p><p>同一层次的一组子节点，可以通过唯一的key区分</p><p>源码实现上有区分：</p><p>Vue Diff使用双向指针，边对比边更新DOM</p><p>React主要使用diff队列保存需要更新的DOM，得到patch树，再统一操作批量更新DOM</p><h2 id="事件机制不同"><a href="#事件机制不同" class="headerlink" title="事件机制不同"></a>事件机制不同</h2><p>Vue</p><ul><li><code>Vue原生事件使用标准Web事件</code></li><li>Vue组件自定义事件机制，是父子组件通信基础</li><li>Vue合理利用了snabbdom库的模块插件</li></ul><p>React</p><ul><li><code>React原生事件被包装</code>，所有事件都冒泡到顶层document监听，然后在这里合成事件下发。基于这套，可以跨端使用事件机制，而不是和Web DOM强绑定。</li><li>React组件上无事件，父子组件通信使用props</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue和React的相同点很多：&quot;&gt;&lt;a href=&quot;#Vue和React的相同点很多：&quot; class=&quot;headerlink&quot; title=&quot;Vue和React的相同点很多：&quot;&gt;&lt;/a&gt;Vue和React的相同点很多：&lt;/h1&gt;&lt;p&gt;都使用Virtual DOM</summary>
      
    
    
    
    <category term="Vue" scheme="https://coloey.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>基于聊天室项目的总结</title>
    <link href="https://coloey.github.io/2022/08/15/%E5%9F%BA%E4%BA%8E%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>https://coloey.github.io/2022/08/15/%E5%9F%BA%E4%BA%8E%E8%81%8A%E5%A4%A9%E5%AE%A4%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%80%BB%E7%BB%93/</id>
    <published>2022-08-15T12:39:18.000Z</published>
    <updated>2022-08-22T16:01:18.757Z</updated>
    
    <content type="html"><![CDATA[<p>用node中的express搭建服务器,写接口，登录方式采用jwt登录验证，用mysql存储各个人员信息,用soket.io实现聊天功能，webpack打包项目，以及动态展示功能,支持修改密码，注册用户，一对一实时聊天，发表情包,图片等功能，各个页面之间的跳转用vue-router实现，跳转使用路由懒加载，只会在第一次进入页面时才会获取这个函数，然后使用缓存数据。搭配使用Weui样式库。</p><h1 id="jwt登录认证的实现："><a href="#jwt登录认证的实现：" class="headerlink" title="jwt登录认证的实现："></a>jwt登录认证的实现：</h1><p>jwt组成部分：</p><p>头部.有效荷载.签名</p><p>Header.PayLoad.Signature</p><p>头部：包含了JWT类型和使用的Hash算法</p><p>负载：包含了一些声明，通常是一个User信息</p><p>签名：是对前两部分的签名，防止数据篡改</p><p>原理：</p><p>当用户使用凭据成功登录后，将返回一个json web token,由于token是凭据，不应该将token保留超过所需要的时间，也不应该将敏感数据存储在浏览器存储中，token在Authotization标头中放，跨域资源共享不会成为问题，因为它不使用cookie,使用jwt认证，程序可以使用access token去访问受保护的资源，比如在express中的使用，可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以/api/开头的不用权限，配置成功了express-jwt这个中间件，就可以把解析出来的用户信息挂载到req.user上</span></span><br><span class="line">app.use(expressJWT(&#123;</span><br><span class="line">    <span class="attr">secret</span>:secretkey,</span><br><span class="line">    <span class="attr">algorithms</span>: [<span class="string">&#x27;HS256&#x27;</span>],</span><br><span class="line">    &#125;).unless(&#123;<span class="attr">path</span>:[<span class="regexp">/^\/api\//</span>]&#125;))</span><br></pre></td></tr></table></figure><h2 id="JWT优点："><a href="#JWT优点：" class="headerlink" title="JWT优点："></a>JWT优点：</h2><p>不需要在服务端保存会话信息，所以易于应用的扩展，即信息不保存在服务端，不会存在Session扩展不方便的情况</p><p>JWT中的负载可以存储常用信息，用于信息交换，有效地使用JWT，可以降低服务端查询数据库的次数</p><h2 id="JWT缺点："><a href="#JWT缺点：" class="headerlink" title="JWT缺点："></a>JWT缺点：</h2><p>到期问题：由于服务器不保存Session状态，因此无法在使用过程中废除某个Token,或者更改token的权限，也就是说，一旦JWT一旦签发，在到期之前就会始终有效，除非服务器部署额外的逻辑</p><h1 id="性能优化："><a href="#性能优化：" class="headerlink" title="性能优化："></a>性能优化：</h1><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><h3 id="1-什么叫路由懒加载？"><a href="#1-什么叫路由懒加载？" class="headerlink" title="1 什么叫路由懒加载？"></a>1 什么叫路由懒加载？</h3><p>也叫延迟加载，即在需要的时候进行加载</p><h3 id="2-为什么需要路由懒加载？"><a href="#2-为什么需要路由懒加载？" class="headerlink" title="2 为什么需要路由懒加载？"></a>2 为什么需要路由懒加载？</h3><ul><li>首先，路由通常会定义很多不同的页面</li><li>这个页面在项目build打包后，一般情况下，会放在一个单独的js文件中</li><li>但是，如果很多页面都放在同一个js文件中，必然会造成这个页面非常大</li><li>如果我们一次性地从服务器中请求这个页面，可能会花费一定的时间，用户体验不好</li><li>为了避免这种情况，<strong>我们把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这就是路由懒加载</strong></li></ul><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><h4 id="Vue异步组件"><a href="#Vue异步组件" class="headerlink" title="Vue异步组件"></a>Vue异步组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/problem&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;problem&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="function"><span class="params">resolve</span>=&gt;</span><span class="built_in">require</span>([<span class="string">&#x27;../pages/problemList&#x27;</span>],resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES6中的import-—推荐使用"><a href="#ES6中的import-—推荐使用" class="headerlink" title="ES6中的import()—推荐使用"></a>ES6中的import()—推荐使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes:[&#123;</span><br><span class="line">       <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>:<span class="string">&quot;通讯录&quot;</span>,</span><br><span class="line">       <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="built_in">Promise</span>.resolve(<span class="keyword">import</span>(<span class="string">&quot;../components/contact/contact.vue&quot;</span>))</span><br><span class="line">   &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="webpack的require-ensure"><a href="#webpack的require-ensure" class="headerlink" title="webpack的require.ensure()"></a>webpack的require.ensure()</h4><p>多个路由指定相同的chunkName,会合并打包成一个js文件，require.ensure可实现按需加载资源，包括js,css，它会给里面的require文件单独打包，不会和主文件打包在一起。</p><p>第一个参数是数组，表明第二个参数里需要加载的模块，这些会提前加载，</p><p>第二个是回调函数，在这个回调函数里面requrie的文件会被单独打包成一个chunk,不会和主文件打包在一起，这样就生成两个chunk,第一次加载时只加载主文件</p><p>第三个参数是错误回调</p><p>第四个参数是单独打包的chunk的文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> HelloWorld=<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">&#x27;@/components/HelloWorld&#x27;</span>],<span class="function">()=&gt;</span>&#123;</span><br><span class="line">resolve(<span class="built_in">require</span>(<span class="string">&#x27;@/components/HelloWorld&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">Vue.use(<span class="string">&#x27;Router&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line"><span class="attr">routes</span>:[&#123;</span><br><span class="line">&#123;<span class="attr">path</span>:<span class="string">&#x27;./&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:HelloWorld</span><br><span class="line">&#125;</span><br><span class="line">&#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="element-plus按需加载：配置vue-config-js"><a href="#element-plus按需加载：配置vue-config-js" class="headerlink" title="element-plus按需加载：配置vue.config.js"></a>element-plus按需加载：配置vue.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack:&#123;</span><br><span class="line">      <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;unplugin-element-plus/webpack&#x27;</span>)(&#123;</span><br><span class="line"></span><br><span class="line">        &#125;),</span><br><span class="line">   ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="UglifyPlugin-Webpack-Plugin-插件用来缩小js文件"><a href="#UglifyPlugin-Webpack-Plugin-插件用来缩小js文件" class="headerlink" title="UglifyPlugin Webpack Plugin 插件用来缩小js文件"></a>UglifyPlugin Webpack Plugin 插件用来缩小js文件</h3><p>vue.config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">configureWebpack:&#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">&#x27;unplugin-element-plus/webpack&#x27;</span>)(&#123;</span><br><span class="line"></span><br><span class="line">      &#125;),</span><br><span class="line">        <span class="comment">//代码压缩</span></span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        <span class="attr">uglifyOptions</span>:&#123;</span><br><span class="line">          <span class="attr">compress</span>:&#123;</span><br><span class="line">            <span class="attr">drop_debugger</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">drop_console</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">pure_funcs</span>:[<span class="string">&#x27;console.log&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">sourceMap</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">parallel</span>:<span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h1 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios:"></a>封装axios:</h1><p>特征：</p><ul><li>从浏览器创建XMLHttpRequests</li><li>从node.js创建http请求</li><li>支持Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF</li></ul><p>具体：<a href="https://coloey.github.io/2022/04/11/Vue%E4%B8%AD%E5%B0%81%E8%A3%85axios%E8%AF%B7%E6%B1%82/">https://coloey.github.io/2022/04/11/Vue%E4%B8%AD%E5%B0%81%E8%A3%85axios%E8%AF%B7%E6%B1%82/</a></p><h1 id="跨域处理方法："><a href="#跨域处理方法：" class="headerlink" title="跨域处理方法："></a>跨域处理方法：</h1><h2 id="服务端配置cors"><a href="#服务端配置cors" class="headerlink" title="服务端配置cors:"></a>服务端配置cors:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cors=<span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> io=<span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)(server,&#123;</span><br><span class="line">    <span class="comment">//服务端配置cors</span></span><br><span class="line">    <span class="attr">cors</span>: &#123;</span><br><span class="line">        <span class="attr">origin</span>: <span class="string">&quot;https://coloey.github.io&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="本地配置proxy代理转发路由表："><a href="#本地配置proxy代理转发路由表：" class="headerlink" title="本地配置proxy代理转发路由表："></a>本地配置proxy代理转发路由表：</h2><p>原理：在本地运行的npm run serve 等命令实际上是用node运行了一个服务器，因此，proxyTable实际上是将请求转发给自己的服务器，再由服务器转发给后台服务器，做了一层代理，vue的proxyTable用了proxy-middleware中间件，不会出现跨域问题</p><p>如果接口里面有个公共的名字，比如security,可以拿出来做来做跨域配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//以上的ip和端口是我们本机的;下面为需要跨域的</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123; <span class="comment">//配置跨域</span></span><br><span class="line">            <span class="string">&#x27;/security&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://127.0.0.1:8000/&#x27;</span>, <span class="comment">//要代理到的api地址</span></span><br><span class="line">                <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">changOrigin</span>: <span class="literal">true</span>, <span class="comment">//允许跨域</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/security/&#x27;</span>: <span class="string">&#x27;/security&#x27;</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接口中没有公共部分，另外设置一个代理名称，用api设置代理转发，接口请求就需要带上api.HTTP请求代理中多了ws:false属性，如果不加这个属性，浏览器控制台会一直报连接不上socket的错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyObj = &#123;&#125;;</span><br><span class="line">proxyObj[<span class="string">&#x27;/ws&#x27;</span>] = &#123;</span><br><span class="line">    <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;ws://localhost:8081&quot;</span>,<span class="comment">//目标服务器</span></span><br><span class="line">&#125;;</span><br><span class="line">proxyObj[<span class="string">&#x27;/api&#x27;</span>] = &#123;</span><br><span class="line">    <span class="attr">ws</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;http://localhost:8081&quot;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;/api&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="attr">proxy</span>: proxyObj</span><br></pre></td></tr></table></figure><p><strong>这个设置只有在本地的时候是起作用的，当项目编译打包时，配置不会打包进去。</strong></p><p><strong>生产环境让后台配置cors或者nginx将前端代码拷贝到后端，在nginx.conf中配置，以Vue为例，如果是SPA应用，项目打包后是一个index.html还有几个js,css等文件，这些静态文件上传到服务器，在nginx.conf中配置静态资源访问：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(js|css|ico|png|jpg|eot|svg|ttf|woff|html|txt|pdf|) &#123;</span><br><span class="line">   root /usr/local/nginx/html/;#所有静态文件直接读取硬盘</span><br><span class="line">   expires 30d; #缓存<span class="number">30</span>天</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>即后缀为js,css,ico等文件统统不进行请求转发，直接从本地的/usr/local/nginx/html目录下读取并返回到前端（我们需要将静态资源文件上传到/usr/local/nginx/html/目录下）</p><h1 id="聊天功能实现："><a href="#聊天功能实现：" class="headerlink" title="聊天功能实现："></a>聊天功能实现：</h1><p>socket.io的主要靠emit()和on()实现实时聊天，关键在于设计对话的数据结构，对话用一个对象保存，里面包含发送者姓名，接收者姓名，信息，将对话展示在对话页面中主要靠fromUser,toUser识别，<strong>根据路由参数显示对话列表，每个用户登录将用户名作为参数通过emit触发服务端addUser，服务端用一个onLineUsers对象存储socket对象，键为用户名，值为用户socket对象，每个socket对象是唯一的，服务端on监听sendMessage事件，客户端emit触发sendMessage事件,当服务端的sendMessage事件被客户端触发后回调函数执行，触发客户端展示消息的函数</strong>，表情包发送是通过写一个emoji表情包子组件，通过和对话列表父组件进行通信，点击表情包Icon,展示一个表情包列表，点击里面任意一个表情，子组件触发emit(chooseEmoji,emoji),传递emoji信息给父组件的chooseEmoji函数，父组件就能在输入框中显示被选中的emoji</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用node中的express搭建服务器,写接口，登录方式采用jwt登录验证，用mysql存储各个人员信息,用soket.io实现聊天功能，webpack打包项目，以及动态展示功能,支持修改密码，注册用户，一对一实时聊天，发表情包,图片等功能，各个页面之间的跳转用vue-ro</summary>
      
    
    
    
    <category term="项目总结" scheme="https://coloey.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>antd初始化表单</title>
    <link href="https://coloey.github.io/2022/08/12/antd%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A1%A8%E5%8D%95/"/>
    <id>https://coloey.github.io/2022/08/12/antd%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A1%A8%E5%8D%95/</id>
    <published>2022-08-12T13:41:44.000Z</published>
    <updated>2022-08-12T13:41:44.210Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>代理数组</title>
    <link href="https://coloey.github.io/2022/08/04/%E4%BB%A3%E7%90%86%E6%95%B0%E7%BB%84/"/>
    <id>https://coloey.github.io/2022/08/04/%E4%BB%A3%E7%90%86%E6%95%B0%E7%BB%84/</id>
    <published>2022-08-04T03:38:19.000Z</published>
    <updated>2022-08-04T06:59:22.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对数组元素或者属性的读取操作："><a href="#对数组元素或者属性的读取操作：" class="headerlink" title="对数组元素或者属性的读取操作："></a>对数组元素或者属性的读取操作：</h1><p>通过索引访问数组元素值:arr[0]</p><p>访问数组的长度:arr.length</p><p>把数组作为对象，使用for…in循环遍历</p><p>使用for…of迭代遍历数组</p><p>数组的原型方法，如concat/join/every/some/find/findIndex/includes等，以及不改变原数组的原型方法</p><h2 id="1-数组索引与length"><a href="#1-数组索引与length" class="headerlink" title="1 数组索引与length"></a><strong>1 数组索引与length</strong></h2><p>通过索引设置数组元素的值时，会执行内部方法[[Set]],内部方法[[Set]]依赖于[[DefineOwnProperty]],当设置的索引值大于数组当前长度，更新数组length属性，触发与length属性相关联的副作用函数重新执行，修改set拦截函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target,key,newValue</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//如果是只读的打印警告信息</span></span><br><span class="line">            <span class="keyword">if</span>(isReadOnly)&#123;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">`属性<span class="subst">$&#123;key&#125;</span>是只读的`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取旧值</span></span><br><span class="line">            <span class="keyword">const</span> oldValue=target[key]</span><br><span class="line">            <span class="comment">//如果代理目标对象是数组，则检测被设置的索引值是否小于数组长度</span></span><br><span class="line">            <span class="comment">//如果是，则为SET操作，否则为ADD操作</span></span><br><span class="line">            <span class="keyword">const</span> type=<span class="built_in">Array</span>.isArray(target)</span><br><span class="line">                        ?<span class="built_in">Number</span>(key)&lt;length?<span class="string">&#x27;SET&#x27;</span>:<span class="string">&#x27;ADD&#x27;</span></span><br><span class="line">                        :<span class="built_in">Object</span>.prototype.hasOwnProperty.call(target,key)?<span class="string">&#x27;SET&#x27;</span>:<span class="string">&#x27;ADD&#x27;</span></span><br><span class="line">           </span><br><span class="line">            <span class="comment">//设置属性值</span></span><br><span class="line">            <span class="keyword">const</span> res=<span class="built_in">Reflect</span>.set(target,key,receiver,newValue)</span><br><span class="line">            <span class="comment">//说明receiver是target的代理对象</span></span><br><span class="line">            <span class="keyword">if</span>(target===receiver.raw)&#123;</span><br><span class="line">                <span class="comment">//比较新值和旧值，只有当它们不全等并且都不是NAN才触发响应</span></span><br><span class="line">                <span class="keyword">if</span>(oldValue!==newValue&amp;&amp;(oldValue===oldValue||newValue===newValue))&#123;</span><br><span class="line">                   <span class="comment">//假如设置数组length属性为0，会影响数组元素，因此要触发新的响应</span></span><br><span class="line">                    trigger(target,key,type,newValue)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> depsMap=bucket.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)<span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> effects=depsMap.get(key)</span><br><span class="line">    <span class="keyword">const</span> effectsToRun=<span class="keyword">new</span> <span class="built_in">Set</span>(effects)</span><br><span class="line">    <span class="comment">//当操作类型是ADD或者DELETE,需要触发与length相关的副作用函数执行</span></span><br><span class="line">    <span class="keyword">if</span>(type===<span class="string">&#x27;ADD&#x27;</span>||type===<span class="string">&#x27;DELETE&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> iterateEffects=depsMap.get(<span class="string">&#x27;length&#x27;</span>)</span><br><span class="line">        lengthEffects&amp;&amp;lengthEffects.forEach(<span class="function"><span class="params">effectfn</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(effectfn!==activeEffect)&#123;</span><br><span class="line">                effectsToRun.add(effectfn)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    effects&amp;&amp;effects.forEach(<span class="function"><span class="params">effectfn</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activeEffect!=effectfn)&#123;<span class="comment">//只有当trigger触发执行的副作用函数和当前正在执行的副作用函数不相同时才触发执行，否则会出现栈溢出</span></span><br><span class="line">            effectsToRun.add(effectfn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)   </span><br><span class="line">    effectsToRun.forEach(<span class="function"><span class="params">effectfn</span>=&gt;</span>effectfn())</span><br><span class="line">    <span class="comment">//effect&amp;&amp;effect.forEach(fn=&gt;fn())//会产生无限执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-数组查找方法"><a href="#2-数组查找方法" class="headerlink" title="2 数组查找方法"></a>2 数组查找方法</h2><p>arr.includes(arr[0])中arr是代理对象，includes函数执行时this指向的是代理对象，即arr,includes方法会通过索引读取数组元素值，如果值时可以被代理的，那么得到的值就是新的代理对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//每次调用reactive时都会创建新的代理对象</span></span><br><span class="line">    <span class="keyword">return</span> createReactive(obj)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当参数Obj是相同的不用创建新的代理对象</span></span><br><span class="line"><span class="comment">//存储原始对象到代理对象的映射</span></span><br><span class="line"><span class="keyword">const</span> reactiveMap=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//优先通过原始对象obj查找之前创建的代理对象，如果找到了，直接返回已有的代理对象</span></span><br><span class="line">    <span class="keyword">const</span> existionProxy=reactiveMap.get(obj)</span><br><span class="line">    <span class="keyword">if</span>(existionProxy)<span class="keyword">return</span> existionProxy</span><br><span class="line">    <span class="comment">//否则创建新的代理对象</span></span><br><span class="line">    proxy=createReactive(obj)</span><br><span class="line">    reactiveMap.set(obj,proxy)</span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，下面这段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> arr = reactive([obj])</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes[obj])<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>includes内部的this指向的是代理对象arr,并且在获取数组元素时得到的也是代理对象，所以用原始对象obj去查找找不到，返回false,因此我们需要重写includes方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrInstrumentations=&#123;&#125;</span><br><span class="line"><span class="comment">//重写方法</span></span><br><span class="line">[<span class="string">&#x27;includes&#x27;</span>,<span class="string">&#x27;indexOf&#x27;</span>,<span class="string">&#x27;lastIndexOf&#x27;</span>].forEach(<span class="function"><span class="params">method</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originMethod=<span class="built_in">Array</span>.prototype[method]</span><br><span class="line">    arrInstrumentations[method]=<span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//先在代理对象中查找，结果存储在res实现了arr.includes(obj)的默认方法</span></span><br><span class="line">        <span class="comment">//找不到就去原始数组上查找</span></span><br><span class="line">        <span class="keyword">const</span> res=originMethod.apply(<span class="built_in">this</span>,args)</span><br><span class="line">        <span class="comment">//找不到则在原始对象中查找</span></span><br><span class="line">        <span class="keyword">if</span>(res===<span class="literal">false</span>)&#123;</span><br><span class="line">            res=originMethod.apply(<span class="built_in">this</span>.raw,args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target,key,receiver</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//通过&quot;raw”属性访问原始对象</span></span><br><span class="line">            <span class="keyword">if</span>(key===<span class="string">&#x27;raw&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果操作对象存在于arrInstrumentations上，返回定义在arrInstrumentation上的值</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(target)&amp;&amp;arrInstrumentations.hasOwnProperty(key))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(arrInstrumentations,key,receiver)</span><br><span class="line">            &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="3-push-pop-shift-unshift等方法"><a href="#3-push-pop-shift-unshift等方法" class="headerlink" title="3 push/pop/shift/unshift等方法"></a>3 push/pop/shift/unshift等方法</h2><p>当调用数组的push方法时，即会读取数组length属性值也会设置数组length属性值，会导致两个独立的副作用函数相互影响，就像</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=reactive([])</span><br><span class="line">effect=(<span class="function">()=&gt;</span>&#123;arr.push(<span class="number">1</span>)&#125;)</span><br><span class="line">effect=(<span class="function">()=&gt;</span>&#123;arr.push(<span class="number">1</span>)&#125;)</span><br></pre></td></tr></table></figure><p>会得到栈溢出的错误</p><p>分析：</p><ul><li>第一个副作用函数执行，在该函数内，调用arr.push方法向数组中添加一个元素，调用数组push方法时会间接读取数组的length属性，所以第一个副作用函数执行完毕会与length属性建立响应联系</li><li>第二个副作用函数执行，同样，与length属性建立响应联系，同时调用arr.push会设置length属性，于是响应式系统尝试把与length有关的副作用函数全部取出执行，就包括第一个副作用函数，此时，第二个副作用函数还未执行完毕就去调用第一个副作用函数</li><li>第一个副作用函数再次执行，也会间接设置数组的length属性，于是响应系统又尝试把所以与length属性相关联娿副作用取出执行，其中包括第二个副作用函数</li><li>循环往复导致栈溢出</li></ul><p>因此，我们可以通过屏蔽对length属性的读取，避免在它与副作用函数之间建立联系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个标记变量，代表是否追踪</span></span><br><span class="line"><span class="keyword">let</span> shouldTrack = <span class="literal">true</span></span><br><span class="line">[<span class="string">&#x27;push&#x27;</span>].forEach(<span class="function"><span class="params">method</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//取得原始push方法</span></span><br><span class="line">    <span class="keyword">const</span> originMethod = <span class="built_in">Array</span>.prototype[method]</span><br><span class="line">    <span class="comment">//重写</span></span><br><span class="line">    arrInstrumentations[method] = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//在调用方法前禁止追踪</span></span><br><span class="line">        shouldTrack=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> res = originMethod.apply(<span class="built_in">this</span>,args)</span><br><span class="line">        <span class="comment">//调用原始方法后，恢复原来行为，即允许追踪</span></span><br><span class="line">        shouldTrack=<span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在执行默认行为之前先将shouldTrack置false,禁止追踪，当push方法默认行为执行完毕后，将shouldTrack还原为true,</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//禁止追踪时直接返回</span></span><br><span class="line">    <span class="keyword">if</span>(!activeEffect || !shouldTrack)<span class="keyword">return</span> </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当push方法间接读取length属性，由于此时是禁止追踪状态，所以length属性与副作用函数之间不会建立响应联系，也就不会产生栈溢出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对数组元素或者属性的读取操作：&quot;&gt;&lt;a href=&quot;#对数组元素或者属性的读取操作：&quot; class=&quot;headerlink&quot; title=&quot;对数组元素或者属性的读取操作：&quot;&gt;&lt;/a&gt;对数组元素或者属性的读取操作：&lt;/h1&gt;&lt;p&gt;通过索引访问数组元素值:arr[0]</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>代理object</title>
    <link href="https://coloey.github.io/2022/07/31/%E4%BB%A3%E7%90%86object/"/>
    <id>https://coloey.github.io/2022/07/31/%E4%BB%A3%E7%90%86object/</id>
    <published>2022-07-31T07:01:57.000Z</published>
    <updated>2022-08-04T03:43:09.790Z</updated>
    
    <content type="html"><![CDATA[<p>对一个普通对象所有可能的读取操作：</p><ul><li>访问属性：obj.foo</li><li>判断对象原型上是否存在给定属性key in obj</li><li>使用for…in循环遍历对象:for(const key in obj){}</li></ul><p>1、对于属性的读取直接用<strong>get拦截函数</strong></p><p>2、对于in 操作符，用<strong>has</strong>拦截函数代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;<span class="attr">foo</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> p= <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">    <span class="function"><span class="title">has</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        track(target,key)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.has(target,key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、对于for…in的拦截，<strong>使用Reflect.ownKeys()</strong></p><p>用ownKeys来获取一个对象中的所有属于自己的键值时，这个操作明显不与任何键绑定，因此我们只能够构造唯一的key作为标识（用Symbol构造），即ITERATE_KEY</p><blockquote><p>export const ITERATE_KEY = Symbol(<strong>DEV</strong> ? ‘iterate’ : ‘’)</p></blockquote><p>修改属性不会对for循环产生影响，因为无论怎么修改一个值，对于for…in循环来说都只会循环一次，如果是添加属性或者删除属性，就会触发副作用函数重新执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> depsMap=bucket.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)<span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> effects=depsMap.get(key)</span><br><span class="line">    <span class="keyword">const</span> effectsToRun=<span class="keyword">new</span> <span class="built_in">Set</span>(effects)</span><br><span class="line">    <span class="comment">//当操作类型是ADD或者DELETE,需要触发与ITERATE_KEY相关的副作用函数执行</span></span><br><span class="line">    <span class="keyword">if</span>(type===<span class="string">&#x27;ADD&#x27;</span>||type===<span class="string">&#x27;DELETE&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> iterateEffects=depsMap.get(ITERATE_KEY)</span><br><span class="line">        iterateEffects&amp;&amp;iterateEffects.forEach(<span class="function"><span class="params">effectfn</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(effectfn!==activeEffect)&#123;</span><br><span class="line">                effectsToRun.add(effectfn)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    effects&amp;&amp;effects.forEach(<span class="function"><span class="params">effectfn</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activeEffect!=effectfn)&#123;<span class="comment">//只有当trigger触发执行的副作用函数和当前正在执行的副作用函数不相同时才触发执行，否则会出现栈溢出</span></span><br><span class="line">            effectsToRun.add(effectfn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)   </span><br><span class="line">    effectsToRun.forEach(<span class="function"><span class="params">effectfn</span>=&gt;</span>effectfn())</span><br><span class="line">    <span class="comment">//effect&amp;&amp;effect.forEach(fn=&gt;fn())//会产生无限执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何屏蔽由原型引起的更新：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> proto=&#123;<span class="attr">bar</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">const</span> child=reactive(obj)</span><br><span class="line"><span class="keyword">const</span> parent=reactive(proto)</span><br><span class="line"><span class="comment">//使用parent作为child的原型</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(child,parent)</span><br><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(child.bar)<span class="comment">//1</span></span><br><span class="line">&#125;)</span><br><span class="line">child.bar=<span class="number">2</span><span class="comment">//会导致副作用重新执行两次</span></span><br></pre></td></tr></table></figure><p>根据规范10.1.9.2:</p><p>如果ownDesc是undefined,那么：</p><p>a.让parent的值为O.[[GetPrototypeOf]] ()</p><p>b.如果parent不是null,则</p><p>​    返回？parent.[[Set]] (P,V,Receiver)</p><p>c.将ownDesc设置为{[[Value]]:undefined,[[Writable]]:true,[[Enumerable]]:true,[[Configurable]]:true}</p><p>如果设置的属性不在对象上，那么就会取得原型，并调用其原型上的方法，也就是parent[[Set]]内部方法，由于parent是代理对象，所以相当于执行了它的set拦截函数，因此读取child.bar时，副作用函数被child.bar收集，还被parent.bar收集</p><p><strong>需要屏蔽一次，而parent代理对象的set函数执行时，此时target是原始对象proto，receiver是代理对象child,不再是target的代理对象，由于最初设置child.bar，receiver一直都是child,target是变化的</strong></p><p>只有当<strong>receiver是target的代理对象时才触发更新，</strong>就能屏蔽由原型引起的更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">target,key,receiver</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//通过&quot;raw”属性访问原始对象</span></span><br><span class="line">            <span class="keyword">if</span>(key===<span class="string">&#x27;raw&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target</span><br><span class="line">            &#125;</span><br><span class="line">            track(target,key)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key,receiver)</span><br><span class="line">    </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">target,key,newValue</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//获取旧值</span></span><br><span class="line">            <span class="keyword">const</span> oldValue=target[key]</span><br><span class="line">            <span class="keyword">const</span> type=<span class="built_in">Object</span>.prototype.hasOwnProperty.call(target,key)?<span class="string">&#x27;SET&#x27;</span>:<span class="string">&#x27;ADD&#x27;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//设置属性值</span></span><br><span class="line">            <span class="keyword">const</span> res=<span class="built_in">Reflect</span>.set(target,key,receiver,newValue)</span><br><span class="line">            <span class="comment">//说明receiver是target的代理对象</span></span><br><span class="line">            <span class="keyword">if</span>(target===receiver.raw)&#123;</span><br><span class="line">                <span class="comment">//比较新值和旧值，只有当它们不全等并且都不是NAN才触发响应</span></span><br><span class="line">                <span class="keyword">if</span>(oldValue!==newValue&amp;&amp;(oldValue===oldValue||newValue===newValue))&#123;</span><br><span class="line">                    trigger(target,key)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对一个普通对象所有可能的读取操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问属性：obj.foo&lt;/li&gt;
&lt;li&gt;判断对象原型上是否存在给定属性key in obj&lt;/li&gt;
&lt;li&gt;使用for…in循环遍历对象:for(const key in obj){}&lt;/li&gt;
&lt;/ul&gt;</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>理解vue3中Proxy和Reflect</title>
    <link href="https://coloey.github.io/2022/07/31/%E7%90%86%E8%A7%A3vue3%E4%B8%ADProxy%E5%92%8CReflect/"/>
    <id>https://coloey.github.io/2022/07/31/%E7%90%86%E8%A7%A3vue3%E4%B8%ADProxy%E5%92%8CReflect/</id>
    <published>2022-07-31T02:42:33.000Z</published>
    <updated>2022-07-31T07:00:40.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解Proxy："><a href="#理解Proxy：" class="headerlink" title="理解Proxy："></a>理解Proxy：</h1><p>1、使用Proxy可以代理一个对象，它能够实现对其他对象的代理，代理指的是对一个对象的<strong>基本语义的代理</strong></p><p>基本语义：可以对一个对象进行读取，设置属性值的操作。</p><p>2、根据ECMAScript规范，在JavaScript中有两种对象，一种是<strong>常规对象</strong>，一种是<strong>异质对象</strong>，这两种对象包含了JavaScript世界中所有对象。</p><p>在JavaScript中，<strong>对象的实际语义是由对象的内部方法指定的</strong>，内部方法指的是对一个对象进行操作时在引擎内部调用的方法，这些方法对于js使用者来说是不可见的，比如[[Get]],[[Set]],[[GetPrototyeOf]],[[SetPrototypeOf]]等方法，</p><p>3、区分普通对象和函数：函数会部署内部方法[[Call]]，而普通对象不会</p><p>4、常规对象需满足：</p><p>对于内部[[Get]],<a href="%E8%AF%A6%E8%A7%81Vue%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0p90">[Set]</a>,必须使用ECMA规范10.1.x节给出的定义实现</p><p>对于内部方法[[Call]],必须使用ECMA规范10.2.1节给出的定义实现</p><p>对于内部方法[[Construct]]，必须使用ECMA规范10.2.2节给出的定义实现</p><p>而<strong>Proxy对象的内部方法[[Get]]没有使用ECMA规范10.1.8给出的定义实现，所以Proxy是一个异质对象</strong>，因此<strong>代理对象与普通对象的区别是[[Get]]的实现，代理对象会在没有指定对应拦截函数，例如没有指定get函数，当我们通过代理随性访问属性值时，代理对象内部方法[[Get]]会调用原始对象内部方法[[Get]]来获取属性值，这其实就是代理透明性质</strong></p><h1 id="使用Reflect"><a href="#使用Reflect" class="headerlink" title="使用Reflect:"></a>使用Reflect:</h1><p><code>Reflect</code>对象的设计目的有这样几个。</p><p>（1） 将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。</p><p>（2） 修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code>。</p><p>(3） 让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。</p><p>(4）<code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</p><h1 id="在响应式中使用Reflect的原因："><a href="#在响应式中使用Reflect的原因：" class="headerlink" title="在响应式中使用Reflect的原因："></a>在响应式中使用Reflect的原因：</h1><p>假如没有使用Reflect</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">bar</span>()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.foo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p= <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        track(target,key)</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">targte,key,newVal,receiver</span>)</span>&#123;</span><br><span class="line">        target[key]=newVal;</span><br><span class="line">        trigger(target,key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当在effect函数中通过代理对象p访问bar属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">effect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p.bar)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当effect注册的副作用函数执行时，会读取p.bar属性，它发现p.bar是一个访问器属性，因此执行getter函数，由于在getter函数中通过this.foo读取了foo的属性值，因此我们认为副作用函数与属性foo之间会建立联系，当我们修改p.foo的值时却没有使得副作用函数重新执行</p><p>原因在于this.foo中的this指向的是target,在代理对象中get函数返回的target[key]相当于obj.bar，<strong>在副作用函数中通过原始对象访问它的某个属性不会触发响应</strong>，使用Reflect;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p= <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        track(target,key)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">targte,key,newVal,receiver</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">Reflect</span>.set(target,key,newVal,receiver)</span><br><span class="line">        trigger(target,key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>receiver代表谁在读取属性，这里就是代理对象p,<strong>访问器属性bar的getter函数内this指向代理对象p</strong>,<strong>这会在副作用函数与响应式数据之间建立响应联系，创建代理对象时指定的拦截函数，实际上是用来自定义代理对象本身的内部方法和行为的，不是用来指定被代理对象的内部方法和行为</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理解Proxy：&quot;&gt;&lt;a href=&quot;#理解Proxy：&quot; class=&quot;headerlink&quot; title=&quot;理解Proxy：&quot;&gt;&lt;/a&gt;理解Proxy：&lt;/h1&gt;&lt;p&gt;1、使用Proxy可以代理一个对象，它能够实现对其他对象的代理，代理指的是对一个对象的&lt;st</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>非Prop的attribute</title>
    <link href="https://coloey.github.io/2022/07/29/%E9%9D%9EProp%E7%9A%84attribute/"/>
    <id>https://coloey.github.io/2022/07/29/%E9%9D%9EProp%E7%9A%84attribute/</id>
    <published>2022-07-29T03:11:27.000Z</published>
    <updated>2022-07-29T03:26:42.216Z</updated>
    
    <content type="html"><![CDATA[<p>一个非prop的attribute是指传向一个组件，但是该组件并没有相应props或emits定义的attribute,常见的包括class,style,id attribute，可以通过$attrs property访问那些attribute</p><h1 id="Attribute继承"><a href="#Attribute继承" class="headerlink" title="Attribute继承"></a>Attribute继承</h1><p>当组件返回单个根结点，非prop的attribute将自动添加到根结点的attribute中，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;date-picker&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;data-picker&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;datetime-local&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//具有非prop的attribute的date-picker组件</span><br><span class="line"><span class="tag">&lt;<span class="name">date-picker</span> <span class="attr">data-status</span>=<span class="string">&quot;activated&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">date-picker</span>&gt;</span></span><br><span class="line">//渲染后的date-picker组件</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;data-picker&quot;</span> <span class="attr">data-status</span>=<span class="string">&quot;activated&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span>/&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同理，事件监听器也会从父组件传递到子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">date-picker</span> @<span class="attr">change</span>=<span class="string">&quot;submitChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;date-picker&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;select&gt;</span></span><br><span class="line"><span class="string">      &lt;option value=&quot;1&quot;&gt;Yesterday&lt;/option&gt;</span></span><br><span class="line"><span class="string">      &lt;option value=&quot;2&quot;&gt;Today&lt;/option&gt;</span></span><br><span class="line"><span class="string">      &lt;option value=&quot;3&quot;&gt;Tomorrow&lt;/option&gt;</span></span><br><span class="line"><span class="string">    &lt;/select&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>change事件在原生<select>的change事件上触发，我们不需要显示地从date-picker发出事件</select></p><h1 id="禁用Attribute继承"><a href="#禁用Attribute继承" class="headerlink" title="禁用Attribute继承"></a>禁用Attribute继承</h1><p>如果不希望组件的根元素继承attribute,可以在组件的选项设置inheritAttrs:false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.component(<span class="string">&#x27;date-picker&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">inheritAttrs</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;date-picker&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;datetime-local&quot; v-bind=&quot;$attrs&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>data-status attribute将用于Input元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- date-picker 组件使用非 prop 的 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">date-picker</span> <span class="attr">data-status</span>=<span class="string">&quot;activated&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">date-picker</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染后的 date-picker 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;date-picker&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">data-status</span>=<span class="string">&quot;activated&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="多个根结点的Attribute继承"><a href="#多个根结点的Attribute继承" class="headerlink" title="多个根结点的Attribute继承"></a>多个根结点的Attribute继承</h1><p>具有多个根结点的组件不具有自动attribute贯穿的行为，如果没有显示绑定$attrs，将发出运行时警告</p><p>参考vue官网：<a href="https://v3.cn.vuejs.org/guide/component-attrs.html">https://v3.cn.vuejs.org/guide/component-attrs.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一个非prop的attribute是指传向一个组件，但是该组件并没有相应props或emits定义的attribute,常见的包括class,style,id attribute，可以通过$attrs property访问那些attribute&lt;/p&gt;
&lt;h1 id=&quot;At</summary>
      
    
    
    
    <category term="Vue3" scheme="https://coloey.github.io/categories/Vue3/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟DOM</title>
    <link href="https://coloey.github.io/2022/07/28/%E8%99%9A%E6%8B%9FDOM/"/>
    <id>https://coloey.github.io/2022/07/28/%E8%99%9A%E6%8B%9FDOM/</id>
    <published>2022-07-28T14:07:37.000Z</published>
    <updated>2022-07-28T14:51:59.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令式框架与声明式框架："><a href="#命令式框架与声明式框架：" class="headerlink" title="命令式框架与声明式框架："></a>命令式框架与声明式框架：</h1><p>命令式框架：关注过程(Jquery)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"> .text(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"> .on(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>alert(<span class="string">&#x27;ok&#x27;</span>))</span><br></pre></td></tr></table></figure><p>声明式框架：关注结果(Vue.js)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=<span class="string">&#x27;()=&gt;alert(&#x27;</span>ok<span class="string">&#x27;)&#x27;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：声明式代码的性能不优于命令式代码的性能</p><p><strong>声明式代码的更新性能消耗=找出差异的性能消耗+直接修改的性能消耗</strong></p><h1 id="Vue3中虚拟DOM的性能："><a href="#Vue3中虚拟DOM的性能：" class="headerlink" title="Vue3中虚拟DOM的性能："></a>Vue3中虚拟DOM的性能：</h1><p>创建JavaScript对象的计算量+创建真实DOM的计算量</p><h2 id="比较："><a href="#比较：" class="headerlink" title="比较："></a>比较：</h2><p>纯JavaScript:Js运算+DOM运算（性能因素）</p><p>虚拟DOM：创建Js对象（Vnode)+Diff+必要的DOM更新（与数据量变化有关）</p><p>innerHTML:渲染HTML字符串+销毁所有旧DOM，新建所有新DOM（与模板大小有关）</p><h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><p><strong>性能</strong>：</p><p>innerHTML&lt;虚拟DOM&lt;原始JavaScript</p><p><strong>心智负担</strong>：</p><p>虚拟DOM&lt;innerHTML&lt;原生JavaScript</p><p><strong>可维护性</strong>：</p><p>虚拟DOM&gt;innerHTML和原生JS</p><h1 id="框架的设计可以有三种选择："><a href="#框架的设计可以有三种选择：" class="headerlink" title="框架的设计可以有三种选择："></a>框架的设计可以有三种选择：</h1><ul><li>纯运行时</li><li>运行时+编译时（Vue3)</li><li>纯编译时</li></ul><h2 id="1-纯运行时"><a href="#1-纯运行时" class="headerlink" title="1.纯运行时"></a>1.纯运行时</h2><p>一个树型结构的数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj=&#123;</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;<span class="attr">tag</span>:<span class="string">&#x27;span&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tag:标签名，children:子节点</p><p>render:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Render</span>(<span class="params">obj,root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="built_in">document</span>.createElement(obj.tag)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> children ===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> text=<span class="built_in">document</span>.createTextNode(obj,children)</span><br><span class="line">        el.appendChild(text)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.children)&#123;</span><br><span class="line">        obj.children.forEach(<span class="function">(<span class="params">child</span>)=&gt;</span>Render(child,el))</span><br><span class="line">    &#125;</span><br><span class="line">    root.appendChild(el) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Render(obj,<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><h2 id="2-运行时-编译时"><a href="#2-运行时-编译时" class="headerlink" title="2.运行时+编译时"></a>2.运行时+编译时</h2><p>编写一个Compiler函数，把HTML标签编译成树型结构的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html=<span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;Hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br><span class="line"><span class="keyword">const</span> obj=Compiler(html)</span><br><span class="line">Render(obj,<span class="built_in">document</span>.body)</span><br></pre></td></tr></table></figure><h2 id="3-纯编译式：-Svelte"><a href="#3-纯编译式：-Svelte" class="headerlink" title="3.纯编译式：(Svelte)"></a>3.纯编译式：(Svelte)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&lt;/div&gt;</span><br><span class="line"> <span class="comment">//就是</span></span><br><span class="line"><span class="keyword">const</span> div=<span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> span=<span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> text=<span class="built_in">document</span>.createElement(<span class="string">&#x27;hello wrold&#x27;</span>)</span><br><span class="line">span.appendChild(text)</span><br><span class="line">div.appendChild(span)</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(div)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令式框架与声明式框架：&quot;&gt;&lt;a href=&quot;#命令式框架与声明式框架：&quot; class=&quot;headerlink&quot; title=&quot;命令式框架与声明式框架：&quot;&gt;&lt;/a&gt;命令式框架与声明式框架：&lt;/h1&gt;&lt;p&gt;命令式框架：关注过程(Jquery)&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="Vue3设计与实现" scheme="https://coloey.github.io/categories/Vue3%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>生命周期</title>
    <link href="https://coloey.github.io/2022/07/27/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://coloey.github.io/2022/07/27/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2022-07-27T10:00:55.000Z</published>
    <updated>2022-07-27T14:55:32.769Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/07/27/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/smzq.jpg" alt="image-20220727225427188"></p><p>生命周期执行顺序：</p><p>创建时：</p><ul><li><p>constructor()</p></li><li><p>static getDerivedStateFromProps()</p></li><li><p>render()</p><p>是class组件中唯一必须实现的方法，用于渲染dom,render()方法必须返回reactDOM</p><p>不要在render里面setState,否则会触发死循环导致内存崩溃</p></li><li><p>componentDidMount()</p><p><strong>在组件挂载后立即调用，componentDidMount()是发送网络请求，启用事件监听方法的好时机，并且可以在此钩子函数里直接调用setState()</strong></p></li></ul><p>更新时：</p><ul><li><p>static getDerivedStateFromProps()</p></li><li><p>shouldComponentUpdate()</p><p>在组件更新之前调用，可以控制组件是否进行更新，返回true组件更新，返回false则不更新</p><p>shouldComponentUpdate(nextProps,nextState),第一个是即将更新的props值，第二个是即将更新后的state值，可以根据更新前后的props或state来比较加一些限制条件，决定是否更新，进行性能优化，不要 <code>shouldComponentUpdate</code> 中调用 setState()，否则会导致无限循环调用更新、渲染，直至浏览器内存崩溃</p></li><li><p>render()</p></li><li><p>getSnapshotBeforeUpdate()</p></li><li><p>componentDidUpdate()</p><p>会在更新后被立即调用，首次渲染不会执行。包含三个参数，第一个是上一次props值，第二个是上一次state值，如果组件实现了getSnapshotBeforeUpdate()生命周期，第三个snapshot参数传递</p></li></ul><p>卸载时：</p><ul><li>componentWillUnmount()</li></ul><p>在组件即将被卸载或销毁时进行调用，是取消网络请求，移除监听事件，清理DOM元素，清理定时器等操作的好时机</p><p>新生命周期钩子：</p><p>1.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> getDerivedStateFromProps(props,state)</span><br></pre></td></tr></table></figure><p><code>getDerivedStateFromProps</code> 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 <code>null</code> 则不更新任何内容。</p><p>此方法适用于<a href="https://zh-hans.reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state">罕见的用例</a>，即 state 的值在任何时候都取决于 props。</p><p>2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSnapshotBeforeUpdate(prevProps,prevState)</span><br></pre></td></tr></table></figure><p>getSnapshotBeforeUpdate()在最近一次渲染输出（提交到DOM结点）之前调用，它使得组件能在发生更改之前从DOM中捕获一些信息，此生命周期方法的任何值返回值将作为参数传递给componentDidUpdate()</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.listRef=React.createRef();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getSnapshotBeforeUpdate</span>(<span class="params">prevProps,prevState</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prevProps.list.length&lt;<span class="built_in">this</span>.props.list.length)&#123;</span><br><span class="line">            <span class="keyword">const</span> list = <span class="built_in">this</span>.listRef.current;</span><br><span class="line">            <span class="keyword">return</span> list.scrollHeight-list.scrollTop</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps,prevState,snapshot</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(snapshot!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> list=<span class="built_in">this</span>.listRef.current;</span><br><span class="line">            list.scrollTop=list.scrollHeight-snapshot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.listRef&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/07/27/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/smzq.jpg&quot; alt=&quot;image-20220727225427188&quot;&gt;&lt;/p&gt;
&lt;p&gt;生命周期执行顺序：&lt;/p&gt;
&lt;p&gt;创建时：&lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>Context</title>
    <link href="https://coloey.github.io/2022/07/27/Context/"/>
    <id>https://coloey.github.io/2022/07/27/Context/</id>
    <published>2022-07-27T03:02:34.000Z</published>
    <updated>2022-07-27T07:54:21.602Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h1><p>一种组件间通信方式，用于祖组件和后代组件之间的通信</p><p>1.使用Context</p><p>2.创建Context容器对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xxxContext = React.createContext(defaultValue)</span><br></pre></td></tr></table></figure><p>3.渲染子组件，外面包裹xxxContext.Provider,通过value属性给后代组件传递数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxxContext.Provider value=&#123;数据&#125;&gt;</span><br><span class="line">&lt;/xxxContext.Provider&gt;</span><br></pre></td></tr></table></figure><p>4.后代组件读取数据<br>第一种适用于类组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> contextType = xxxContext;<span class="comment">//声明接收context</span></span><br><span class="line"><span class="built_in">this</span>.context<span class="comment">//context是一个对象，读取context中value的值</span></span><br></pre></td></tr></table></figure><p>第二种函数组件和类组件都可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxxContext.Consumer&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="function"><span class="params">value</span>=&gt;</span>(<span class="comment">//value是context中的value数据</span></span><br><span class="line">    要显示的内容</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/xxxContext.Consumer&gt;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(props)</span><br><span class="line">        <span class="built_in">this</span>.state=&#123;<span class="attr">value</span>:<span class="string">&quot;red&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;this.state&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">B</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">C</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;(&#123;value&#125;)=&gt;(</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>context一般用于封装react插件</p><h1 id="使用useContext"><a href="#使用useContext" class="headerlink" title="使用useContext"></a>使用useContext</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = useContext(MyContext)</span><br></pre></td></tr></table></figure><p>接收一个<strong>context对象</strong>（React.createContext的返回值）并返回该context的当前值，当前的context值由上层㢟中距离当前组件最近的&lt;MyContext.Provider&gt;的value prop角色</p><p>当组件上层最近的&lt;MyContext.Provider&gt;更新时，该Hook会触发重渲染，使用最新传递给MyContext provider的context value值。</p><p><strong>useContext(MyContext)相当于static contextType=MyContext或者&lt;MyContext.Consumer&gt;</strong></p><p><code>useContext(MyContext)</code> 只是让你能够<em>读取</em> context 的值以及订阅 context 的变化。你仍然需要在上层组件树中使用 <code>&lt;MyContext.Provider&gt;</code> 来为下层组件<em>提供</em> context。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理解：&quot;&gt;&lt;a href=&quot;#理解：&quot; class=&quot;headerlink&quot; title=&quot;理解：&quot;&gt;&lt;/a&gt;理解：&lt;/h1&gt;&lt;p&gt;一种组件间通信方式，用于祖组件和后代组件之间的通信&lt;/p&gt;
&lt;p&gt;1.使用Context&lt;/p&gt;
&lt;p&gt;2.创建Context容器对</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="https://coloey.github.io/2022/07/26/redux/"/>
    <id>https://coloey.github.io/2022/07/26/redux/</id>
    <published>2022-07-26T15:48:24.000Z</published>
    <updated>2022-07-26T16:30:29.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h1><p>Redux 是一个使用”actions”的事件管理和更新应用状态的模式和工具库,以集中式Store的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以<strong>可预测</strong>的方式更新</p><p>Redux 在以下情况下更有用：</p><ul><li>在应用的大量地方，都存在大量的状态</li><li>应用状态会随着时间的推移而频繁更新</li><li>更新该状态的逻辑可能很复杂</li><li>中型和大型代码量的应用，很多人协同开发</li></ul><h1 id="store"><a href="#store" class="headerlink" title="store:"></a>store:</h1><p>保存应用程序的全局state的容器，是一个Js对象，store是通过传入一个reducer来创建的，并且有一个名为getState的方法，它返回当前状态值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;configureStore&#125; <span class="keyword">from</span> <span class="string">&quot;@reduxjs/toolkit&quot;</span></span><br><span class="line"><span class="keyword">const</span> store=configureStore(&#123;<span class="attr">reducer</span>:counterReducer&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(store.getState())</span><br><span class="line"><span class="comment">//&#123;value:0&#125;</span></span><br></pre></td></tr></table></figure><h1 id="action"><a href="#action" class="headerlink" title="action:"></a>action:</h1><p>是一个具有type字段的普通js对象，可以将action视为描述应用程序中发生了什么事件，type字段是一个字符串，给这个action一个描述性的名字，比如”todos/todoAdded”(域/事件名称)，第一部分是这个action所属的特征和类别，第二部分是具体发生的具体事情</p><p>action对象可以有其他字段，将其放在名为payload的字段中</p><p><strong>action创建函数</strong>：就是生成action的方法，action创建函数只是简单返回一个action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reducers"><a href="#reducers" class="headerlink" title="reducers"></a>reducers</h1><p>reducer是一个函数，接收当前的state和一个action对象，必要时决定如何更新状态，并返回新状态，函数签名(state,action)=&gt;newState,可以将reducer视为一个事件监听器，它根据接收到的action类型处理事件</p><p>reducer必须是一个纯函数：</p><ul><li>仅使用 <code>state</code> 和 <code>action</code> 参数计算新的状态值</li><li>禁止直接修改 <code>state</code>。必须通过复制现有的 <code>state</code> 并对复制的值进行更改的方式来做 <em>不可变更新（immutable updates）</em>。</li><li>禁止任何异步逻辑、依赖随机值或导致其他“副作用”的代码</li></ul><p>reducer 函数内部的逻辑通常遵循以下步骤：</p><ul><li>检查 reducer 是否关心这个 action<ul><li>如果是，则复制 state，使用新值更新 state 副本，然后返回新 state</li></ul></li><li>否则，返回原来的 state 不变</li></ul><h1 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h1><p>更新state的唯一方法是调用store.dispatch()并传入一个action对象，store将执行所有reducer函数并计算出更新后的state,调用getState()可以获取更新的state</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;counter/increamented&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(store.getStore())</span><br><span class="line"><span class="comment">//&#123;value:1&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Selectors"><a href="#Selectors" class="headerlink" title="Selectors:"></a>Selectors:</h1><p>Selector函数可以从store状态树中提取指定的片段，随着应用变大，遇到不同应用程序的不同部分需要读取相同数据，selector可以避免重复这样的状态逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectCounterValue=<span class="function"><span class="params">state</span>=&gt;</span>state.value</span><br><span class="line"><span class="keyword">const</span> currentValue = selectCounterValue(store.getState())</span><br><span class="line"><span class="built_in">console</span>.log(currentValue)</span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure><h1 id="核心概念："><a href="#核心概念：" class="headerlink" title="核心概念："></a>核心概念：</h1><p><strong>单一数据源</strong>：应用程序的<strong>全局状态</strong>作为对象存储在单个 <strong>store</strong> 中。任何给定的数据片段都应仅存在于一个位置，而不是在许多位置重复。</p><p><strong>state只读</strong>：</p><p>更改状态的唯一方法是 dispatch 一个 <strong>action</strong>，这是一个描述所发生情况的对象。</p><p>这样，UI 就不会意外覆盖数据，并且更容易跟踪发生状态更新的原因。由于 actions 是普通的 JS 对象，因此可以记录、序列化、存储这些操作，并在以后重放这些操作以进行调试或测试。</p><p><strong>使用reducer纯函数进行更改：</strong></p><p>Reducers 是纯函数，它们采用旧 state 和 action，并返回新 state。</p><h1 id="redux数据流："><a href="#redux数据流：" class="headerlink" title="redux数据流："></a>redux数据流：</h1><p><strong>单向数据流：</strong></p><p>root reducer函数创建Redux store=&gt;store调用一次root reducer,并将返回值保存为它的初始state=&gt;UI首次渲染时，UI组件访问Redux store的当前state,并将数据渲染为内容，监听store的更新：</p><p>应用更新=&gt;dispatch一个action到Redux store=&gt;store用之前的state和当前的action再次运行reducer函数，并将返回值保存为新的state=&gt;store通知所有订阅过的UI,通知store更新=&gt;每个订阅过store数据的UI组件就会检查它们需要的state部分是否被更新=&gt;发现更新，每个组件强制使用新数据渲染，更新网页</p><h1 id="明确两个概念："><a href="#明确两个概念：" class="headerlink" title="明确两个概念："></a>明确两个概念：</h1><p><strong>UI组件：</strong>不能使用任何redux的api,只负责页面的呈现，交互</p><p><strong>容器组件</strong>：负责和redux通信，将结果交给UI组件</p><ul><li><strong>创建一个容器组件</strong>：靠react-redux的connect函数，connect(mapStateToProps,mapDispatchToProps)(UI组件)</li><li>mapStateToProps:映射状态：返回值时一个对象</li><li>mapDispatchToProps:映射操作状态的方法，返回值是一个对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; toggleTodo &#125; <span class="keyword">from</span> <span class="string">&#x27;../actions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">&#x27;../components/TodoList&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getVisibleTodos = <span class="function">(<span class="params">todos, filter</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (filter) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SHOW_COMPLETED&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SHOW_ACTIVE&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;SHOW_ALL&#x27;</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> todos</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">todos</span>: getVisibleTodos(state.todos, state.visibilityFilter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">onTodoClick</span>: <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">      dispatch(toggleTodo(id))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(TodoList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VisibleTodoList</span><br></pre></td></tr></table></figure><ul><li>容器组件中的store是靠props传进去，而不是在容器组件中直接引入</li></ul><h1 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h1><ul><li>容器组件和UI组件整合为一个文件</li><li>不用给容器组件传递store,给<APP>包裹一个<Provider store="{store}">即可</Provider></APP></li><li>使用react-redux后不用自己检测redux状态的变化，容器组件自己完成这个工作</li><li>mapDispatchToProps写成一个对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">onTodoClick</span>:toggleTodo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结：一个组件与redux打交道步骤："><a href="#总结：一个组件与redux打交道步骤：" class="headerlink" title="总结：一个组件与redux打交道步骤："></a>总结：一个组件与redux打交道步骤：</h1><ul><li>定义UI组件不暴露</li><li>引入connect生成一个容器组件：connect(state=&gt;{key:value}),{key:xxxAction})(UI组件)</li><li>在UI组件中通过this.props.xxx读取和操作状态</li></ul><p>todoList例子：</p><p><a href="https://www.redux.org.cn/docs/basics/ExampleTodoList.html">https://www.redux.org.cn/docs/basics/ExampleTodoList.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h1&gt;&lt;p&gt;Redux 是一个使用”actions”的事件管理和更新应用状态的模式和工具库,以集中式Store的方式对整个应用中使用的状态进行集</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>实用程序类型</title>
    <link href="https://coloey.github.io/2022/07/25/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>https://coloey.github.io/2022/07/25/%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-07-25T07:39:45.000Z</published>
    <updated>2022-07-25T08:08:01.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial<Type></Type></h1><p>构造一个所有属性的Type都设置为可选的类型，返回一个表示给定类型的所有子集的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">    <span class="attr">title</span>:<span class="built_in">string</span>;</span><br><span class="line">    description:stirng;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateTodo</span>(<span class="params">todo:Todo,fieldsToUpdate:Partial&lt;Todo&gt;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...todo,...fieldsToUpdate&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> todo1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;organize desk&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;clear clutter&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo2 = updateTodo(todo1, &#123;</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;throw out trash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required<Type></Type></h1><p>构造一个由所有属性类型都是required的类型，与Partial相反</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props &#123;</span><br><span class="line">  a?: <span class="built_in">number</span>;</span><br><span class="line">  b?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj: Props = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> obj2: Required&lt;Props&gt; = &#123; <span class="attr">a</span>: <span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">//Property &#x27;b&#x27; is missing in type &#x27;&#123; a: number; &#125;&#x27; but required in type &#x27;Required&lt;Props&gt;&#x27;.</span></span><br></pre></td></tr></table></figure><h1 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly<Type></Type></h1><p>构造一个所有属性的Type都设置为readonly的类型，这意味着构造类型的属性不能重新分配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo: Readonly&lt;Todo&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todo.title = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="comment">//Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><h1 id="Record-lt-Keys-Type-gt"><a href="#Record-lt-Keys-Type-gt" class="headerlink" title="Record&lt;Keys,Type&gt;"></a>Record&lt;Keys,Type&gt;</h1><p>构造一个对象类型，其属性键为keys，属性值为Type,可用于将一种类型的属性映射到另一种类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> CatInfo &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> CatName = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> cats: Record&lt;CatName, CatInfo&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">cats.boris;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//const cats: Record&lt;CatName, CatInfo</span></span><br></pre></td></tr></table></figure><h1 id="Pick-lt-Type-Keys-gt"><a href="#Pick-lt-Type-Keys-gt" class="headerlink" title="Pick&lt;Type,Keys&gt;"></a>Pick&lt;Type,Keys&gt;</h1><p>通过从中选择一组属性keys来构造类型Type</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  description: <span class="built_in">string</span>;</span><br><span class="line">  completed: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> TodoPreview = Pick&lt;Todo, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo: TodoPreview = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todo;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//const todo: TodoPreview</span></span><br></pre></td></tr></table></figure><h1 id="omit-lt-Type-Keys-gt"><a href="#omit-lt-Type-Keys-gt" class="headerlink" title="omit&lt;Type,Keys&gt;"></a>omit&lt;Type,Keys&gt;</h1><p>Type通过从中选择所有属性然后删除keys来构造类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  description: <span class="built_in">string</span>;</span><br><span class="line">  completed: <span class="built_in">boolean</span>;</span><br><span class="line">  createdAt: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> TodoPreview = Omit&lt;Todo, <span class="string">&quot;description&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todo: TodoPreview = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">createdAt</span>: <span class="number">1615544252770</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todo;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//const todo: TodoPreview</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> TodoInfo = Omit&lt;Todo, <span class="string">&quot;completed&quot;</span> | <span class="string">&quot;createdAt&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> todoInfo: TodoInfo = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Pick up kids&quot;</span>,</span><br><span class="line">  <span class="attr">description</span>: <span class="string">&quot;Kindergarten closes at 5pm&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todoInfo;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//const todoInfo: TodoInfo</span></span><br></pre></td></tr></table></figure><h1 id="Exclude-lt-UnionType-ExcludedMembers-gt"><a href="#Exclude-lt-UnionType-ExcludedMembers-gt" class="headerlink" title="Exclude&lt;UnionType,ExcludedMembers&gt;"></a>Exclude&lt;UnionType,ExcludedMembers&gt;</h1><p>通过从UnionType中排除可以赋值给ExcludedMembers的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T0=Exclude&lt;<span class="string">&quot;a&quot;</span>|<span class="string">&quot;b&quot;</span>|<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line"><span class="comment">//type T0=&quot;b&quot;|&quot;c&quot;</span></span><br><span class="line"><span class="keyword">type</span> T1=Exclude&lt;<span class="string">&quot;a&quot;</span>|<span class="string">&quot;b&quot;</span>|<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>|<span class="string">&quot;b&quot;</span>&gt;;</span><br><span class="line"><span class="comment">//type T1=&quot;c&quot;</span></span><br><span class="line"><span class="keyword">type</span> T2 = Exclude&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="built_in">Function</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T2 = string | number</span></span><br></pre></td></tr></table></figure><h1 id="Extract-lt-Type-Union-gt"><a href="#Extract-lt-Type-Union-gt" class="headerlink" title="Extract&lt;Type,Union&gt;"></a>Extract&lt;Type,Union&gt;</h1><p>提取出Type和Union的交集（可以赋值给Union成员的值）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T0 = Extract&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T0 = &quot;a&quot;</span></span><br><span class="line"><span class="keyword">type</span> T1 = Extract&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>), <span class="built_in">Function</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T1 = () =&gt; void</span></span><br></pre></td></tr></table></figure><h1 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable<Type></Type></h1><p>构造一个类型，可以从Type中排除null和undefined</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T0 = NonNullable&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T0 = string | number</span></span><br><span class="line"><span class="keyword">type</span> T1 = NonNullable&lt;<span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T1 = string[]</span></span><br></pre></td></tr></table></figure><h1 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType<Type></Type></h1><p>由函数返回类型组成（<strong>Type必须是一个（…args:any）=&gt;any)</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>): </span>&#123; a: <span class="built_in">number</span>; b: <span class="built_in">string</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> T0 = ReturnType&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T0 = string</span></span><br><span class="line"><span class="keyword">type</span> T1 = ReturnType&lt;<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T1 = void</span></span><br><span class="line"><span class="keyword">type</span> T2 = ReturnType&lt;&lt;T&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T2 = unknown</span></span><br><span class="line"><span class="keyword">type</span> T3 = ReturnType&lt;&lt;T <span class="keyword">extends</span> U, U <span class="keyword">extends</span> <span class="built_in">number</span>[]&gt;<span class="function">() =&gt;</span> T&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T3 = number[]</span></span><br><span class="line"><span class="keyword">type</span> T4 = ReturnType&lt;<span class="keyword">typeof</span> f1&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T4 = &#123;</span></span><br><span class="line">  <span class="comment">//  a: number;</span></span><br><span class="line">   <span class="comment">// b: string;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">type</span> T5 = ReturnType&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T5 = any</span></span><br><span class="line"><span class="keyword">type</span> T6 = ReturnType&lt;<span class="built_in">never</span>&gt;;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T6 = never</span></span><br><span class="line"><span class="keyword">type</span> T7 = ReturnType&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">//Type &#x27;string&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T7 = any</span></span><br><span class="line"><span class="keyword">type</span> T8 = ReturnType&lt;<span class="built_in">Function</span>&gt;;</span><br><span class="line"><span class="comment">//Type &#x27;Function&#x27; does not satisfy the constraint &#x27;(...args: any) =&gt; any&#x27;.</span></span><br><span class="line"><span class="comment">//  Type &#x27;Function&#x27; provides no match for the signature &#x27;(...args: any): any&#x27;.</span></span><br><span class="line">     </span><br><span class="line"><span class="comment">//type T8 = any</span></span><br></pre></td></tr></table></figure><p>官网链接：<a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype">https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Partial&quot;&gt;&lt;a href=&quot;#Partial&quot; class=&quot;headerlink&quot; title=&quot;Partial&quot;&gt;&lt;/a&gt;Partial&lt;Type&gt;&lt;/Type&gt;&lt;/h1&gt;&lt;p&gt;构造一个所有属性的Type都设置为可选的类型，返回一个表示给定类型的所有子</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://coloey.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>纯函数</title>
    <link href="https://coloey.github.io/2022/07/23/%E7%BA%AF%E5%87%BD%E6%95%B0/"/>
    <id>https://coloey.github.io/2022/07/23/%E7%BA%AF%E5%87%BD%E6%95%B0/</id>
    <published>2022-07-23T08:15:51.000Z</published>
    <updated>2022-07-23T08:15:51.587Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>IOC原理</title>
    <link href="https://coloey.github.io/2022/07/17/IOC%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/07/17/IOC%E5%8E%9F%E7%90%86/</id>
    <published>2022-07-17T09:04:33.000Z</published>
    <updated>2022-07-17T09:04:34.165Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>mini-vue</title>
    <link href="https://coloey.github.io/2022/07/10/mini-vue/"/>
    <id>https://coloey.github.io/2022/07/10/mini-vue/</id>
    <published>2022-07-10T08:26:42.000Z</published>
    <updated>2022-07-10T08:54:15.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟结点-diff算法部分"><a href="#虚拟结点-diff算法部分" class="headerlink" title="虚拟结点+diff算法部分"></a>虚拟结点+diff算法部分</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">tag,props,children</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        tag,</span><br><span class="line">        props,</span><br><span class="line">        children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">vnode,container</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//创建相应的真实DOM结点</span></span><br><span class="line">    <span class="keyword">const</span> el=vnode.el=<span class="built_in">document</span>.createElement(vnode.tag);</span><br><span class="line">    <span class="comment">//props</span></span><br><span class="line">    <span class="keyword">if</span>(vnode.props)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> vnode.props)&#123;</span><br><span class="line">            <span class="keyword">const</span> value=vnode.props[key];</span><br><span class="line">            el.setAttribute(key,value);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//children</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(vnode.children)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> vnode.children==<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">            el.textContent=vnode.children;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            vnode.children.forEach(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line">            mount(child,el)<span class="comment">//递归</span></span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container.appendChild(el);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vdom=h(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="attr">class</span>:<span class="string">&#x27;red&#x27;</span>&#125;,[</span><br><span class="line">    h(<span class="string">&#x27;span&#x27;</span>,<span class="literal">null</span>,[<span class="string">&#x27;hello&#x27;</span>])</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> vdom2=h(<span class="string">&#x27;div&#x27;</span>,&#123;<span class="attr">class</span>:<span class="string">&#x27;red&#x27;</span>&#125;,[</span><br><span class="line">    h(<span class="string">&#x27;span&#x27;</span>,<span class="literal">null</span>,[<span class="string">&#x27;hi&#x27;</span>])</span><br><span class="line">])</span><br><span class="line">mount(vdom,<span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>))</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el=n2.el=n1.el;</span><br><span class="line">    <span class="keyword">if</span>(n1.tag===n2.tag)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//props</span></span><br><span class="line">        <span class="keyword">const</span> oldProps=n1.props||&#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> newProps=n1.props||&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> newProps)&#123;</span><br><span class="line">            <span class="keyword">const</span> oldValue=oldProps[key];</span><br><span class="line">            <span class="keyword">const</span> newValue=newProps[key]</span><br><span class="line">            <span class="keyword">if</span>(newValue!==oldValue)&#123;</span><br><span class="line">                el.setAttribute(key,newValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> oldProps)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!key <span class="keyword">in</span> newProps)&#123;</span><br><span class="line">                el.removeAttribute(key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//children</span></span><br><span class="line">        <span class="keyword">const</span> oldChildren=n1.children;</span><br><span class="line">        <span class="keyword">const</span> newChildren=n2.children;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> newChildren===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> oldChildren===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(newChildren!==oldChildren)&#123;</span><br><span class="line">                    el.textContent=newChildren;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                el.textContent=newChildren</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//if newChildren is array </span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> oldChildren===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">                el.innerHTML=<span class="string">&#x27;&#x27;</span></span><br><span class="line">                newChildren.forEach(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line">                    mount(child,el)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">const</span> commonLength=<span class="built_in">Math</span>.min(oldChildren.length,newChildren.length)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;commonLength;i++)&#123;</span><br><span class="line">                    patch(oldChildren[i],newChildren[i])</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(newChildren.length&gt;oldChildren.length)&#123;</span><br><span class="line">                    newChildren.slice(oldChildren.length).forEach(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line">                        mount(child,el)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(newChildren.length&lt;oldChildren.length)&#123;</span><br><span class="line">                    oldChildren.slice(newChildren.length).forEach(<span class="function"><span class="params">child</span>=&gt;</span>&#123;</span><br><span class="line">                        el.removeChild(child.el);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//replace</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">patch(vdom,vdom2);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="reactive部分"><a href="#reactive部分" class="headerlink" title="reactive部分"></a>reactive部分</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> activeEffect;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span></span>&#123;</span><br><span class="line">    subscribers=<span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="function"><span class="title">depend</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activeEffect)&#123;</span><br><span class="line">            <span class="built_in">this</span>.subscribers.add(activeEffect)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">effect</span>=&gt;</span>&#123;</span><br><span class="line">            effect()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Vue2</span></span><br><span class="line"><span class="comment">/*function reactive(raw)&#123;</span></span><br><span class="line"><span class="comment">    Object.keys(raw).forEach(key=&gt;&#123;</span></span><br><span class="line"><span class="comment">        const dep=new Dep()</span></span><br><span class="line"><span class="comment">        let value=raw[key]</span></span><br><span class="line"><span class="comment">        Object.defineProperty(raw,key,&#123;</span></span><br><span class="line"><span class="comment">            get()&#123;</span></span><br><span class="line"><span class="comment">                dep.depend()</span></span><br><span class="line"><span class="comment">                return value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;,</span></span><br><span class="line"><span class="comment">            set(newValue)&#123;</span></span><br><span class="line"><span class="comment">                value=newValue</span></span><br><span class="line"><span class="comment">                dep.notify()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    return raw</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">const</span> targetMap=<span class="keyword">new</span> <span class="built_in">WeakMap</span>()<span class="comment">//键值可以是对象，而且会被自动垃圾回收</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDep</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> depsMap=targetMap.get(target)</span><br><span class="line">    <span class="keyword">if</span>(!depsMap)&#123;</span><br><span class="line">        depsMap=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">        targetMap.set(target,depsMap)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep=depsMap.get(key)</span><br><span class="line">    <span class="keyword">if</span>(!dep)&#123;</span><br><span class="line">        dep=<span class="keyword">new</span> Dep()</span><br><span class="line">        depsMap.set(key,dep)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dep;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> reactiveHandler=&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target,key,receiver</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> dep=getDep(target,key)</span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target,key,receiver)<span class="comment">//Reflect不会抛出异常，只会抛出真假</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target,key,value,receiver</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> dep=getDep(target,key)</span><br><span class="line">        <span class="keyword">const</span> result=<span class="built_in">Reflect</span>.set(target,key,value,receiver)</span><br><span class="line">        dep.notify()</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">raw</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(raw,reactiveHandler)<span class="comment">//Proxy 会触发set get 有利于数组观测，不必多写一些数组内置方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">watchEffect</span>(<span class="params">effect</span>)</span>&#123;</span><br><span class="line">    activeEffect=effect</span><br><span class="line">    effect()</span><br><span class="line">    activeEffect=<span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dep=<span class="keyword">new</span> Dep()</span><br><span class="line"><span class="keyword">const</span> state=reactive(&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(state.count)</span><br><span class="line">&#125;)<span class="comment">//effect run</span></span><br><span class="line"></span><br><span class="line">state.count++;</span><br></pre></td></tr></table></figure><h1 id="完整mini-vue"><a href="#完整mini-vue" class="headerlink" title="完整mini-vue"></a>完整mini-vue</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        </span><br><span class="line">function h(tag,props,children)&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        tag,</span><br><span class="line">        props,</span><br><span class="line">        children</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function mount(vnode,container)&#123;</span><br><span class="line">    //创建相应的真实DOM结点</span><br><span class="line">    const el=vnode.el=document.createElement(vnode.tag);</span><br><span class="line">    //props</span><br><span class="line">    if(vnode.props)&#123;</span><br><span class="line">        for(const key in vnode.props)&#123;</span><br><span class="line">            const value=vnode.props[key];</span><br><span class="line">            if(key.startsWith(&#x27;on&#x27;))&#123;</span><br><span class="line">                el.addEventListener(key.slice(2).toLowerCase(),value)//事件机制</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                el.setAttribute(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //children</span><br><span class="line">    if(vnode.children)&#123;</span><br><span class="line">        if(typeof vnode.children===&#x27;string&#x27;)&#123;</span><br><span class="line">            el.textContent=vnode.children;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            vnode.children.forEach(child=&gt;&#123;</span><br><span class="line">            mount(child,el)//递归</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line">function patch(n1,n2)&#123;</span><br><span class="line">    const el=n2.el=n1.el;</span><br><span class="line">    if(n1.tag===n2.tag)&#123;   </span><br><span class="line">        //props</span><br><span class="line">        const oldProps=n1.props||&#123;&#125;;</span><br><span class="line">        const newProps=n1.props||&#123;&#125;;</span><br><span class="line">        for(const key in newProps)&#123;</span><br><span class="line">            const oldValue=oldProps[key];</span><br><span class="line">            const newValue=newProps[key]</span><br><span class="line">            if(newValue!==oldValue)&#123;</span><br><span class="line">                el.setAttribute(key,newValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for(const key in oldProps)&#123;</span><br><span class="line">            if(!key in newProps)&#123;</span><br><span class="line">                el.removeAttribute(key)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //children</span><br><span class="line">        const oldChildren=n1.children;</span><br><span class="line">        const newChildren=n2.children;</span><br><span class="line">        if(typeof newChildren===&#x27;string&#x27;)&#123;</span><br><span class="line">            if(typeof oldChildren===&#x27;string&#x27;)&#123;</span><br><span class="line">                if(newChildren!==oldChildren)&#123;</span><br><span class="line">                    el.textContent=newChildren;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                el.textContent=newChildren</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //if newChildren is not string</span><br><span class="line">            if(typeof oldChildren===&#x27;string&#x27;)&#123;</span><br><span class="line">                el.innerHTML=&#x27;&#x27;</span><br><span class="line">                newChildren.forEach(child=&gt;&#123;</span><br><span class="line">                    mount(child,el)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                const commonLength=Math.min(oldChildren.length,newChildren.length)</span><br><span class="line">                for(let i=0;i&lt;commonLength;i++)&#123;</span><br><span class="line">                    patch(oldChildren[i],newChildren[i])</span><br><span class="line">                &#125;</span><br><span class="line">                if(newChildren.length&gt;oldChildren.length)&#123;</span><br><span class="line">                    newChildren.slice(oldChildren.length).forEach(child=&gt;&#123;</span><br><span class="line">                        mount(child,el)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    </span><br><span class="line">                &#125;else if(newChildren.length&lt;oldChildren.length)&#123;</span><br><span class="line">                    oldChildren.slice(newChildren.length).forEach(child=&gt;&#123;</span><br><span class="line">                        el.removeChild(child.el);</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //replace</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">let activeEffect;</span><br><span class="line">class Dep&#123;</span><br><span class="line">   subscribers=new Set()</span><br><span class="line">    depend()&#123;</span><br><span class="line">        if(activeEffect)&#123;</span><br><span class="line">            this.subscribers.add(activeEffect)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    notify()&#123;</span><br><span class="line">        this.subscribers.forEach(effect=&gt;&#123;</span><br><span class="line">            effect()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const targetMap=new WeakMap()//只接受键值是对象，不接受其他类型的值作为键值，本身不可以从任何代码访问，而且会被自动垃圾回收，不可以迭代</span><br><span class="line">function getDep(target,key)&#123;</span><br><span class="line">    let depsMap=targetMap.get(target)</span><br><span class="line">    if(!depsMap)&#123;</span><br><span class="line">        depsMap=new Map()//可以迭代键</span><br><span class="line">        targetMap.set(target,depsMap)</span><br><span class="line">    &#125;</span><br><span class="line">    let dep=depsMap.get(key)</span><br><span class="line">    if(!dep)&#123;</span><br><span class="line">        dep=new Dep()</span><br><span class="line">        depsMap.set(key,dep)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return dep;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">const reactiveHandler=&#123;</span><br><span class="line">    get(target,key,receiver)&#123;</span><br><span class="line">        let dep=getDep(target,key)</span><br><span class="line">        dep.depend()</span><br><span class="line">        return Reflect.get(target,key,receiver)//Reflect不会抛出异常，只会抛出真假</span><br><span class="line">    &#125;,</span><br><span class="line">    set(target,key,value,receiver)&#123;</span><br><span class="line">        let dep=getDep(target,key)</span><br><span class="line">        const result=Reflect.set(target,key,value,receiver)</span><br><span class="line">        dep.notify()</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">function reactive(raw)&#123;</span><br><span class="line">    return new Proxy(raw,reactiveHandler)//Proxy 会触发set get 有利于数组观测，不必多写一些数组内置方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function watchEffect(effect)&#123;</span><br><span class="line">    activeEffect=effect</span><br><span class="line">    effect()</span><br><span class="line">    activeEffect=null</span><br><span class="line">&#125;</span><br><span class="line">const dep=new Dep()</span><br><span class="line">const App=&#123;</span><br><span class="line">    data:reactive(&#123;</span><br><span class="line">        count:0</span><br><span class="line">    &#125;),</span><br><span class="line">    render()&#123;</span><br><span class="line">        return h(&#x27;div&#x27;,&#123;</span><br><span class="line">            onClick:()=&gt;&#123;</span><br><span class="line">                this.data.count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        String(this.data.count))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function mountApp(component,container)&#123;</span><br><span class="line">    let isMounted=false</span><br><span class="line">    let prevVdom</span><br><span class="line">    watchEffect(()=&gt;&#123;</span><br><span class="line">        if(!isMounted)&#123;</span><br><span class="line">            prevVdom=component.render()</span><br><span class="line">            mount(prevVdom,container)</span><br><span class="line">            isMounted=true</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            const newVdom=component.render()</span><br><span class="line">            patch(prevVdom,newVdom)</span><br><span class="line">            prevVdom=newVdom</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">mountApp(App,document.getElementById(&#x27;app&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟结点-diff算法部分&quot;&gt;&lt;a href=&quot;#虚拟结点-diff算法部分&quot; class=&quot;headerlink&quot; title=&quot;虚拟结点+diff算法部分&quot;&gt;&lt;/a&gt;虚拟结点+diff算法部分&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="Deep dive with Evan You" scheme="https://coloey.github.io/tags/Deep-dive-with-Evan-You/"/>
    
  </entry>
  
  <entry>
    <title>搭建TypeScript+webpack5开发环境</title>
    <link href="https://coloey.github.io/2022/07/08/%E6%90%AD%E5%BB%BATypeScript-webpack5%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://coloey.github.io/2022/07/08/%E6%90%AD%E5%BB%BATypeScript-webpack5%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2022-07-08T13:13:05.000Z</published>
    <updated>2022-07-08T13:56:17.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化package-json"><a href="#初始化package-json" class="headerlink" title="初始化package.json"></a>初始化package.json</h1><p>初始化package.json有两种方式，一种是通过npm管理，一种是通过yarn管理。</p><p>npm命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>yarn命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure><p>直接用默认配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init -y</span><br></pre></td></tr></table></figure><p>package.json中dependencies,devDependencies,peerDependencies,scripts这几个字段的意思。</p><blockquote><p>dependencies:生产环境，项目运行的依赖（如ract,ract-dom</p><p>devDependencies开发环境，项目所需的依赖(webpack插件，打包插件叶索插件，eslint等)</p><p>peerDependencies 包不会自动安装，会提示你项目运行，需要主动安装该依赖</p><p>scripts命令脚本</p></blockquote><h1 id="引入TypeScript"><a href="#引入TypeScript" class="headerlink" title="引入TypeScript"></a>引入TypeScript</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D typescript</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add typescript -D</span><br></pre></td></tr></table></figure><h1 id="用tsc命令初始化生产tsconfig-json文件"><a href="#用tsc命令初始化生产tsconfig-json文件" class="headerlink" title="用tsc命令初始化生产tsconfig.json文件"></a>用tsc命令初始化生产tsconfig.json文件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>tssconfig.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span>,<span class="comment">//源码目录</span></span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>, <span class="comment">// 指定输出 ECMAScript 目标版本</span></span><br><span class="line">        <span class="string">&quot;module&quot;</span>: <span class="string">&quot;ESNext&quot;</span>, <span class="comment">//面向未来的ESM模块化</span></span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 开启所有的严格检查配置</span></span><br><span class="line">        <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许 export = xxx 导出 ，并使用 import xxx form &quot;module-name&quot; 导入</span></span><br><span class="line">        <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">        <span class="comment">/* 指定要包含在编译中的库文件——引用类库——即申明文件，如果输出的模块方式是 es5，就会默认引入 &quot;dom&quot;,&quot;es5&quot;,&quot;scripthost&quot; 。如果在 TS 中想要使用一些 ES6 以上版本的语法，就需要引入相关的类库 */</span></span><br><span class="line">        <span class="string">&quot;lib&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;webworker&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dom&quot;</span>,</span><br><span class="line">            <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">            <span class="string">&quot;es2015&quot;</span>,</span><br><span class="line">            <span class="string">&quot;es2016&quot;</span>,</span><br><span class="line">            <span class="string">&quot;es2015.promise&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dom.iterable&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripthost&quot;</span>,</span><br><span class="line">            <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">        ], <span class="comment">// 要包含在编译中的依赖库文件列表</span></span><br><span class="line">        <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许编译 JavaScript 文件</span></span><br><span class="line">        <span class="comment">// 检查 JS 文件</span></span><br><span class="line">        <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>, <span class="comment">// 跳过所有声明文件的类型检查</span></span><br><span class="line">        <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许从没有默认导出的模块进行默认导入</span></span><br><span class="line">        <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许使用 .json 扩展名导入的模块</span></span><br><span class="line">        <span class="comment">/* react 模式下：直接将 JSX 编译成 JS，会生成 React.createElement 的形式，在使用前不需要再进行转换操作了，输出文件的扩展名为 .js */</span></span><br><span class="line">        <span class="comment">/* preserve 模式下：不会将 JSX 编译成 JS，生成代码中会保留 JSX，以供后续的转换操作使用（比如：Babel）。 另外，输出文件会带有 .jsx 扩展名 */</span></span><br><span class="line">        <span class="comment">/* react-native 模式下：相当于 preserve，它也保留了所有的 JSX，但是输出文件的扩展名是 .js */</span></span><br><span class="line">        <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>, <span class="comment">// 在.tsx文件中支持JSX</span></span><br><span class="line">        <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成相应的.map文件</span></span><br><span class="line">        <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成相应的.d.ts文件</span></span><br><span class="line">        <span class="string">&quot;allowUmdGlobalAccess&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>, <span class="comment">// 启用对ES装饰器的实验性支持</span></span><br><span class="line">        <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>, <span class="comment">// 将模块解析模式设置为node.js解析模式</span></span><br><span class="line">        <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">        <span class="string">&quot;incremental&quot;</span>: <span class="literal">true</span>, <span class="comment">// 通过从以前的编译中读取/写入信息到磁盘上的文件来启用增量编译</span></span><br><span class="line">        <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/* 当目标是ES5或ES3的时候提供对for-of、扩展运算符和解构赋值中对于迭代器的完整支持 */</span></span><br><span class="line">        <span class="string">&quot;downlevelIteration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noImplicitReturns&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 不允许使用隐式的 any 类型</span></span><br><span class="line">        <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 不允许 this 有隐式的 any 类型，即 this 必须有明确的指向</span></span><br><span class="line">        <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 不允许把 null、undefined 赋值给其他类型变量</span></span><br><span class="line">        <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">            <span class="comment">//别名</span></span><br><span class="line">            <span class="string">&quot;@/*&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;src/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;@images/*&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;src/assets/images/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;src&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dist&quot;</span></span><br><span class="line">    ] <span class="comment">// *** 不进行类型检查的文件 ***</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：qyjandroid</span><br><span class="line">链接：https:<span class="comment">//juejin.cn/post/7020972849649156110</span></span><br><span class="line">来源：稀土掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h1 id="引入webpack"><a href="#引入webpack" class="headerlink" title="引入webpack"></a>引入webpack</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><h2 id="构建tsx"><a href="#构建tsx" class="headerlink" title="构建tsx"></a>构建tsx</h2><p>关于TS转JS，有三种方案</p><ol><li>tsc 缺点，转换为es5后，一些语法特性不能转换</li><li>ts-loader</li><li>babel-loader+@babel/preset-typescript 插件丰富，后序兼容扩展性强</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/core @babel/preset-env babel-loader core-js</span><br></pre></td></tr></table></figure><p> [babel中文网](<a href="https://link.juejin.cn/?target=https://www.babeljs.cn/docs/usage">https://link.juejin.cn/?target=https%3A%2F%2Fwww.babeljs.cn%2Fdocs%2Fusage</a></p><p>安装必要的webapck插件和Loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin less-loader css-loader style-loader postcss postcss-loader</span><br></pre></td></tr></table></figure><h2 id="配置webpack-config-js"><a href="#配置webpack-config-js" class="headerlink" title="配置webpack.config.js"></a>配置webpack.config.js</h2><p>解释：path.resolve()方法用于将相对路径转为绝对路径</p><p>它接收多个参数，依次表示所要进入的路径，直到将最后一个参数转为绝对路径，如果根据参数无法得到绝对路径，就以当前所在路径作为基准，除了根目录，该方法的返回值不带尾部斜杠</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">path.resolve([<span class="keyword">from</span> ...], to)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">path.resolve(<span class="string">&#x27;foo/bar&#x27;</span>, <span class="string">&#x27;/tmp/file/&#x27;</span>, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;a/../subfile&#x27;</span>)</span><br></pre></td></tr></table></figure><p>执行效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd foo/bar</span><br><span class="line">$ cd /tmp/file/</span><br><span class="line">$ cd ..</span><br><span class="line">$ cd a/../subfile</span><br><span class="line">$ pwd</span><br></pre></td></tr></table></figure><p>node.js中的文件路径大概有____dirname,___filename,precess.cwd,./或者../</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__dirname：    获得当前执行文件所在目录的完整目录名</span><br><span class="line">__filename：   获得当前执行文件的带有完整绝对路径的文件名</span><br><span class="line">process.cwd()：获得当前执行node命令时候的文件夹目录名 </span><br><span class="line">./：           文件所在目录</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">    <span class="comment">//用来设置引用模块,避免找不到ts和js模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>:[<span class="string">&#x27;.ts&#x27;</span>,<span class="string">&#x27;.js&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>:path.resolve(__dirname,<span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="comment">//打包后文件</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">clean</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">environment</span>:&#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span>,<span class="comment">//关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//开发模式使用，方便查错误</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">static</span>:<span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.ts$/</span>,</span><br><span class="line">                use:</span><br><span class="line">                [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>:<span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                        <span class="comment">//设置babel</span></span><br><span class="line">                        <span class="attr">options</span>:&#123;</span><br><span class="line">                            <span class="comment">//设置预定义环境</span></span><br><span class="line">                            <span class="attr">presets</span>:[</span><br><span class="line">                                [</span><br><span class="line">                                    <span class="comment">//指定环境的插件</span></span><br><span class="line">                                    <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                    <span class="comment">//配置信息</span></span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="comment">//要兼容的目标浏览器</span></span><br><span class="line">                                        <span class="attr">targets</span>:&#123;</span><br><span class="line">                                            <span class="attr">chrome</span>:<span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                            <span class="attr">ie</span>:<span class="string">&quot;11&quot;</span>,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                        <span class="comment">//指定corejs版本</span></span><br><span class="line">                                        <span class="attr">corejs</span>:<span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">                                        <span class="comment">//使用corejs的方式&quot;usage&quot;表示按需加载,能够解决ie11旧浏览器中promise无法使用的问题</span></span><br><span class="line">                                        <span class="attr">useBuiltIns</span>:<span class="string">&quot;usage&quot;</span>,</span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line">                                ]</span><br><span class="line"></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="attr">loader</span>:<span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">                </span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node-modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">//使用哪些loader</span></span><br><span class="line">            use:[</span><br><span class="line">                <span class="comment">//use数组中loader执行顺序从右到左，从下到上一次执行</span></span><br><span class="line">                <span class="comment">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">                <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                <span class="comment">//将css文件变成commonjs模块加载到js中，里面内容是样式字符串</span></span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">            ]&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="comment">//引入postcss</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>:<span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">                        <span class="attr">options</span>:&#123;</span><br><span class="line">                            <span class="attr">postcssOptions</span>:&#123;</span><br><span class="line">                                <span class="attr">plugins</span>:[</span><br><span class="line">                                    [</span><br><span class="line">                                        <span class="string">&quot;postcss-preset-env&quot;</span>,</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="attr">browsers</span>:<span class="string">&#x27;last 2 versions&#x27;</span></span><br><span class="line">                                        &#125;</span><br><span class="line">                                    ]</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span>,<span class="comment">//将less文件编译成css文件</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(</span><br><span class="line">            &#123;<span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>&#125;</span><br><span class="line">        )</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 package.json中scripts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>直接npm run build就能启动webpack-dev-server</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初始化package-json&quot;&gt;&lt;a href=&quot;#初始化package-json&quot; class=&quot;headerlink&quot; title=&quot;初始化package.json&quot;&gt;&lt;/a&gt;初始化package.json&lt;/h1&gt;&lt;p&gt;初始化package.json有两种</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://coloey.github.io/categories/TypeScript/"/>
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
  </entry>
  
</feed>
