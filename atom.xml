<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小柒</title>
  
  <subtitle>www.xiaoqi.cn</subtitle>
  <link href="https://coloey.github.io/atom.xml" rel="self"/>
  
  <link href="https://coloey.github.io/"/>
  <updated>2022-10-12T10:01:47.024Z</updated>
  <id>https://coloey.github.io/</id>
  
  <author>
    <name>小柒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Promise控制并发</title>
    <link href="https://coloey.github.io/2022/10/12/Promise%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/"/>
    <id>https://coloey.github.io/2022/10/12/Promise%E6%8E%A7%E5%88%B6%E5%B9%B6%E5%8F%91/</id>
    <published>2022-10-12T09:40:05.000Z</published>
    <updated>2022-10-12T10:01:47.024Z</updated>
    
    <content type="html"><![CDATA[<p>问题：当我们的应用瞬间发出很多请求，比如几十万http请求时，或者堆积了无数调用栈导致内存溢出，这个时候需要我们对http的连接数做限制</p><p>思路：</p><p>初始化一个pool数组作为并发池，然后先循环把并发池塞满，不断调用addTask，通过自定义请求函数request,每个任务task是一个Promise对象包装，执行完就pop出连接池，然后将新任务添加进并发池pool</p><p>方法一：不通过Promise.race:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> pool = []; <span class="comment">//并发池</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">3</span>; <span class="comment">//最大并发数量</span></span><br><span class="line"><span class="comment">//自定义请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(url);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`任务<span class="subst">$&#123;url&#125;</span>完成`</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;外部逻辑&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addtask</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> task = request(url);</span><br><span class="line">    pool.push(task);</span><br><span class="line">    task.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">         <span class="comment">//任务完成，从并发池中删除</span></span><br><span class="line">        pool.splice(pool.indexof(task),<span class="number">1</span>);</span><br><span class="line">        cosole.log(<span class="string">`<span class="subst">$&#123;url&#125;</span>完成，当前并发数为<span class="subst">$&#123;pool.length&#125;</span>`</span>)   </span><br><span class="line">        <span class="comment">//每当并发池结束一个任务，就再塞入一个任务</span></span><br><span class="line">        url=url.shift();</span><br><span class="line">        <span class="keyword">if</span>(url!==<span class="literal">undefined</span>)&#123;</span><br><span class="line">            addTask(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先把并发池塞满</span></span><br><span class="line"><span class="keyword">while</span>(pool.length&lt;max)&#123;</span><br><span class="line">    <span class="keyword">let</span> url=urls.shift();</span><br><span class="line">    addTask(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Promise.race()实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> pool = []; <span class="comment">//并发池</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">3</span>; <span class="comment">//最大并发数量</span></span><br><span class="line"><span class="comment">//自定义请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(url);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`任务<span class="subst">$&#123;url&#125;</span>完成`</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;外部逻辑&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTask</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> task = request(url);</span><br><span class="line">  pool.push(task);</span><br><span class="line">  task.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//请求结束将Promise任务从pool中移除</span></span><br><span class="line">    pool.splice(pool.indexOf(task), <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;url&#125;</span>结束，当前并发数:<span class="subst">$&#123;pool.length&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">task</span>) </span>&#123;</span><br><span class="line">  task.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = urls.shift();</span><br><span class="line">    <span class="keyword">if</span> (url !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      addTask(url);</span><br><span class="line">      run(<span class="built_in">Promise</span>.race(pool));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pool.length &lt; max) &#123;</span><br><span class="line">  <span class="keyword">let</span> url = urls.shift();</span><br><span class="line">  addTask(url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> race = <span class="built_in">Promise</span>.race(pool);</span><br><span class="line">run(race);</span><br></pre></td></tr></table></figure><p>Promise.race+async…await实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urls = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> pool = []; <span class="comment">//并发池</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">3</span>; <span class="comment">//最大并发数量</span></span><br><span class="line"><span class="comment">//自定义请求函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(url);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`任务<span class="subst">$&#123;url&#125;</span>完成`</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;外部逻辑&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urls.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> task = request(urls[i]);</span><br><span class="line">    <span class="comment">//请求结束将Promise任务从pool中移除</span></span><br><span class="line">    task.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      pool.splice(pool.indexOf(task), <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;urls[i]&#125;</span>结束，当前并发数:<span class="subst">$&#123;pool.length&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    pool.push(task);</span><br><span class="line">    <span class="comment">//并发池塞满后需要等待一个task完成才可以继续往里面塞任务</span></span><br><span class="line">    <span class="keyword">if</span> (pool.length === max) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">Promise</span>.race(pool);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题：当我们的应用瞬间发出很多请求，比如几十万http请求时，或者堆积了无数调用栈导致内存溢出，这个时候需要我们对http的连接数做限制&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;初始化一个pool数组作为并发池，然后先循环把并发池塞满，不断调用addTask，通过自定义请求函数</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
    <category term="手撕代码" scheme="https://coloey.github.io/tags/%E6%89%8B%E6%92%95%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ThisType</title>
    <link href="https://coloey.github.io/2022/10/10/ThisType/"/>
    <id>https://coloey.github.io/2022/10/10/ThisType/</id>
    <published>2022-10-10T14:10:26.000Z</published>
    <updated>2022-10-10T14:25:08.672Z</updated>
    
    <content type="html"><![CDATA[<p>在对象字面量方法中的this类型，将由以下决定：</p><p>如果这个方法显示指定了this参数，那么this具有该参数的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bar = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">f</span>(<span class="params"><span class="built_in">this</span>:&#123; message: <span class="built_in">string</span> &#125;</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>;<span class="comment">//&#123;message: string&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>否则，如果方法由带this参数的签名进行上下文键入，那么this具有该参数的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">f</span>(<span class="params">n: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>;<span class="comment">//&#123;x:string,f(n: number): void&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果–noImplicityThis选项启用，并且对象字面量中包含由ThisType<T>键入的上下文类型，那么this的类型为T</T></p><p>如果–noImplicityThis选项启用，并且对象字面量中包含由ThisType<T>键入的上下文类型，那么this的类型为该上下文类型</T></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ObjectDescriptor&lt;D,M&gt; = &#123;</span><br><span class="line">    data?: D;</span><br><span class="line">    methods?: M &amp; ThisType&lt;D&amp;M&gt;<span class="comment">//Type of &#x27;this&#x27; is D&amp;M</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeObject</span>&lt;<span class="title">D</span>,<span class="title">M</span>&gt;(<span class="params">desc:ObjectDescriptor&lt;D,M&gt;:D &amp; M</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> data: <span class="built_in">object</span> = desc.data || &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> methods: <span class="built_in">object</span> = desc.methods || &#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;...data,...methods&#125; <span class="keyword">as</span> D&amp;M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = makeObject(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">moveBy</span>(<span class="params">dx:<span class="built_in">number</span>,dy:<span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x+=dx;<span class="comment">//Strongly typed this</span></span><br><span class="line">            <span class="built_in">this</span>.y+=dy;<span class="comment">//Strongly typed this</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">obj.x=<span class="number">10</span>;</span><br><span class="line">obj.y=<span class="number">20</span>;</span><br><span class="line">obj.moveBy(<span class="number">5</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>否则，如果 <code>--noImplicitThis</code> 选项已经启用，<code>this</code> 具有该对象字面量的类型。</p><p>否则，<code>this</code> 的类型为 <code>any</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在对象字面量方法中的this类型，将由以下决定：&lt;/p&gt;
&lt;p&gt;如果这个方法显示指定了this参数，那么this具有该参数的类型&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://coloey.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>混合</title>
    <link href="https://coloey.github.io/2022/10/10/%E6%B7%B7%E5%90%88/"/>
    <id>https://coloey.github.io/2022/10/10/%E6%B7%B7%E5%90%88/</id>
    <published>2022-10-10T13:09:57.000Z</published>
    <updated>2022-10-10T14:17:41.638Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript只能严格的单继承，因此你不能：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Tagged</span>,<span class="title">Timestamped</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ERROR：不能多重继承</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从可重用组件构建类的另一种方式是通过基类构建它们，这种方式成为混合</p><p>混合是一个函数：</p><ul><li>传入一个构造函数；</li><li>创建一个带有新功能，并且扩展构造函数的新类</li><li>返回这个新类</li></ul><p>example:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有mixins都需要</span></span><br><span class="line"><span class="keyword">type</span> Constructor&lt;T = &#123;&#125;&gt; = <span class="keyword">new</span> (...args: <span class="built_in">any</span>[]) =&gt; T;</span><br><span class="line"><span class="comment">//添加属性的混合例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timestamped</span>&lt;<span class="title">TBase</span> <span class="title">extends</span> <span class="title">Constructor</span>&gt;(<span class="params">Base: TBase</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">        timestamp = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加属性和方法的混合例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Activatable</span>&lt;<span class="title">TBase</span> <span class="title">extends</span> <span class="title">Constructor</span>&gt;(<span class="params">Base: TBase</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">        isActivated = <span class="literal">false</span>;</span><br><span class="line">        <span class="function"><span class="title">activate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.isActivated = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">deactivate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.isActivated = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    name=<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加TImestamped的User</span></span><br><span class="line"><span class="keyword">const</span> Timestamped = Timestamped(User)</span><br><span class="line"><span class="keyword">const</span> TimestampedActivatableUser = Timestamped(Activatable(User))</span><br><span class="line"><span class="keyword">const</span> timestampUserExample = <span class="keyword">new</span> Timestamped()</span><br><span class="line"><span class="built_in">console</span>.log(timestampUserExample.timestamp)</span><br><span class="line"><span class="keyword">const</span> timestampedActivatableUserExample = <span class="keyword">new</span> TimestampedActivatableUser()</span><br><span class="line"><span class="built_in">console</span>.log(timestampedActivatableUserExample.timestamp)</span><br></pre></td></tr></table></figure><p>上面这个例子中，</p><h2 id="创建一个构造函数"><a href="#创建一个构造函数" class="headerlink" title="创建一个构造函数"></a>创建一个构造函数</h2><p>混合接受一个类，并且使用新功能扩展它，因此，我们需要定义构造函数的类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Constructor&lt;T = &#123;&#125;&gt; = <span class="keyword">new</span> (...args:<span class="built_in">any</span>[]) =&gt; T</span><br></pre></td></tr></table></figure><h2 id="扩展一个类并且返回它："><a href="#扩展一个类并且返回它：" class="headerlink" title="扩展一个类并且返回它："></a>扩展一个类并且返回它：</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加属性的混合例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timestamped</span>&lt;<span class="title">TBase</span> <span class="title">extends</span> <span class="title">Constructor</span>&gt;(<span class="params">Base: TBase</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">        timestamp = <span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TypeScript只能严格的单继承，因此你不能：&lt;/p&gt;
&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://coloey.github.io/categories/TypeScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Freshness</title>
    <link href="https://coloey.github.io/2022/10/05/Freshness/"/>
    <id>https://coloey.github.io/2022/10/05/Freshness/</id>
    <published>2022-10-05T12:53:13.000Z</published>
    <updated>2022-10-05T13:03:12.504Z</updated>
    
    <content type="html"><![CDATA[<p>Freshness会进行更严格的对象字面量检查，用来确保对象字面量在结构上类型兼容</p><p>结构类型兼容规则：如果两个类型的结构一样，就说它们是互相兼容的，且可以相互赋值的（即如果类型x要兼容类型y,那么类型y至少具有与类型x相同的属性)</p><h1 id="Freshness-特性"><a href="#Freshness-特性" class="headerlink" title="Freshness 特性"></a>Freshness 特性</h1><p>如上所述，只要满足结构类型兼容规则的两个类型便可相互兼容。那是否有例外存在呢？让我们看下面的例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Named &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p: Named;</span><br><span class="line">p = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,<span class="comment">// 不能将类型“&#123; id: number; name: string; &#125;”分配给类型“Named”。 对象文字可以只指定已知属性，并且“id”不在类型“Named”中。ts(2322)</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然为变量p赋予的字面值完全符合结构类型兼容规则，但它却抛出异常，这主要是由TypeScript中的Freshness特性导致，该特性会对对象字面量进行更为严格的类型检测：只有目标变量的类型与该对象字面量的类型完全一致，对象字面量才可能赋值给目标变量，否则抛出类型错误，我们可以通过类型断言消除异常：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p: Named;</span><br><span class="line">p = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> Person;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Freshness会进行更严格的对象字面量检查，用来确保对象字面量在结构上类型兼容&lt;/p&gt;
&lt;p&gt;结构类型兼容规则：如果两个类型的结构一样，就说它们是互相兼容的，且可以相互赋值的（即如果类型x要兼容类型y,那么类型y至少具有与类型x相同的属性)&lt;/p&gt;
&lt;h1 id=&quot;Fr</summary>
      
    
    
    
    <category term="TypeSctipt" scheme="https://coloey.github.io/categories/TypeSctipt/"/>
    
    
  </entry>
  
  <entry>
    <title>AST的构建与转换</title>
    <link href="https://coloey.github.io/2022/09/18/Vue.js%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/09/18/Vue.js%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91%E5%99%A8%E5%8E%9F%E7%90%86/</id>
    <published>2022-09-18T02:53:58.000Z</published>
    <updated>2022-09-24T09:46:19.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js模板编译器用于把模板编译为渲染函数："><a href="#Vue-js模板编译器用于把模板编译为渲染函数：" class="headerlink" title="Vue.js模板编译器用于把模板编译为渲染函数："></a>Vue.js模板编译器用于把模板编译为渲染函数：</h1><ul><li>分析模板，将其解析为AST</li><li>将模板AST转换为用于描述渲染函数的JavaScript AST</li><li>根据JavaScript AST生成渲染函数代码</li></ul><h1 id="解析Token"><a href="#解析Token" class="headerlink" title="解析Token"></a>解析Token</h1><p>为Vue.js模板构造AST，AST在结构上和模板同构</p><p>首先，将模板解析为一个个token,利用有限状态机进行分词</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义状态机状态</span></span><br><span class="line"><span class="keyword">const</span> State = &#123;</span><br><span class="line">  <span class="attr">initial</span>: <span class="number">1</span>, <span class="comment">//初始状态</span></span><br><span class="line">  <span class="attr">tagOpen</span>: <span class="number">2</span>, <span class="comment">//标签开始状态</span></span><br><span class="line">  <span class="attr">tagName</span>: <span class="number">3</span>, <span class="comment">//标签名称状态</span></span><br><span class="line">  <span class="attr">text</span>: <span class="number">4</span>, <span class="comment">//文本状态</span></span><br><span class="line">  <span class="attr">tagEnd</span>: <span class="number">5</span>, <span class="comment">//结束状态</span></span><br><span class="line">  <span class="attr">tagEndName</span>: <span class="number">6</span>, <span class="comment">//结束标签名称状态</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一个辅助函数，用于判断是否是字母</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAlpha</span>(<span class="params">char</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (char &gt;= <span class="string">&quot;a&quot;</span> &amp;&amp; char &lt;= <span class="string">&quot;z&quot;</span>) || (char &gt;= <span class="string">&quot;A&quot;</span> &amp;&amp; char &lt;= <span class="string">&quot;Z&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收模板字符串作为参数，并将模板切割为Token返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//设置状态机的当前状态为初始状态</span></span><br><span class="line">  <span class="keyword">let</span> currentState = State.initial;</span><br><span class="line">  <span class="comment">//用于缓存字符</span></span><br><span class="line">  <span class="keyword">const</span> chars = [];</span><br><span class="line">  <span class="comment">//生成的token会存储到tokens中，并作为函数返回值返回</span></span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line">  <span class="comment">//使用while循环开启自动机，只要模板字符串没有被消费完，自动机一直运行</span></span><br><span class="line">  <span class="keyword">while</span> (str) &#123;</span><br><span class="line">    <span class="comment">//查看第一个字符只是查看，没有消费</span></span><br><span class="line">    <span class="keyword">const</span> char = str[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//switch语句匹配状态</span></span><br><span class="line">    <span class="keyword">switch</span> (currentState) &#123;</span><br><span class="line">      <span class="comment">//状态机处于初始状态</span></span><br><span class="line">      <span class="keyword">case</span> State.initial:</span><br><span class="line">        <span class="comment">//遇到字符&lt;</span></span><br><span class="line">        <span class="keyword">if</span> (char === <span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//切换到标签开始状态</span></span><br><span class="line">          currentState = State.tagOpen;</span><br><span class="line">          <span class="comment">//消费字符</span></span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAlpha(str)) &#123;</span><br><span class="line">          <span class="comment">//初始状态下遇到文本，切换到文本状态</span></span><br><span class="line">          currentState = State.text;</span><br><span class="line">          <span class="comment">//将当前文本存到chars数组</span></span><br><span class="line">          chars.push(char);</span><br><span class="line">          <span class="comment">//消费字符</span></span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于标签开始状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagOpen:</span><br><span class="line">        <span class="comment">//遇到字母，切换到标签名称状态</span></span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          currentState = State.tagName;</span><br><span class="line">          <span class="comment">//将当前字符缓存到chars数组</span></span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//遇到&quot;/&quot;切换到标签结束状态</span></span><br><span class="line">          currentState = State.tagEnd;</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于标签名状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagName:</span><br><span class="line">        <span class="comment">//遇到字母，仍然处于标签名状态，不需要切换状态</span></span><br><span class="line">        <span class="comment">//但需要将字符缓存进chars数组</span></span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;&gt;&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//切换到初始状态</span></span><br><span class="line">          currentState = State.initial;</span><br><span class="line">          <span class="comment">//同时创建一个标签Token,并添加到tokens数组</span></span><br><span class="line">          <span class="comment">//此时chars数组中缓存的就是标签名</span></span><br><span class="line">          tokens.push(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;tag&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: chars.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//chars数组已经被消费，清空</span></span><br><span class="line">          chars.length = <span class="number">0</span>;</span><br><span class="line">          <span class="comment">//同时消费当前字符&gt;</span></span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于文本状态</span></span><br><span class="line">      <span class="keyword">case</span> State.text:</span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//切换标签开始状态</span></span><br><span class="line">          currentState = State.tagOpen;</span><br><span class="line">          <span class="comment">//从文本状态到标签开始状态，此时应该创建文本Token,并添加到tokens数组</span></span><br><span class="line">          <span class="comment">//chars数组中的内容就是文本内容</span></span><br><span class="line">          tokens.push(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: chars.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//清空数组内容</span></span><br><span class="line">          chars.length = <span class="number">0</span>;</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于标签结束状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagEnd:</span><br><span class="line">        <span class="comment">///遇到字母切换到标签结束名</span></span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          currentState = State.tagEndName;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于结束标签名称状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagEndName:</span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;&gt;&quot;</span>) &#123;</span><br><span class="line">          currentState = State.initial;</span><br><span class="line">          tokens.push(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;tagEnd&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: chars.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        chars.length = <span class="number">0</span>;</span><br><span class="line">        str = str.slice(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//最后返回tokens</span></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tokens = tokenize(<span class="string">`&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;/div&gt;)</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tokens = [</span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&quot;tag&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;div&quot;</span>&#125;,<span class="comment">//div开始标签</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;tag&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;p&#x27;</span>&#125;,<span class="comment">//p开始标签</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;text&#x27;</span>,<span class="attr">context</span>:<span class="string">&#x27;Vue&#x27;</span>&#125;,<span class="comment">//文本节点</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;tagEnd&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;p&#x27;</span>&#125;,<span class="comment">//p结束标签</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;tagEnd&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;div&#x27;</span>&#125;<span class="comment">//div结束标签</span></span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="构建AST："><a href="#构建AST：" class="headerlink" title="构建AST："></a>构建AST：</h1><p>接下来，扫描token列表构建AST：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扫描token列表构建AST</span></span><br><span class="line"><span class="comment">//parse函数接收模板作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//首先对模板标记化，得到tokens</span></span><br><span class="line">    <span class="keyword">const</span> tokens = tokenize(str)</span><br><span class="line">    <span class="comment">//创建Root节点</span></span><br><span class="line">    <span class="keyword">const</span> root = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Root&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建elementStack，起初里面只有Root根结点</span></span><br><span class="line">    <span class="keyword">const</span> elementStack = [root]</span><br><span class="line">    <span class="comment">//开启一个while循环扫描tokens,直到所有Token都被扫描完毕为止</span></span><br><span class="line">    <span class="keyword">while</span>(tokens.length) &#123;</span><br><span class="line">        <span class="comment">//获取栈顶节点作为父结点</span></span><br><span class="line">        <span class="keyword">const</span> parent = elementStack[elementStack.length-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">//当前扫描的Token</span></span><br><span class="line">        <span class="keyword">const</span> t = tokens[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">switch</span>(t.type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;tag&#x27;</span>:</span><br><span class="line">                <span class="comment">//如果当前token是开始标签，则创建Element类型的AST节点</span></span><br><span class="line">                <span class="keyword">const</span> elementNode = &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Element&#x27;</span>,</span><br><span class="line">                    <span class="attr">tag</span>: t.name,</span><br><span class="line">                    <span class="attr">children</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将其添加到父级节点的children</span></span><br><span class="line">                parent.children.push(elementNode)</span><br><span class="line">                <span class="comment">//将当前结点压入栈</span></span><br><span class="line">                elementStack.push(elementNode)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">                <span class="keyword">const</span> textNode = &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Text&#x27;</span>,</span><br><span class="line">                    <span class="attr">content</span>: t.content</span><br><span class="line">                &#125;</span><br><span class="line">                parent.children.push(textNode)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;tagEnd&#x27;</span>:</span><br><span class="line">                <span class="comment">//遇到结束标签，将栈顶节点弹出</span></span><br><span class="line">                elementStack.pop()</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消费已经扫描过的token</span></span><br><span class="line">        tokens.shift()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="AST的转换"><a href="#AST的转换" class="headerlink" title="AST的转换"></a>AST的转换</h1><p>AST的转换，即对AST的一系列操作</p><p>transform函数完成AST的转换，使用深度遍历算法对节点进行访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//首先需要编写一个深度优先遍历算法</span></span><br><span class="line"><span class="comment">//转换上下文context看做是在程序中某个范围内的全局变量,下面，所有AST转换函数都可以通过context共享数据</span></span><br><span class="line"><span class="comment">//将对结点的访问和操作进行解耦</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">ast,context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置当前转换的结点信息context.currentNode</span></span><br><span class="line">    context.currentNode = ast</span><br><span class="line">    <span class="keyword">const</span> transforms = context.nodeTransforms</span><br><span class="line">    <span class="comment">//执行对结点的操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;transforms.length;i++)&#123;</span><br><span class="line">        transforms[i](context.currentNode,context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> children = context.currentNode.children</span><br><span class="line">    <span class="comment">//执行对结点的深度遍历访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;children.length;i++)&#123;</span><br><span class="line">        <span class="comment">//递归调用traverseNode转换子节点之前，将当前结点设置为父结点</span></span><br><span class="line">        context.parent = context.currentNode</span><br><span class="line">        <span class="comment">//设置位置索引</span></span><br><span class="line">        context.childIndex = i</span><br><span class="line">        <span class="comment">//递归调用时，将context透传</span></span><br><span class="line">        traverseNode(children[i],context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformElement</span>(<span class="params">node,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.type === <span class="string">&#x27;Element&#x27;</span> &amp;&amp; node.tag === <span class="string">&#x27;p&#x27;</span>) &#123;</span><br><span class="line">        context.removeNode()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformText</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.type === <span class="string">&#x27;Text&#x27;</span>) &#123;</span><br><span class="line">        context.replaceNode(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;Element&#x27;</span>,</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;span&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">ast</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = &#123;</span><br><span class="line">        <span class="comment">//增加currentNode用来存储当前正在转换的结点</span></span><br><span class="line">        <span class="attr">currentNode</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="comment">//增加currentIndex，用来存储当前结点在父结点的children中的位置索引</span></span><br><span class="line">        <span class="attr">childIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">//增加parant用来存储当前转换结点的父结点</span></span><br><span class="line">        <span class="attr">parent</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="comment">//用于替换结点的函数，接收新节点作为参数</span></span><br><span class="line">        <span class="function"><span class="title">replaceNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//为了替换结点，需要修改AST</span></span><br><span class="line">            <span class="comment">//找到当前结点在父结点的children位置：context.childIndex</span></span><br><span class="line">            <span class="comment">//使用新节点替换</span></span><br><span class="line">            context.parent.children[context.childIndex]=node</span><br><span class="line">            context.currentNode = node</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//用于移除当前访问结点</span></span><br><span class="line">        <span class="function"><span class="title">removeNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//根据当前结点在父结点中的索引删除结点</span></span><br><span class="line">            context.parent.children.splice(context.childIndex,<span class="number">1</span>)</span><br><span class="line">            context.currentNode = <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">nodeTransforms</span>: [</span><br><span class="line">            transformElement,</span><br><span class="line">            transformText</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    traverseNode(ast,context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js模板编译器用于把模板编译为渲染函数：&quot;&gt;&lt;a href=&quot;#Vue-js模板编译器用于把模板编译为渲染函数：&quot; class=&quot;headerlink&quot; title=&quot;Vue.js模板编译器用于把模板编译为渲染函数：&quot;&gt;&lt;/a&gt;Vue.js模板编译器用于把</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue.js模板编译器原理</title>
    <link href="https://coloey.github.io/2022/09/18/AST%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BD%AC%E6%8D%A2/"/>
    <id>https://coloey.github.io/2022/09/18/AST%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-09-18T02:53:58.000Z</published>
    <updated>2022-09-22T14:29:03.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js模板编译器用于把模板编译为渲染函数："><a href="#Vue-js模板编译器用于把模板编译为渲染函数：" class="headerlink" title="Vue.js模板编译器用于把模板编译为渲染函数："></a>Vue.js模板编译器用于把模板编译为渲染函数：</h1><ul><li>分析模板，将其解析为AST</li><li>将模板AST转换为用于描述渲染函数的JavaScript AST</li><li>根据JavaScript AST生成渲染函数代码</li></ul><h1 id="解析Token"><a href="#解析Token" class="headerlink" title="解析Token"></a>解析Token</h1><p>为Vue.js模板构造AST，AST在结构上和模板同构</p><p>首先，将模板解析为一个个token,利用有限状态自动机构造一个词法分析器，词法分析的过程就是状态机在不同状态之间迁移的过程，在此过程中，状态机会产出一个个token,生成一个token列表我们使用该token列表来构造用于描述模板的AST</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义状态机状态</span></span><br><span class="line"><span class="keyword">const</span> State = &#123;</span><br><span class="line">  <span class="attr">initial</span>: <span class="number">1</span>, <span class="comment">//初始状态</span></span><br><span class="line">  <span class="attr">tagOpen</span>: <span class="number">2</span>, <span class="comment">//标签开始状态</span></span><br><span class="line">  <span class="attr">tagName</span>: <span class="number">3</span>, <span class="comment">//标签名称状态</span></span><br><span class="line">  <span class="attr">text</span>: <span class="number">4</span>, <span class="comment">//文本状态</span></span><br><span class="line">  <span class="attr">tagEnd</span>: <span class="number">5</span>, <span class="comment">//结束状态</span></span><br><span class="line">  <span class="attr">tagEndName</span>: <span class="number">6</span>, <span class="comment">//结束标签名称状态</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一个辅助函数，用于判断是否是字母</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAlpha</span>(<span class="params">char</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (char &gt;= <span class="string">&quot;a&quot;</span> &amp;&amp; char &lt;= <span class="string">&quot;z&quot;</span>) || (char &gt;= <span class="string">&quot;A&quot;</span> &amp;&amp; char &lt;= <span class="string">&quot;Z&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收模板字符串作为参数，并将模板切割为Token返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//设置状态机的当前状态为初始状态</span></span><br><span class="line">  <span class="keyword">let</span> currentState = State.initial;</span><br><span class="line">  <span class="comment">//用于缓存字符</span></span><br><span class="line">  <span class="keyword">const</span> chars = [];</span><br><span class="line">  <span class="comment">//生成的token会存储到tokens中，并作为函数返回值返回</span></span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line">  <span class="comment">//使用while循环开启自动机，只要模板字符串没有被消费完，自动机一直运行</span></span><br><span class="line">  <span class="keyword">while</span> (str) &#123;</span><br><span class="line">    <span class="comment">//查看第一个字符只是查看，没有消费</span></span><br><span class="line">    <span class="keyword">const</span> char = str[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//switch语句匹配状态</span></span><br><span class="line">    <span class="keyword">switch</span> (currentState) &#123;</span><br><span class="line">      <span class="comment">//状态机处于初始状态</span></span><br><span class="line">      <span class="keyword">case</span> State.initial:</span><br><span class="line">        <span class="comment">//遇到字符&lt;</span></span><br><span class="line">        <span class="keyword">if</span> (char === <span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//切换到标签开始状态</span></span><br><span class="line">          currentState = State.tagOpen;</span><br><span class="line">          <span class="comment">//消费字符</span></span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isAlpha(str)) &#123;</span><br><span class="line">          <span class="comment">//初始状态下遇到文本，切换到文本状态</span></span><br><span class="line">          currentState = State.text;</span><br><span class="line">          <span class="comment">//将当前文本存到chars数组</span></span><br><span class="line">          chars.push(char);</span><br><span class="line">          <span class="comment">//消费字符</span></span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于标签开始状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagOpen:</span><br><span class="line">        <span class="comment">//遇到字母，切换到标签名称状态</span></span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          currentState = State.tagName;</span><br><span class="line">          <span class="comment">//将当前字符缓存到chars数组</span></span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//遇到&quot;/&quot;切换到标签结束状态</span></span><br><span class="line">          currentState = State.tagEnd;</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于标签名状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagName:</span><br><span class="line">        <span class="comment">//遇到字母，仍然处于标签名状态，不需要切换状态</span></span><br><span class="line">        <span class="comment">//但需要将字符缓存进chars数组</span></span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;&gt;&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//切换到初始状态</span></span><br><span class="line">          currentState = State.initial;</span><br><span class="line">          <span class="comment">//同时创建一个标签Token,并添加到tokens数组</span></span><br><span class="line">          <span class="comment">//此时chars数组中缓存的就是标签名</span></span><br><span class="line">          tokens.push(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;tag&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: chars.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//chars数组已经被消费，清空</span></span><br><span class="line">          chars.length = <span class="number">0</span>;</span><br><span class="line">          <span class="comment">//同时消费当前字符&gt;</span></span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于文本状态</span></span><br><span class="line">      <span class="keyword">case</span> State.text:</span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;&lt;&quot;</span>) &#123;</span><br><span class="line">          <span class="comment">//切换标签开始状态</span></span><br><span class="line">          currentState = State.tagOpen;</span><br><span class="line">          <span class="comment">//从文本状态到标签开始状态，此时应该创建文本Token,并添加到tokens数组</span></span><br><span class="line">          <span class="comment">//chars数组中的内容就是文本内容</span></span><br><span class="line">          tokens.push(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>: chars.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">//清空数组内容</span></span><br><span class="line">          chars.length = <span class="number">0</span>;</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于标签结束状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagEnd:</span><br><span class="line">        <span class="comment">///遇到字母切换到标签结束名</span></span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          currentState = State.tagEndName;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">//状态机处于结束标签名称状态</span></span><br><span class="line">      <span class="keyword">case</span> State.tagEndName:</span><br><span class="line">        <span class="keyword">if</span> (isAlpha(char)) &#123;</span><br><span class="line">          chars.push(char);</span><br><span class="line">          str = str.slice(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (char === <span class="string">&quot;&gt;&quot;</span>) &#123;</span><br><span class="line">          currentState = State.initial;</span><br><span class="line">          tokens.push(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;tagEnd&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: chars.join(<span class="string">&quot;&quot;</span>),</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        chars.length = <span class="number">0</span>;</span><br><span class="line">        str = str.slice(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//最后返回tokens</span></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tokens = tokenize(<span class="string">`&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;/div&gt;)</span></span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tokens = [</span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&quot;tag&quot;</span>,<span class="attr">name</span>:<span class="string">&quot;div&quot;</span>&#125;,<span class="comment">//div开始标签</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;tag&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;p&#x27;</span>&#125;,<span class="comment">//p开始标签</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;text&#x27;</span>,<span class="attr">context</span>:<span class="string">&#x27;Vue&#x27;</span>&#125;,<span class="comment">//文本节点</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;tagEnd&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;p&#x27;</span>&#125;,<span class="comment">//p结束标签</span></span><br><span class="line">    &#123;<span class="attr">type</span>:<span class="string">&#x27;tagEnd&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;div&#x27;</span>&#125;<span class="comment">//div结束标签</span></span><br><span class="line">    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="构建AST："><a href="#构建AST：" class="headerlink" title="构建AST："></a>构建AST：</h1><p>接下来，扫描token列表构建AST：</p><p>扫描Token列表维护一个标签栈，每当扫描到一个开始标签结点，将其压入栈顶，栈顶的结点始终作为下一个扫描的结点的父结点，这样，当所有token扫描完，构建一颗AST树</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扫描token列表构建AST</span></span><br><span class="line"><span class="comment">//parse函数接收模板作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//首先对模板标记化，得到tokens</span></span><br><span class="line">    <span class="keyword">const</span> tokens = tokenize(str)</span><br><span class="line">    <span class="comment">//创建Root节点</span></span><br><span class="line">    <span class="keyword">const</span> root = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;Root&#x27;</span>,</span><br><span class="line">        <span class="attr">children</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建elementStack，起初里面只有Root根结点</span></span><br><span class="line">    <span class="keyword">const</span> elementStack = [root]</span><br><span class="line">    <span class="comment">//开启一个while循环扫描tokens,直到所有Token都被扫描完毕为止</span></span><br><span class="line">    <span class="keyword">while</span>(tokens.length) &#123;</span><br><span class="line">        <span class="comment">//获取栈顶节点作为父结点</span></span><br><span class="line">        <span class="keyword">const</span> parent = elementStack[elementStack.length-<span class="number">1</span>]</span><br><span class="line">        <span class="comment">//当前扫描的Token</span></span><br><span class="line">        <span class="keyword">const</span> t = tokens[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">switch</span>(t.type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;tag&#x27;</span>:</span><br><span class="line">                <span class="comment">//如果当前token是开始标签，则创建Element类型的AST节点</span></span><br><span class="line">                <span class="keyword">const</span> elementNode = &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Element&#x27;</span>,</span><br><span class="line">                    <span class="attr">tag</span>: t.name,</span><br><span class="line">                    <span class="attr">children</span>: []</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将其添加到父级节点的children</span></span><br><span class="line">                parent.children.push(elementNode)</span><br><span class="line">                <span class="comment">//将当前结点压入栈</span></span><br><span class="line">                elementStack.push(elementNode)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">                <span class="keyword">const</span> textNode = &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;Text&#x27;</span>,</span><br><span class="line">                    <span class="attr">tag</span>: t.content</span><br><span class="line">                &#125;</span><br><span class="line">                parent.children.push(textNode)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;tagEnd&#x27;</span>:</span><br><span class="line">                <span class="comment">//遇到结束标签，将栈顶节点弹出</span></span><br><span class="line">                elementStack.pop()</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消费已经扫描过的token</span></span><br><span class="line">        tokens.shift()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="AST的转换"><a href="#AST的转换" class="headerlink" title="AST的转换"></a>AST的转换</h1><p>AST的转换，即对AST的一系列操作</p><p>transform函数完成AST的转换</p><p>为了解耦结点的访问和操作，设计了插件化架构，将结点的操作封装到独立的转换函数，这些转换函数可以通过context.nodeTransforms来注册，这里的context称为转换上下文，上下文对象维护程序的当前状态,可以实现结点的替换删除功能，但是有时候，当前结点的转换工作依赖于子节点的转换结果，所以为了优先执行子节点的转换，我们将整个转换过程分为“进入阶段“和”退出阶段“，每个转换函数分成两个阶段执行，这样可以实现更加细粒度的转换控制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//首先需要编写一个深度优先遍历算法</span></span><br><span class="line"><span class="comment">//转换上下文context看做是在程序中某个范围内的全局变量,下面，所有AST转换函数都可以通过context共享数据</span></span><br><span class="line"><span class="comment">//将对结点的访问和操作进行解耦</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">ast,context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//设置当前转换的结点信息context.currentNode</span></span><br><span class="line">    context.currentNode = ast</span><br><span class="line">    <span class="keyword">const</span> transforms = context.nodeTransforms</span><br><span class="line">    <span class="comment">//执行对结点的操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;transforms.length;i++)&#123;</span><br><span class="line">        transforms[i](context.currentNode,context)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> children = context.currentNode.children</span><br><span class="line">    <span class="comment">//执行对结点的深度遍历访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;children.length;i++)&#123;</span><br><span class="line">        <span class="comment">//递归调用traverseNode转换子节点之前，将当前结点设置为父结点</span></span><br><span class="line">        context.parent = context.currentNode</span><br><span class="line">        <span class="comment">//设置位置索引</span></span><br><span class="line">        context.childIndex = i</span><br><span class="line">        <span class="comment">//递归调用时，将context透传</span></span><br><span class="line">        traverseNode(children[i],context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformElement</span>(<span class="params">node,context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.type === <span class="string">&#x27;Element&#x27;</span> &amp;&amp; node.tag === <span class="string">&#x27;p&#x27;</span>) &#123;</span><br><span class="line">        context.removeNode()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformText</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node.type === <span class="string">&#x27;Text&#x27;</span>) &#123;</span><br><span class="line">        context.replaceNode(&#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;Element&#x27;</span>,</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;span&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">ast</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = &#123;</span><br><span class="line">        <span class="comment">//增加currentNode用来存储当前正在转换的结点</span></span><br><span class="line">        <span class="attr">currentNode</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="comment">//增加currentIndex，用来存储当前结点在父结点的children中的位置索引</span></span><br><span class="line">        <span class="attr">childIndex</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">//增加parant用来存储当前转换结点的父结点</span></span><br><span class="line">        <span class="attr">parent</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="comment">//用于替换结点的函数，接收新节点作为参数</span></span><br><span class="line">        <span class="function"><span class="title">replaceNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//为了替换结点，需要修改AST</span></span><br><span class="line">            <span class="comment">//找到当前结点在父结点的children位置：context.childIndex</span></span><br><span class="line">            <span class="comment">//使用新节点替换</span></span><br><span class="line">            context.parent.children[context.childIndex]=node</span><br><span class="line">            context.currentNode = node</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//用于移除当前访问结点</span></span><br><span class="line">        <span class="function"><span class="title">removeNode</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//根据当前结点在父结点中的索引删除结点</span></span><br><span class="line">            context.parent.children.splice(context.childIndex,<span class="number">1</span>)</span><br><span class="line">            context.currentNode = <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">nodeTransforms</span>: [</span><br><span class="line">            transformElement,</span><br><span class="line">            transformText</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    traverseNode(ast,context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>增加回退功能的traverseNode:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">ast, context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//增加一个退出阶段回调函数数组</span></span><br><span class="line">  <span class="keyword">const</span> exitFns = []</span><br><span class="line">  <span class="comment">//设置当前转换的结点信息context.currentNode</span></span><br><span class="line">  context.currentNode = ast;</span><br><span class="line">  <span class="keyword">const</span> transforms = context.nodeTransforms;</span><br><span class="line">  <span class="comment">//执行对结点的操作</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; transforms.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> onExit = transforms[i](context.currentNode, context);</span><br><span class="line">    <span class="keyword">if</span>(onExit)&#123;</span><br><span class="line">      <span class="comment">//将退出阶段的回调函数添加到exitFns数组中</span></span><br><span class="line">      exitFns.push(onExit)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> children = context.currentNode.children;</span><br><span class="line">  <span class="comment">//执行对结点的深度遍历访问</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">    <span class="comment">//递归调用traverseNode转换子节点之前，将当前结点设置为父结点</span></span><br><span class="line">    context.parent = context.currentNode;</span><br><span class="line">    <span class="comment">//设置位置索引</span></span><br><span class="line">    context.childIndex = i;</span><br><span class="line">    <span class="comment">//递归调用时，将context透传</span></span><br><span class="line">    traverseNode(children[i], context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在节点处理的最后阶段执行缓存到exitFns中的回调函数</span></span><br><span class="line">  <span class="keyword">let</span> i = exitFns.length</span><br><span class="line">  <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">    exitFns[i]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="将模板AST转为JavaScript-AST"><a href="#将模板AST转为JavaScript-AST" class="headerlink" title="将模板AST转为JavaScript AST"></a>将模板AST转为JavaScript AST</h1><p>代码生成的过程就是字符串的拼接过程，需要为不同AST结点编写对应的代码生成函数。</p><p>这段模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Vue</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Template</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价于下面这段渲染函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>,[</span><br><span class="line">        h(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;Vue&#x27;</span>),</span><br><span class="line">        h(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;Template&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于下面这段JavaScript AST:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FunctionDeclNode = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;FunctionDecl&#x27;</span>,</span><br><span class="line">  <span class="comment">//函数名称是一个标识符，标识符本身也是一个结点</span></span><br><span class="line">  <span class="attr">id</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;identifier&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;render&#x27;</span>,<span class="comment">//存储标识符名称，这里是渲染函数render</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">params</span>:[],<span class="comment">//参数</span></span><br><span class="line">  <span class="attr">body</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;ReturnStatement&#x27;</span>,</span><br><span class="line">      <span class="comment">//最外层的h函数调用</span></span><br><span class="line">      <span class="attr">return</span>: &#123;</span><br><span class="line">        <span class="comment">//函数调用语句</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;CallExpression&#x27;</span>,</span><br><span class="line">        <span class="comment">//被调用函数的名称，是一个标识符</span></span><br><span class="line">        <span class="attr">callee</span>: &#123;<span class="attr">type</span>:<span class="string">&#x27;identifier&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">        <span class="attr">arguments</span>: [</span><br><span class="line">          <span class="comment">//第一个参数是字符串字面量div</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,</span><br><span class="line">            <span class="attr">value</span>:<span class="string">&#x27;div&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//第二个参数是一个数组</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;ArrayExpression&#x27;</span>,</span><br><span class="line">            <span class="attr">elements</span>: [</span><br><span class="line">              <span class="comment">//数组第一个元素时h函数的调用</span></span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">type</span>:<span class="string">&#x27;CallExpression&#x27;</span>,</span><br><span class="line">                <span class="attr">callee</span>: &#123;<span class="attr">type</span>:<span class="string">&#x27;identifier&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">                <span class="attr">arguments</span>:[</span><br><span class="line">                  <span class="comment">//该h函数调用的第一个参数是一个字符串字面量</span></span><br><span class="line">                  &#123;<span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;p&#x27;</span>&#125;,</span><br><span class="line">                  &#123;<span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;Vue&#x27;</span>&#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;CallExpression&#x27;</span>,</span><br><span class="line">                <span class="attr">callee</span>: &#123;<span class="attr">type</span>:<span class="string">&#x27;identifier&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">                <span class="attr">arguments</span>:[</span><br><span class="line">                  &#123;<span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;p&#x27;</span>&#125;,</span><br><span class="line">                  &#123;<span class="attr">type</span>: <span class="string">&#x27;StringLiteral&#x27;</span>,<span class="attr">value</span>:<span class="string">&#x27;Template&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一些用来辅助创建js ast的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStringLiteral</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;StringLiteral&#x27;</span>,</span><br><span class="line">    value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Identifier节点（函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIdentifier</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建ArrayExpression节点(数组表达式)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createArrayExpression</span>(<span class="params">elements</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;ArrayExpression&#x27;</span>,</span><br><span class="line">    elements</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建CallExpression节点(函数调用)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCallExpression</span>(<span class="params">callee,<span class="built_in">arguments</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;CallExpression&#x27;</span>,</span><br><span class="line">    <span class="attr">callee</span>:createIdentifier(callee),</span><br><span class="line">    <span class="built_in">arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写转换文本节点,标签结点和根结点的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编写转换文本节点函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformText</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(node.type !== <span class="string">&#x27;Text&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  node.jsNode = createStringLiteral(node.content)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写转换标签节点函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformElement</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//转换代码编写在退出阶段的回调函数中</span></span><br><span class="line">  <span class="comment">//可以保证该标签结点的子节点全部被处理完毕</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node.type !== <span class="string">&#x27;Element&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建h函调用语句，第一个是标签名</span></span><br><span class="line">    <span class="keyword">const</span> callExp = createCallExpression(<span class="string">&#x27;h&#x27;</span>,[</span><br><span class="line">      createStringLiteral(node.tag)</span><br><span class="line">    ])</span><br><span class="line">    <span class="comment">//处理h函数调用的参数</span></span><br><span class="line">    node.children.length === <span class="number">1</span></span><br><span class="line">    <span class="comment">//如果当前标签结点只有一个子节点，则直接使用子节点的jsnode作为参数</span></span><br><span class="line">    ? callExp.arguments.push(node.children[<span class="number">0</span>].jsNode)</span><br><span class="line">    :callExp.arguments.push(</span><br><span class="line">      <span class="comment">//数组的每个元素都是子节点的jsnode</span></span><br><span class="line">      createArrayExpression(node.children.map(<span class="function"><span class="params">c</span> =&gt;</span> c.jsNode))</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//将当前标签结点对应的JavaScript AST添加到jsNode属性下</span></span><br><span class="line">      node.jsNode = callExp;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还需要把描述render的函数声明附加到js ast中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformRoot</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(node.type !== <span class="string">&#x27;Root&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//node是根结点，第一个子节点就是模板的根结点</span></span><br><span class="line">    <span class="keyword">const</span> vnodeJSAST = node.children[<span class="number">0</span>].jsNode</span><br><span class="line">    <span class="comment">//创建render函数的声明语句结点，将vnodeAST作为render函数体的返回语句</span></span><br><span class="line">    node.jsNode = &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;FunctionDecl&#x27;</span>,</span><br><span class="line">      <span class="attr">id</span>: &#123;<span class="attr">type</span>:<span class="string">&#x27;Identifier&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;render&#x27;</span>&#125;,</span><br><span class="line">      <span class="attr">params</span>: [],</span><br><span class="line">      <span class="attr">body</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;ReturnStatement&#x27;</span>,</span><br><span class="line">          <span class="attr">return</span>: vnodeJSAST</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译代码，代码生成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span>(<span class="params">template</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//模板AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = parse(template)</span><br><span class="line">  <span class="comment">//将模板ast转换为JavaScript AST</span></span><br><span class="line">  transform(ast)</span><br><span class="line">  <span class="keyword">const</span> code = generate(ast.jsNode)</span><br><span class="line">  <span class="keyword">return</span> code</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">code</span>)</span> &#123;</span><br><span class="line">      context.node += code</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//当前缩进的级别，初始值为0，即没有缩进</span></span><br><span class="line">    <span class="attr">currentIndent</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">//该函数用来换行，即在代码字符串后面追加\n字符,换行时保留缩进</span></span><br><span class="line">    <span class="function"><span class="title">newLine</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      context.code+= <span class="string">&#x27;\n&#x27;</span>+<span class="string">` `</span>.repeat(context.currentIndent)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//用来缩进,即让currentIndent自增后调用换行函数</span></span><br><span class="line">    <span class="function"><span class="title">indent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      context.currentIndent++;</span><br><span class="line">      context.newLine()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//取消缩进</span></span><br><span class="line">    <span class="function"><span class="title">deindent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      context.currentIndent--;</span><br><span class="line">      context.newLine()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  genNode(node,context)</span><br><span class="line">  <span class="keyword">return</span> context.code</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genNode</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(node.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;FunctionDecl&#x27;</span>:</span><br><span class="line">      genFunctionDecl(node,context)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ReturnStatement&#x27;</span>:</span><br><span class="line">      genReturnStatement(node,context)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;CallExpression&#x27;</span>:</span><br><span class="line">      genCallExpression(node,context)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;StringLiteral&#x27;</span>:</span><br><span class="line">      genStringLiteral(node,context)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;ArrayExpression&#x27;</span>:</span><br><span class="line">      genArrayExpression(node,context)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为函数参数生成代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genNodeList</span>(<span class="params">nodes,context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;push&#125; = context</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">    genNode(nodes[i],context)</span><br><span class="line">    <span class="keyword">if</span>(i&lt;nodes.length-<span class="number">1</span>)&#123;</span><br><span class="line">      push(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFunctionDecl</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//从context中取出工具函数</span></span><br><span class="line">  <span class="keyword">const</span> &#123;push,indent,deindent&#125; = context</span><br><span class="line">  <span class="comment">//node.id.name即函数名</span></span><br><span class="line">  push(<span class="string">`funtion(<span class="subst">$&#123;node.id.name&#125;</span>)`</span>)</span><br><span class="line">  push(<span class="string">`(`</span>)</span><br><span class="line">  <span class="comment">//为函数参数生成代码</span></span><br><span class="line">  genNodeList(node.params,context)</span><br><span class="line">  push(<span class="string">`)`</span>)</span><br><span class="line">  push(<span class="string">`&#123;`</span>)</span><br><span class="line">  indent()</span><br><span class="line">  <span class="comment">//为函数生成代码，递归调用genNode</span></span><br><span class="line">  node.body.forEach(<span class="function"><span class="params">n</span> =&gt;</span> genNode(n,context))</span><br><span class="line">  <span class="comment">//取消缩进</span></span><br><span class="line">  deindent()</span><br><span class="line">  push(<span class="string">`&#125;`</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genArrayExpression</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;push&#125; = context</span><br><span class="line">  push(<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">  <span class="comment">//调用genNodeList为数组元素生成代码</span></span><br><span class="line">  genNodeList(node.elements,context)</span><br><span class="line">  push(<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genReturnStatement</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;push&#125; = context</span><br><span class="line">  push(<span class="string">&#x27;return&#x27;</span>)</span><br><span class="line">  <span class="comment">//genNode函数递归生成返回值代码</span></span><br><span class="line">  genNode(context.return,context)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genStringLiteral</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;push&#125; = context</span><br><span class="line">  push(<span class="string">`<span class="subst">$&#123;node.value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genCallExpression</span>(<span class="params">node,context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;push&#125; = context</span><br><span class="line">  <span class="comment">//取得调用函数名称和参数列表</span></span><br><span class="line">  <span class="keyword">const</span> &#123;callee,<span class="built_in">arguments</span>&#125; = context</span><br><span class="line">  push(<span class="string">`<span class="subst">$&#123;callee.name&#125;</span>(`</span>)</span><br><span class="line">  <span class="comment">//调用genNodeList生成参数列表</span></span><br><span class="line">  genNodeList(<span class="built_in">arguments</span>,context)</span><br><span class="line">  push(<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ast = parse(<span class="string">`&lt;div&gt;&lt;p&gt;Vue&lt;/p&gt;&lt;p&gt;Template&lt;/p&gt;&lt;/div&gt;`</span>)</span><br><span class="line">transform(ast)</span><br><span class="line"><span class="keyword">const</span> code = generate(ast.jsNode)</span><br></pre></td></tr></table></figure><p>转换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> history(<span class="string">&#x27;div&#x27;</span>,[h(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;Vue&#x27;</span>),h(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;Template&#x27;</span>)])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue-js模板编译器用于把模板编译为渲染函数：&quot;&gt;&lt;a href=&quot;#Vue-js模板编译器用于把模板编译为渲染函数：&quot; class=&quot;headerlink&quot; title=&quot;Vue.js模板编译器用于把模板编译为渲染函数：&quot;&gt;&lt;/a&gt;Vue.js模板编译器用于把</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>setup原理</title>
    <link href="https://coloey.github.io/2022/09/16/setup%E5%8E%9F%E7%90%86/"/>
    <id>https://coloey.github.io/2022/09/16/setup%E5%8E%9F%E7%90%86/</id>
    <published>2022-09-16T14:13:49.000Z</published>
    <updated>2022-09-16T14:17:45.847Z</updated>
    
    <content type="html"><![CDATA[<p>setup只会在被挂载时执行一次，返回值由两种情况：</p><p>1 返回一个函数，该函数将作为组件的render函数</p><p>2 返回一个对象，该对象包含的数据将暴露给模板使用</p><p>setup函数第一个参数为外部为组件传递的props数据对象，第二个参数为setupContext对象，其中保存着组件接口相关的数据和方法：slots,emit,attrs,expose</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span>(<span class="params">vnode,container,anchor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> componentOptions = vnode.type</span><br><span class="line">    <span class="comment">//从组件选项中取出setup函数</span></span><br><span class="line">    <span class="keyword">let</span> &#123;render,data,setup&#125; = componentOptions</span><br><span class="line">    beforeCreate &amp;&amp; beforeCreate()</span><br><span class="line">    <span class="keyword">const</span> state = data ? reactive(data()) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> [props,attrs] = resolveProps(propsOption,vnode,props)</span><br><span class="line">    <span class="keyword">const</span> instance = &#123;</span><br><span class="line">        state,</span><br><span class="line">        <span class="attr">props</span>:shallowReactive(props),</span><br><span class="line">        <span class="attr">isMounted</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">subTree</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//setupContext包含slots,emit,attrs,expose</span></span><br><span class="line">    <span class="keyword">const</span> setupContext = &#123;attrs&#125;</span><br><span class="line">    <span class="comment">//setupContext作为第二个参数传入</span></span><br><span class="line">    <span class="keyword">const</span> setupResult = setup(shallowReadOnly(instance.props),setupContext)</span><br><span class="line">    <span class="comment">//如果setupResult为函数，则作为渲染函数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> setupResult === <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//冲突</span></span><br><span class="line">        <span class="keyword">if</span>(render)<span class="built_in">console</span>.error(<span class="string">&#x27;setup函数返回渲染函数，render选项被忽略&#x27;</span>)</span><br><span class="line">        render = setupResult</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果setup返回值不是函数，则作为数据状态赋值给setupState</span></span><br><span class="line">        setupState = setupContext</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//渲染函数上下文对象，本质上是组件实例的代理，使得渲染函数能够通过this访问props数据和组件自身状态</span></span><br><span class="line">    <span class="keyword">const</span> renderContext = <span class="keyword">new</span> <span class="built_in">Proxy</span>(instance,&#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">t,k,t</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> &#123;state,props,slots&#125; = t</span><br><span class="line">          <span class="comment">//先尝试读取自身状态数据</span></span><br><span class="line">          <span class="keyword">if</span>(state &amp;&amp; k <span class="keyword">in</span> state) &#123;</span><br><span class="line">            <span class="keyword">return</span> state[k]</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k <span class="keyword">in</span> props)&#123;</span><br><span class="line">            <span class="keyword">return</span> props[k]<span class="comment">//如果组件自身没有该数据，尝试从props上读取</span></span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;不存在&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//当k的值为$slots，直接返回组件实例上的slots</span></span><br><span class="line">          <span class="keyword">if</span>(k === <span class="string">&#x27;$slots&#x27;</span>)<span class="keyword">return</span> slots</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">t,k,v,r</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">const</span> [state,props] = t</span><br><span class="line">          <span class="keyword">if</span>(state &amp;&amp; k <span class="keyword">in</span> state)&#123;</span><br><span class="line">            state[k]=t</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(k <span class="keyword">in</span> props)&#123;</span><br><span class="line">            props[k]=t</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;不存在&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用于解析组件props和attrs数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveProps</span>(<span class="params">options,propsData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> attrs = &#123;&#125;</span><br><span class="line">    <span class="comment">//遍历为组件传递的props数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> propsData) &#123;</span><br><span class="line">        <span class="keyword">if</span>(key <span class="keyword">in</span> options)&#123;</span><br><span class="line">            <span class="comment">//如果为组件传递的props数据在组件自身的props选项中有定义，则将其视为合法的props</span></span><br><span class="line">            props[key] = propsData[key]</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            attrs[key] = propsData[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [props,attrs]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;setup只会在被挂载时执行一次，返回值由两种情况：&lt;/p&gt;
&lt;p&gt;1 返回一个函数，该函数将作为组件的render函数&lt;/p&gt;
&lt;p&gt;2 返回一个对象，该对象包含的数据将暴露给模板使用&lt;/p&gt;
&lt;p&gt;setup函数第一个参数为外部为组件传递的props数据对象，第二个参数</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>插槽的工作原理及实现</title>
    <link href="https://coloey.github.io/2022/09/16/%E6%8F%92%E6%A7%BD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>https://coloey.github.io/2022/09/16/%E6%8F%92%E6%A7%BD%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-09-16T13:09:31.000Z</published>
    <updated>2022-09-16T13:46:01.142Z</updated>
    
    <content type="html"><![CDATA[<p>MyComponent组件模板：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;header&gt;&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;&lt;/header&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;slot name=&quot;body&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;footer&gt;&lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;&lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>当在父组件中使用<MyComponent>组件时，可以根据插槽名字插入自定义的内容</MyComponent></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyComponent&gt;</span><br><span class="line">    &lt;template #header&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">            我是标题</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #body&gt;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">            我是内容</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #footer&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    我是注脚</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/MyComponent&gt;</span><br></pre></td></tr></table></figure><p>父组件模板会被编译成如下渲染函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">type</span>: MyComponent,</span><br><span class="line">    <span class="comment">//组件的children会被编译成一个对象</span></span><br><span class="line">    <span class="attr">children</span>: &#123;</span><br><span class="line">      <span class="function"><span class="title">header</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="string">&#x27;h1&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;我是标题&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">body</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="string">&#x27;section&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;我是内容&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">foote</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="string">&#x27;p&#x27;</span>,<span class="attr">children</span>:<span class="string">&#x27;我是注脚&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>组件模板中的插槽内容会被编译为插槽函数，而插槽函数的返回值就是具体的插槽内容</strong></p><p>MyComponent的模板会被编译成如下渲染函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;header&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [<span class="built_in">this</span>.$slots.header()]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [<span class="built_in">this</span>.$slots.body()]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;footer&#x27;</span>,</span><br><span class="line">      <span class="attr">children</span>: [<span class="built_in">this</span>.$slots.footer()]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染插槽内容的过程，就是调用插槽函数并渲染由其返回的内容的过程，在运行时实现上，插槽依赖于setupContext中的slots对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span>(<span class="params">vnode,container,anchor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//直接使用编译好的vnode.children对象作为slots对象</span></span><br><span class="line">  <span class="keyword">const</span> slots = vnode.children || &#123;&#125;</span><br><span class="line">  <span class="comment">//将slot对象添加到setupContext中</span></span><br><span class="line">  <span class="keyword">const</span> setupContext = &#123;attrs,emit,slots&#125;</span><br><span class="line">  <span class="keyword">const</span> instance = &#123;</span><br><span class="line">    state,</span><br><span class="line">    <span class="attr">props</span>: shallowReactive(props),</span><br><span class="line">    <span class="attr">isMounnted</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">subTree</span>:<span class="literal">null</span>,</span><br><span class="line">    <span class="comment">//将插槽添加到组件实例</span></span><br><span class="line">    slots</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> renderContext = <span class="keyword">new</span> <span class="built_in">Proxy</span>(instance,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">t,k,t</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;state,props,slots&#125; = t</span><br><span class="line">      <span class="comment">//当k的值为$slots，直接返回组件实例上的slots</span></span><br><span class="line">      <span class="keyword">if</span>(k === <span class="string">&#x27;$slots&#x27;</span>)<span class="keyword">return</span> slots</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">t,k,v,r</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MyComponent组件模板：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>diff算法</title>
    <link href="https://coloey.github.io/2022/09/12/diff%E7%AE%97%E6%B3%95/"/>
    <id>https://coloey.github.io/2022/09/12/diff%E7%AE%97%E6%B3%95/</id>
    <published>2022-09-12T13:17:10.000Z</published>
    <updated>2022-09-12T14:14:56.322Z</updated>
    
    <content type="html"><![CDATA[<p>Vue2中使用双端diff算法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双端diff算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchKeyedChildren</span>(<span class="params">n1,n2,container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldChildren = n1.children</span><br><span class="line">    <span class="keyword">const</span> newChildren = n2.children</span><br><span class="line">    <span class="comment">//是个索引值</span></span><br><span class="line">    <span class="keyword">let</span> oldStartIdx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> oldEndIdx = oldChildren.length-<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> newStartIdx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> newEndIdx = newChildren.length-<span class="number">1</span></span><br><span class="line">    <span class="comment">//四个索引指向的vnode</span></span><br><span class="line">    <span class="keyword">let</span> oldStartVnode = oldChildren[oldStartIdx]</span><br><span class="line">    <span class="keyword">let</span> oldEndVnode = oldChildren[oldEndIdx]</span><br><span class="line">    <span class="keyword">let</span> newStartVnode = newChildren[newStartIdx]</span><br><span class="line">    <span class="keyword">let</span> newEndVnode = newChildren[newEndIdx]</span><br><span class="line">     <span class="comment">//如果头尾部找不到复用的节点，只能拿新的一组子节点中的头部节点去旧的一组子节点中寻找</span></span><br><span class="line">     <span class="keyword">while</span>(oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">        <span class="comment">//如果旧结点数组中头部结点或者尾部结点为undefined，说明已经被处理过了，直接跳到下一个位置</span></span><br><span class="line">        <span class="keyword">if</span>(!oldStartVnode) &#123;</span><br><span class="line">            oldStartVnode = oldChildren[++oldStartIdx]</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!oldEndVnode)&#123;</span><br><span class="line">            oldEndVnode = oldChildren[--oldEndIdx]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(oldStartVnode.key === newStartVnode.key)&#123;</span><br><span class="line">            patch(oldStartVnode,newStartVnode,container)</span><br><span class="line">            <span class="comment">//更新相关索引</span></span><br><span class="line">            oldStartVnode = oldChildren[++oldStartIdx]</span><br><span class="line">            newStartVnode = newChildren[++newStartIdx]</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(oldEndVnode.key === newEndVnode.key)&#123;</span><br><span class="line">            patch(oldEndVnode,newEndVnode,container)</span><br><span class="line">            oldEndVnode = oldChildren[--oldEndIdx]</span><br><span class="line">            newEndVnode = newChildren[--newEndIdx]</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(oldStartVnode.key === newEndVnode.key)&#123;</span><br><span class="line">            patch(oldStartVnode,newEndVnode,container)</span><br><span class="line">            insert(oldStartVnode.el,container,newEndVnode.el.nextSibling)</span><br><span class="line">            oldStartVnode = oldChildren[++oldStartIdx]</span><br><span class="line">            newEndVnode = newChildren[--newEndIdx]</span><br><span class="line">    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(oldEndVnode.key === newStartVnode.key)&#123;</span><br><span class="line">            patch(oldEndVnode,newStartVnode,container)</span><br><span class="line">            insert(oldEndVnode.el,container,newStartVnode)</span><br><span class="line">            oldEndVnode = oldChildren[--oldEndIdx]</span><br><span class="line">            newStartVnode = newChildren[++newStartIdx]</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//遍历旧的一组子节点，试图寻找与newStartVnode拥有相同key的节点</span></span><br><span class="line">            <span class="comment">//idxInOld就是新的一组子节点的头部节点在旧的一组子节点中的索引</span></span><br><span class="line">            <span class="keyword">const</span> idxInOld = oldChildren.findIndex(</span><br><span class="line">                <span class="function"><span class="params">node</span>=&gt;</span>node.key===newStartVnode.key</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">//idxInOld大于0说明·找到了可以复用的结点，并且需要将其对应的真实DOM移动到头部</span></span><br><span class="line">            <span class="keyword">if</span>(idxInOld &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//idxInOld位置对应的vnode就是需要移动的结点</span></span><br><span class="line">                <span class="keyword">const</span> vnodeToMove = oldChildren[idxInOld]</span><br><span class="line">                patch(vnodeToMove,newStartVnode,container)</span><br><span class="line">                <span class="comment">//将vnodeToMove移动到头部结点oldStartVnode.el之前</span></span><br><span class="line">                insert(vnodeToMove.el,container,oldStartVnode.el)</span><br><span class="line">                <span class="comment">//由于位置idxInOld处的结点所对应的真实DOM已经移动到了别处，因此将其设置为undefined</span></span><br><span class="line">                oldChildren[idxInOld] = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//将newStartVnode作为新节点挂载到头部，使用当前头部结点oldStartVnode.el作为锚点</span></span><br><span class="line">                patch(<span class="literal">null</span>,newStartVnode,container,oldStartVnode.el)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新newStartIdx</span></span><br><span class="line">            newStartVnode = newChildren[++newStartIdx]</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果oldStartIdx已经大于oldEndIdx，但是newStartIdx&lt;=newEndIdx,说明新节点中还有元素未被挂载,需要挂载它们</span></span><br><span class="line">    <span class="keyword">if</span>(oldEndIdx &lt; oldStartIdx &amp;&amp; newStartIdx &lt;= newEndIdx)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = newStartIdx; i&lt;=newEndIdx ; i++)&#123;</span><br><span class="line">            patch(<span class="literal">null</span>,newChildren[i],container,oldStartVnode.el)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果newStartIdx已经大于newEndIdx,而oldStartIdx小于等于newEndIdx,则旧的结点中有结点需要移除</span></span><br><span class="line">    <span class="keyword">if</span>(newEndIdx &lt; newStartIdx &amp;&amp; oldStartIdx&lt;=oldEndIdx) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=oldStartIdx;i&lt;oldEndIdx;i++)&#123;</span><br><span class="line">            unmount(oldChildren[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">el,parent,anchor=<span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">    parent.insertBefore(el,anchor)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue3快速diff算法</p><p>在实测中性能最优，它借鉴了文本Diff中的预处理思路，先处理新旧两组结点中相同的前置结点和相同的后置结点，当前前置结点和后置结点全部处理完毕后，如果无法简单地通过挂载新节点或者卸载已经不存在的结点来完成更新，则需要根据结点的索引关系，构造一个最长递增子序列，最长递增子序列所指向的结点即为不需要移动的结点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchKeyedChildren</span>(<span class="params">n1,n2,container</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//更新相同的前置结点</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> oldVnode = oldChildren[j]</span><br><span class="line">    <span class="keyword">let</span> newVnode = newChildren[j]</span><br><span class="line">    <span class="keyword">while</span>(oldVnode.key === newVnode.key) &#123;</span><br><span class="line">        patch(oldVnode,newVnode,container)</span><br><span class="line">        j++</span><br><span class="line">        oldVnode = oldChildren[j]</span><br><span class="line">        newVnode = newChildren[j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更细相同的后置结点</span></span><br><span class="line">    <span class="comment">//索引oldEnd指向旧的一组子节点的最后一个结点</span></span><br><span class="line">    <span class="keyword">let</span> oldEnd = oldChildren.length-<span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> newEnd = newChildren.length-<span class="number">1</span></span><br><span class="line">    oldVnode = oldChildren[oldEnd]</span><br><span class="line">    newVnode = newChildren[newEnd]</span><br><span class="line">    <span class="comment">//while循环从后向前遍历，直到遇到拥有不同key值的结点为止</span></span><br><span class="line">    <span class="keyword">while</span>(oldVnode.key === newVnode.key)&#123;</span><br><span class="line">        patch(oldVnode,newVnode,container)</span><br><span class="line">        oldEnd--;</span><br><span class="line">        newEnd--;</span><br><span class="line">        oldVnode=oldChildren[oldEnd]</span><br><span class="line">        newVnode=newChildren[newEnd]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//预处理完毕，如果j&gt;oldEnd并且j&lt;=newEnd,说明从j到newEnd之间的结点应该作为新节点插入</span></span><br><span class="line">    <span class="keyword">if</span>(j&gt;oldEnd &amp;&amp; j&lt;=newEnd) &#123;</span><br><span class="line">        <span class="comment">//锚点索引</span></span><br><span class="line">        <span class="keyword">const</span> anchorIndex = newEnd+<span class="number">1</span></span><br><span class="line">        <span class="comment">//锚点元素</span></span><br><span class="line">        <span class="keyword">const</span> anchor = anchorIndex &lt; newChildren.length ? newChildren[anchorIndex].el :<span class="literal">null</span></span><br><span class="line">        <span class="comment">//挂载新节点</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;newEnd)&#123;</span><br><span class="line">            patch(<span class="literal">null</span>,newChildren[j++],container,anchor)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;newEnd&amp;&amp;j&lt;=oldEnd)&#123;</span><br><span class="line">        <span class="comment">//j到oldEnd之间的结点应该被卸载</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=oldEnd)&#123;</span><br><span class="line">            unmount(oldChildren[j++])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//构造source数组，用来存储新的一组子节点在旧子节点中的位置索引,后面用它来计算最长递增子序列</span></span><br><span class="line">        <span class="keyword">const</span> count = newEnd -j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> source =newArray(count)</span><br><span class="line">        source.fill(-<span class="number">1</span>)</span><br><span class="line">        <span class="comment">//新增pos和move用来判断结点是否需要移动</span></span><br><span class="line">        <span class="keyword">let</span> move =<span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> pos =<span class="number">0</span></span><br><span class="line">        <span class="comment">//oldStart和newStart分别为起始索引，即j</span></span><br><span class="line">        <span class="keyword">const</span> oldStart = j</span><br><span class="line">        <span class="keyword">const</span> newStart = j</span><br><span class="line">        <span class="comment">//构建索引表,存储新子节点数组中键值和索引</span></span><br><span class="line">        <span class="keyword">const</span> keyIndex = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = newStart;i&lt;=newEnd;i++)&#123;</span><br><span class="line">            keyIndex[newChildren[i].key]=i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新增patched代表更新过的结点数量</span></span><br><span class="line">        <span class="keyword">let</span> patched = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历旧的一组子节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = oldStart;i&lt;=oldEnd;i++)&#123;</span><br><span class="line">            <span class="keyword">const</span> oldVnode = oldChildren[i]</span><br><span class="line">          <span class="comment">//更新过的结点数量小于等于需要更新的结点数量，执行更新</span></span><br><span class="line">            <span class="keyword">if</span>(patched&lt;=count)&#123;</span><br><span class="line">                <span class="comment">//通过索引表快速找到新子节点中和旧子节点有相同key的结点位置</span></span><br><span class="line">                <span class="keyword">const</span> k= keyIndex[oldVnode.key]</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> key !== <span class="string">&quot;undefined&quot;</span>)&#123;</span><br><span class="line">                    newVnode = newChildren[k]</span><br><span class="line">                    <span class="comment">//调用patch函数完成更新</span></span><br><span class="line">                    patch(oldVnode,newVnode,container)</span><br><span class="line">                    patched++;</span><br><span class="line">                    <span class="comment">//填充source数组</span></span><br><span class="line">                    source[k-newStart]=i</span><br><span class="line">                    <span class="keyword">if</span>(k&lt;pos)&#123;</span><br><span class="line">                        move=<span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        pos=k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    unmount(oldVnode)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//更新过的结点数量大于需要更新的结点数量，则卸载多于的结点</span></span><br><span class="line">                unmount(oldVnode)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(move)&#123;</span><br><span class="line">            <span class="comment">//如果move为真，则需要进行DOM移动操作</span></span><br><span class="line">            <span class="keyword">const</span> seq = lis(sources)<span class="comment">//[0,1]计算最长递增子序列的索引信息</span></span><br><span class="line">            <span class="comment">//s指向最长递增子序列的最后一个元素</span></span><br><span class="line">            <span class="keyword">let</span> s=seq.length-<span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> i=count-<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span>(i;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(source[i]===-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//说明索引为i的结点为全新的结点，挂载</span></span><br><span class="line">                    <span class="comment">//该结点在新子节点中的索引</span></span><br><span class="line">                    <span class="keyword">const</span> pos=i+newStart</span><br><span class="line">                    <span class="keyword">const</span> newVnode = newChildren[pos]</span><br><span class="line">                    <span class="comment">//该结点的下一个结点的位置索引</span></span><br><span class="line">                    <span class="keyword">const</span> newPos=pos+<span class="number">1</span></span><br><span class="line">                    <span class="comment">//锚点</span></span><br><span class="line">                    <span class="keyword">const</span> anchor = newPos &lt;newChildren.length?newChildren[newPos].el:<span class="literal">null</span></span><br><span class="line">                    <span class="comment">//挂载</span></span><br><span class="line">                    patch(<span class="literal">null</span>,newVnode,container,anchor)</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i!==seq[s])&#123;<span class="comment">//说明节点需要移动</span></span><br><span class="line">                    <span class="comment">//该结点在新子节点中的索引</span></span><br><span class="line">                    <span class="keyword">const</span> pos=i+newStart</span><br><span class="line">                    <span class="keyword">const</span> newVnode = newChildren[pos]</span><br><span class="line">                    <span class="comment">//该结点的下一个结点的位置索引</span></span><br><span class="line">                    <span class="keyword">const</span> newPos=pos+<span class="number">1</span></span><br><span class="line">                    <span class="comment">//锚点</span></span><br><span class="line">                    <span class="keyword">const</span> anchor = newPos &lt;newChildren.length?newChildren[newPos].el:<span class="literal">null</span></span><br><span class="line">                    <span class="comment">//移动</span></span><br><span class="line">                    insert(newVnode.el,container,anchor)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//当i===seq[j],说明该位置结点不需要移动,让s指向下一个位置</span></span><br><span class="line">                    s--</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lis</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.length,</span><br><span class="line">      res = [],</span><br><span class="line">      dp = <span class="keyword">new</span> <span class="built_in">Array</span>(len).fill(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 存默认index</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      res.push([i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">let</span> cur = arr[i],</span><br><span class="line">        nextIndex = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="comment">// 如果为-1 直接跳过，因为-1代表的是新节点，不需要进行排序</span></span><br><span class="line">      <span class="keyword">if</span> (cur === -<span class="number">1</span>) <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> next = arr[j]</span><br><span class="line">        <span class="comment">// 满足递增条件</span></span><br><span class="line">        <span class="keyword">if</span> (cur &lt; next) &#123;</span><br><span class="line">          <span class="keyword">let</span> max = dp[j] + <span class="number">1</span></span><br><span class="line">          <span class="comment">// 当前长度是否比原本的长度要大</span></span><br><span class="line">          <span class="keyword">if</span> (max &gt; dp[i]) &#123;</span><br><span class="line">            dp[i] = max</span><br><span class="line">            nextIndex = j</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 记录满足条件的值，对应在数组中的index</span></span><br><span class="line">      <span class="keyword">if</span> (nextIndex !== <span class="literal">undefined</span>) res[i].push(...res[nextIndex])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> index = dp.reduce(<span class="function">(<span class="params">prev, cur, i, arr</span>) =&gt;</span> cur &gt; arr[prev] ? i : prev, dp.length - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 返回最长的递增子序列的index</span></span><br><span class="line">    <span class="keyword">return</span> result[index]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue2中使用双端diff算法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建react组件库</title>
    <link href="https://coloey.github.io/2022/09/11/%E6%90%AD%E5%BB%BAreact%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <id>https://coloey.github.io/2022/09/11/%E6%90%AD%E5%BB%BAreact%E7%BB%84%E4%BB%B6%E5%BA%93/</id>
    <published>2022-09-11T08:37:20.000Z</published>
    <updated>2022-09-11T12:32:35.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>搭建属于自己的组件库，方便在项目中导入组件，避免重复造轮子。</p><h1 id="搭建组件库的主要步骤："><a href="#搭建组件库的主要步骤：" class="headerlink" title="搭建组件库的主要步骤："></a>搭建组件库的主要步骤：</h1><ul><li>项目初始化：使用eslint/commit lint/typeScript进行代码规范</li><li>文档编写：使用dumi1进行开发调试以及文档编写</li><li>打包阶段：输出umd/cjs/esm产物并支持按需加载</li><li>组件测试：使用jest库，@test-library/react相关生态进行组件测试</li><li>发布npm:编写脚本完成发布</li><li>部署文档站点：使用github pages以及github actions完成文档站点自动部署</li></ul><h1 id="技术栈："><a href="#技术栈：" class="headerlink" title="技术栈："></a>技术栈：</h1><p>组件编写：react,typescript</p><p>代码规范：eslint,prettier</p><p>打包编译：gulp,babel</p><p>文档编写：dumi</p><p>样式处理：less</p><h1 id="整个项目结构："><a href="#整个项目结构：" class="headerlink" title="整个项目结构："></a>整个项目结构：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">.github</span><br><span class="line">-- workflows</span><br><span class="line">     -- !gh-pages.yml//master触发push操作时则会自动站点部署</span><br><span class="line">doc-site//部署文档</span><br><span class="line">-- demos</span><br><span class="line">-- alert</span><br><span class="line">-- alert__index.md.chunk.css</span><br><span class="line">-- ...</span><br><span class="line">esm</span><br><span class="line">--alert</span><br><span class="line">-- __tests__</span><br><span class="line">-- index.test.js</span><br><span class="line">-- style</span><br><span class="line">            -- css.js</span><br><span class="line">            -- index.css</span><br><span class="line">            -- index.d.ts</span><br><span class="line">            -- index.js</span><br><span class="line">            -- index.less</span><br><span class="line">        -- index.d.ts</span><br><span class="line">        -- index.js</span><br><span class="line">lib</span><br><span class="line">--alert</span><br><span class="line">-- __tests__</span><br><span class="line">-- index.test.js</span><br><span class="line">-- style</span><br><span class="line">            -- css.js</span><br><span class="line">            -- index.css</span><br><span class="line">            -- index.d.ts</span><br><span class="line">            -- index.js</span><br><span class="line">            -- index.less</span><br><span class="line">        -- index.d.ts</span><br><span class="line">        -- index.js</span><br><span class="line">--node_modules</span><br><span class="line">--src//组件源码</span><br><span class="line">-- .umi</span><br><span class="line">--.umi-production</span><br><span class="line">--alert</span><br><span class="line">-- __tests__</span><br><span class="line">-- index.test.tsx</span><br><span class="line">--demo</span><br><span class="line">--basic.tsx</span><br><span class="line">-- style</span><br><span class="line">            -- index.css</span><br><span class="line">            -- index.ts</span><br><span class="line">            -- index.less</span><br><span class="line">        -- index.md</span><br><span class="line">        -- index.tsx</span><br><span class="line">--alert.js</span><br><span class="line">--.babelrc.js//用于编译代码</span><br><span class="line">--browerserslistrc//设置兼容浏览器</span><br><span class="line">--commitlintrc.js//规范commit message</span><br><span class="line">--.stylelintrc.js//规范样式代码</span><br><span class="line">--.umirc.ts</span><br><span class="line">--eslintrc.js//规范代码</span><br><span class="line">--gatsby-config.js</span><br><span class="line">--gulpfile.js//代码打包</span><br><span class="line">--jest.config.js//配置测试</span><br><span class="line">--prettierrc.js//规范代码格式</span><br><span class="line">--package.json</span><br><span class="line">--package.lock.json</span><br><span class="line">--tsconfig.build.json</span><br><span class="line">--tsconfig.json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="初始化项目："><a href="#初始化项目：" class="headerlink" title="初始化项目："></a>初始化项目：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir my-ui</span><br><span class="line">cd my-ui</span><br><span class="line">npm init --y</span><br><span class="line">mkdir src &amp;&amp; cd src &amp;&amp; touch index.ts<span class="comment">//新建源码文件以及入口文件</span></span><br></pre></td></tr></table></figure><h2 id="代码规范："><a href="#代码规范：" class="headerlink" title="代码规范："></a>代码规范：</h2><p>直接使用@umijs.fabric的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --dev @umi/fabric prettier</span><br></pre></td></tr></table></figure><p>.eslintrc.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="built_in">require</span>.resolve(<span class="string">&#x27;@umijs/fabric/dist/eslint&#x27;</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>.prettierrc.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fabric = <span class="built_in">require</span>(<span class="string">&#x27;@umijs/fabric&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...fabric.prettier,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>.stylelintrc.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="built_in">require</span>.resolve(<span class="string">&#x27;@umijs/fabric/dist/stylelint&#x27;</span>)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>关于eslint和prettier的配置：</strong></p><p>使用ESlint+Prettier规范React+TypeScript项目：<a href="https://zhuanlan.zhihu.com/p/62401626">https://zhuanlan.zhihu.com/p/62401626</a></p><p>代码规范检测需要用husky:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i husky lint-staged --dev</span><br></pre></td></tr></table></figure><p>commit message检测：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @commitlint/cli @commitlint/config-conventional commitizen cz-conventional-changelog --dev</span><br></pre></td></tr></table></figure><p>新增.commitlintrc.js写入一下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123; <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>] &#125;;</span><br></pre></td></tr></table></figure><p>package.json:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commit&quot;</span>: <span class="string">&quot;git-cz&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;src/**/*.ts?(x)&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">    <span class="string">&quot;git add&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;src/**/*.less&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;stylelint --syntax less --fix&quot;</span>,</span><br><span class="line">    <span class="string">&quot;git add&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;lint-staged&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;cz-conventional-changelog&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面使用npm run commit代替git commit生成规范的commit message,也可以手写，但是要符合规范</p><p>配置typeScript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript --dev</span><br></pre></td></tr></table></figure><p>新建tsconfig.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;declaration&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;declarationDir&quot;</span>: <span class="string">&quot;lib&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;src&quot;</span>, <span class="string">&quot;typings.d.ts&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写组件代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert</span><br><span class="line">    ├── index.tsx           # 源文件</span><br><span class="line">    └── style</span><br><span class="line">        ├── index.less      # 样式文件</span><br><span class="line">        └── index.ts        # 样式文件里为什么存在一个index.ts - 按需加载样式 管理样式依赖 后面章节会提到</span><br></pre></td></tr></table></figure><p>下载react相关依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom @types/react @types/react-dom --dev # 开发时依赖，宿主环境一定存在</span><br><span class="line"></span><br><span class="line">npm i prop-types            # 运行时依赖，宿主环境可能不存在 安装本组件库时一起安装</span><br></pre></td></tr></table></figure><h1 id="组件文档："><a href="#组件文档：" class="headerlink" title="组件文档："></a>组件文档：</h1><p>用dumi作为组件文档站点工具，并兼具开发调试功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i dumi serve --dev</span><br></pre></td></tr></table></figure><p>增加npm scripts到package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;dumi dev&quot;</span>, <span class="comment">// 启动开发环境 在文档站点中调试组件</span></span><br><span class="line">  <span class="string">&quot;build:site&quot;</span>: <span class="string">&quot;rimraf doc-site &amp;&amp; dumi build&quot;</span>, <span class="comment">// 构建文档站点 后续会部署到 github pages</span></span><br><span class="line">  <span class="string">&quot;preview:site&quot;</span>: <span class="string">&quot;npm run build:site &amp;&amp; serve doc-site&quot;</span> <span class="comment">// 本地预览构建后的文档站点</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>配置.umirc.ts配置文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;dumi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;My UI&#x27;</span>, <span class="comment">// 站点名称</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;site&#x27;</span>,</span><br><span class="line">  <span class="attr">outputPath</span>: <span class="string">&#x27;doc-site&#x27;</span>, <span class="comment">// 输出文件夹</span></span><br><span class="line">  <span class="attr">exportStatic</span>: &#123;&#125;, <span class="comment">// 后续会部署到 github pages 直接全部生成静态页面 不走前端路由</span></span><br><span class="line">  <span class="attr">dynamicImport</span>: &#123;&#125;, <span class="comment">// 拆包 站点过大时可以优化首屏加载速度</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首页配置：</p><p>docs/index.md:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My UI</span><br><span class="line">hero:</span><br><span class="line">  title: My UI</span><br><span class="line">  desc: 文档站点基于 dumi 生成</span><br><span class="line">  actions:</span><br><span class="line">    - text: 快速上手</span><br><span class="line">      link: /getting-started</span><br><span class="line">features:</span><br><span class="line">  - icon: https://gw.alipayobjects.com/zos/bmw-prod/881dc458-f20b-407b-947a-95104b5ec82b/k79dm8ih_w144_h144.png</span><br><span class="line">    title: 特性 1</span><br><span class="line">    desc: Balabala</span><br><span class="line">  - icon: https://gw.alipayobjects.com/zos/bmw-prod/d60657df-0822-4631-9d7c-e7a869c2f21c/k79dmz3q_w126_h126.png</span><br><span class="line">    title: 特性 2</span><br><span class="line">    desc: Balabala</span><br><span class="line">  - icon: https://gw.alipayobjects.com/zos/bmw-prod/d1ee0c6f-5aed-4a45-a507-339a4bfe076c/k7bjsocq_w144_h144.png</span><br><span class="line">    title: 特性 3</span><br><span class="line">    desc: Balabala</span><br><span class="line">footer: Open-source MIT Licensed | Copyright © 2020&lt;br /&gt;Powered by [dumi](https://d.umijs.org)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>可以参考dumi文档进行配置</p><p>index.md:</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- <span class="strong">__tests__</span></span><br><span class="line"><span class="code">-- index.test.js</span></span><br><span class="line"><span class="code">-- style</span></span><br><span class="line"><span class="code">           -- css.js</span></span><br><span class="line"><span class="code">           -- index.css</span></span><br><span class="line"><span class="code">           -- index.d.ts</span></span><br><span class="line"><span class="code">           -- index.js</span></span><br><span class="line"><span class="code">           -- index.less</span></span><br><span class="line"><span class="code">       -- index.d.ts</span></span><br><span class="line"><span class="code">       -- index.js</span></span><br></pre></td></tr></table></figure><h1 id="部署文档站点："><a href="#部署文档站点：" class="headerlink" title="部署文档站点："></a>部署文档站点：</h1><p>将文档部署到github pages</p><p>下载cross–env区分环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cross-env --dev</span><br></pre></td></tr></table></figure><p>package.json:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;preview:site&quot;</span>: <span class="string">&quot;cross-env SITE_BUILD_ENV=PREVIEW npm run build:site &amp;&amp; serve doc-site&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>.umirc.ts</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;dumi&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> base = <span class="string">&#x27;/my-react-components&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> publicPath = <span class="string">&#x27;/my-react-components/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(process.env.SITE_BUID_ENV === <span class="string">&#x27;PREVIEW&#x27;</span>)&#123;</span><br><span class="line">  base = <span class="literal">undefined</span>;</span><br><span class="line">  publicPath = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;My UI&#x27;</span>, <span class="comment">// 站点名称</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;site&#x27;</span>,</span><br><span class="line">  <span class="attr">outputPath</span>: <span class="string">&#x27;doc-site&#x27;</span>, <span class="comment">// 输出文件夹</span></span><br><span class="line">  <span class="attr">exportStatic</span>: &#123;&#125;, <span class="comment">// 后续会部署到 github pages 直接全部生成静态页面 不走前端路由</span></span><br><span class="line">  <span class="attr">dynamicImport</span>: &#123;&#125;, <span class="comment">// 拆包 站点过大时可以优化首屏加载速度</span></span><br><span class="line">  base,</span><br><span class="line">  publicPath,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下载gh-pages完成一键部署：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gh-pages --dev</span><br></pre></td></tr></table></figure><p>package.json:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;deploy:site&quot;</span>:<span class="string">&quot;npm run build:site &amp;&amp; gh-pages -d doc-site&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行npm run deploy:site后就能在${username}.github.io/${repo}看到自己的组件库站点</p><h2 id="使用Github-Actions自动触发部署："><a href="#使用Github-Actions自动触发部署：" class="headerlink" title="使用Github Actions自动触发部署："></a>使用Github Actions自动触发部署：</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">github</span> <span class="string">pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">window10</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build:site</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./doc-site</span></span><br></pre></td></tr></table></figure><h1 id="编译打包："><a href="#编译打包：" class="headerlink" title="编译打包："></a>编译打包：</h1><h2 id="1-导出类型声明文件："><a href="#1-导出类型声明文件：" class="headerlink" title="1.导出类型声明文件："></a>1.导出类型声明文件：</h2><p>先下载cpr,这样运行下面的npm run build:typs时会将lib的声明文件拷贝一份，并将文件夹重命名为esm,后面存放ES module形式的组件，这样做的原因是保证用户手动按需引入组件的时候可以获取自动提示</p><p>使用typescript编写的组件库，应该利用类型系统的好处，我们可以生成类型声明文件,并在package.json中定义入口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;typings&quot;</span>: <span class="string">&quot;lib/index.d.ts&quot;</span>, <span class="comment">// 定义类型入口文件</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build:types&quot;</span>: <span class="string">&quot;tsc -p tsconfig.build.json &amp;&amp; cpr lib esm&quot;</span> <span class="comment">// 执行tsc命令生成类型声明文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置tsconfig.build.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;./tsconfig.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123; <span class="attr">&quot;emitDeclarationOnly&quot;</span>: <span class="literal">true</span> &#125;, <span class="comment">// 只生成声明文件</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;**/__tests__/**&quot;</span>, <span class="string">&quot;**/demo/**&quot;</span>, <span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;lib&quot;</span>, <span class="string">&quot;esm&quot;</span>] <span class="comment">// 排除示例、测试以及打包好的文件夹</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行npm run build:types后根目录生成了lib文件夹（<code>tsconfig.json</code>中定义的<code>declarationDir</code>字段）以及<code>esm</code>文件夹（拷贝而来），目录结构与<code>src</code>文件夹保持一致，这样使用者引入npm包时，便能得到自动提示，也能复用相关组件的类型定义</p><p>接下来将ts(x)等文件处理成js文件，需要配置.babelrc.js因为我们需要输出commonjs module和es module,再者，考虑到样式处理及其按需加载，用gulp</p><p>配置目标环境：</p><p>为了避免转译浏览器原生支持多的语法，新建.browserslistrc文件，根据适配需求，写入支持浏览器范围，作用于@babel/preset-env</p><p>.browserslistrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;0.2%</span><br><span class="line">not dead</span><br><span class="line">not op_mini all</span><br></pre></td></tr></table></figure><p>babel配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/core @babel/preset-env @babel/preset-react @babel/preset-typescript @babel/plugin-proposal-<span class="class"><span class="keyword">class</span>-<span class="title">properties</span>  @<span class="title">babel</span>/<span class="title">plugin</span>-<span class="title">transform</span>-<span class="title">runtime</span>  @<span class="title">babel</span>/<span class="title">runtime</span>-<span class="title">corejs3</span> --<span class="title">dev</span></span></span><br></pre></td></tr></table></figure><p>.babelrc.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>, <span class="string">&#x27;@babel/typescript&#x27;</span>, <span class="string">&#x27;@babel/react&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>, <span class="string">&#x27;@babel/proposal-class-properties&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-导出ES-module和Common-js产物供使用者使用"><a href="#2-导出ES-module和Common-js产物供使用者使用" class="headerlink" title="2.导出ES module和Common js产物供使用者使用"></a>2.导出ES module和Common js产物供使用者使用</h2><p>先安装gulp相关依赖对代码进行合并优化和压缩</p><p>gulp官网：<a href="https://www.gulpjs.com.cn/docs/getting-started/creating-tasks/">https://www.gulpjs.com.cn/docs/getting-started/creating-tasks/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp gulp-babel --dev</span><br></pre></td></tr></table></figure><p>新建gulpfile.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&quot;gulp-babel&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">&quot;gulp-less&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&quot;gulp-autoprefixer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">&quot;gulp-cssnano&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> through2 = <span class="built_in">require</span>(<span class="string">&quot;through2&quot;</span>);</span><br><span class="line"><span class="comment">// 编译脚本文件</span></span><br><span class="line"><span class="comment">// @param &#123;string&#125; babelEnv babel环境变量</span></span><br><span class="line"><span class="comment">// @param &#123;string&#125; destDir 目标目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> paths = &#123;</span><br><span class="line">  <span class="attr">dest</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: <span class="string">&quot;lib&quot;</span>, <span class="comment">//commonjs文件存放的目录名，关注</span></span><br><span class="line">    <span class="attr">esm</span>: <span class="string">&quot;esm&quot;</span>, <span class="comment">//ES module文件存放的目录名，暂时不关心</span></span><br><span class="line">    <span class="attr">dist</span>: <span class="string">&quot;dist&quot;</span>, <span class="comment">//umd文件存放的目录名,暂时不关心</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">styles</span>: <span class="string">&quot;src/**/*.less&quot;</span>, <span class="comment">//样式文件路径</span></span><br><span class="line">  <span class="attr">scripts</span>: [<span class="string">&quot;src/**/*.&#123;ts,tsx&#125;&quot;</span>, <span class="string">&quot;!src/**/demo/*.&#123;ts,tsx&#125;&quot;</span>,<span class="string">&quot;!src/**/__tests__/*.&#123;ts,tsx&#125;&quot;</span>], <span class="comment">//脚本路径,glob详细https://www.gulpjs.com.cn/docs/getting-started/explaining-globs/</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//当前组件样式import &#x27;./index.less&#x27;=&gt;import &#x27;./index.css&#x27;</span></span><br><span class="line"><span class="comment">//依赖的其他组件样式 import &quot;../test-comp/style&quot;=&gt;import &quot;../test-comp/style/css.js&quot;</span></span><br><span class="line"><span class="comment">//依赖的其他组件样式 import &#x27;../test-comp/style/index.js&#x27;=&gt;import &#x27;../test-comp/style/css.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssInction</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> content</span><br><span class="line">    .replace(<span class="regexp">/\/style\/?&#x27;/g</span>, <span class="string">&quot;/style/css&#x27;&quot;</span>)</span><br><span class="line">    .replace(<span class="regexp">/\/style\/?&quot;/g</span>, <span class="string">&#x27;/style/css&quot;&#x27;</span>)</span><br><span class="line">    .replace(<span class="regexp">/\.less/g</span>, <span class="string">&quot;.css&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileScripts</span>(<span class="params">babelEnv, destDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; scripts &#125; = paths;</span><br><span class="line">  process.env.BABEL_ENV = babelEnv;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(scripts)</span><br><span class="line">    .pipe(babel()) <span class="comment">//使用gulp-babel处理</span></span><br><span class="line">    .pipe(</span><br><span class="line">      through2.obj(<span class="function"><span class="keyword">function</span> <span class="title">z</span>(<span class="params">chunk, encoding, next</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.push(chunk.clone());</span><br><span class="line">        <span class="comment">//找到style/index.js</span></span><br><span class="line">        <span class="keyword">if</span> (chunk.path.match(<span class="regexp">/(\/|\\)style(\/|\\)index\.js/</span>)) &#123;</span><br><span class="line">          <span class="keyword">const</span> content = chunk.contents.toString(encoding);</span><br><span class="line">          chunk.contents = Buffer.from(cssInction(content)); <span class="comment">//文件内容处理</span></span><br><span class="line">          chunk.path = chunk.path.replace(<span class="regexp">/index\.js/</span>, <span class="string">&quot;css.js&quot;</span>); <span class="comment">//文件重命名</span></span><br><span class="line">          <span class="built_in">this</span>.push(chunk); <span class="comment">//新增该文件</span></span><br><span class="line">          next();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(destDir)); <span class="comment">//输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileCJS</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dest &#125; = paths;</span><br><span class="line">  <span class="keyword">return</span> compileScripts(<span class="string">&quot;cjs&quot;</span>, dest.lib);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译esm</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileESM</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dest &#125; = paths;</span><br><span class="line">  <span class="keyword">return</span> compileScripts(<span class="string">&quot;esm&quot;</span>, dest.esm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝less文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyLess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(paths.styles)</span><br><span class="line">    .pipe(gulp.dest(paths.dest.lib))</span><br><span class="line">    .pipe(gulp.dest(paths.dest.esm));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成css文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">less2css</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(paths.styles)</span><br><span class="line">    .pipe(less()) <span class="comment">//处理less文件</span></span><br><span class="line">    .pipe(autoprefixer()) <span class="comment">//根据browserslistrc增加前缀</span></span><br><span class="line">    .pipe(cssnano(&#123; <span class="attr">zindex</span>: <span class="literal">false</span>, <span class="attr">reduceIdents</span>: <span class="literal">false</span> &#125;)) <span class="comment">//压缩</span></span><br><span class="line">    .pipe(gulp.dest(paths.dest.lib))</span><br><span class="line">    .pipe(gulp.dest(paths.dest.esm));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//串行执行编译脚本任务,避免环境变量影响</span></span><br><span class="line"><span class="keyword">const</span> buildScripts = gulp.series(compileCJS, compileESM);</span><br><span class="line"><span class="comment">//整体并行任务，后续加入样式处理 可以并行处理</span></span><br><span class="line"><span class="keyword">const</span> build = gulp.parallel(buildScripts, copyLess, less2css);</span><br><span class="line"><span class="built_in">exports</span>.build = build;</span><br><span class="line"><span class="built_in">exports</span>.default = build;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用环境变量区分esm和cjs:</p><p>.babelrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;@babel/env&#x27;</span>, <span class="string">&#x27;@babel/typescript&#x27;</span>, <span class="string">&#x27;@babel/react&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>, <span class="string">&#x27;@babel/proposal-class-properties&#x27;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">esm</span>: &#123;</span><br><span class="line">      <span class="attr">presets</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;@babel/env&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        [</span><br><span class="line">          <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">useESModules</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置package.json:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">- <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">+ <span class="string">&quot;main&quot;</span>: <span class="string">&quot;lib/index.js&quot;</span>,</span><br><span class="line">+ <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esm/index.js&quot;</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">+   <span class="string">&quot;clean&quot;</span>: <span class="string">&quot;rimraf lib esm dist&quot;</span>,</span><br><span class="line">+   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;npm run clean &amp;&amp; npm run build:types &amp;&amp; gulp&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>npm run build用来输出esm和lib两种方式的文件再使用gulp进行压缩优化</p><h2 id="处理样式文件："><a href="#处理样式文件：" class="headerlink" title="处理样式文件："></a>处理样式文件：</h2><p>这里有个问题就是如果使用者没有使用less预处理器，使用的是sass或者css原生方案，那现有方案就搞不定，有以下4中预选方案：</p><p>1 告知业务方增加less-loader，会导致业务方使用成本增加</p><p>2 打包出一份完整的css文件，全量引入，无法按需引入</p><p>3 css in js</p><p>4 提供一份style/css.js文件，引入组件css样式依赖，而不是less依赖，组件库底层抹平差异</p><p>讲下第4点，这也是antd使用的方案，在搭建组件库过程中需要在alert/style/index.js中引入less文件，是为了管理样式依赖，因为组件没有引入样式文件，需要使用者手动引入，假如：使用者引入<Button>,<Button>依赖了<Icon>,则需要手动引入调用组件的样式(<Button>)及其依赖的组件样式(<Icon>),遇到复杂的组件更麻烦，所以组件开发者提供了一份这样的js文件，使用者手动引入这个js文件，就能引入对应组件及其依赖组件的样式。</Icon></Button></Icon></Button></Button></p><p>为什么不直接 import ‘./index.less’，这样业务方可能不使用less,就需要配置less-loader,因此单独提供一份style/css.js文件，引入的是组件css样式文件依赖。</p><p>先将less文件生成对应的css文件，在gulpfile.js中增加less2css任务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成css文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">less2css</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(paths.styles)</span><br><span class="line">    .pipe(less()) <span class="comment">// 处理less文件</span></span><br><span class="line">    .pipe(autoprefixer()) <span class="comment">// 根据browserslistrc增加前缀</span></span><br><span class="line">    .pipe(cssnano(&#123; <span class="attr">zindex</span>: <span class="literal">false</span>, <span class="attr">reduceIdents</span>: <span class="literal">false</span> &#125;)) <span class="comment">// 压缩</span></span><br><span class="line">    .pipe(gulp.dest(paths.dest.lib))</span><br><span class="line">    .pipe(gulp.dest(paths.dest.esm));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> build = gulp.parallel(buildScripts, copyLess, less2css);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>执行npm run build,组件style目录下已经存在css文件，接下来我们需要一个alert/style/css.js来帮用户引入css文件：可以在gulpfile.js文件中处理scripts任务中截住style/index.js,生成style/css.js,并通过正则将引入的less文件后缀改为css</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i through2 --dev</span><br></pre></td></tr></table></figure><p>gulpfile.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssInjection</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> content</span><br><span class="line">    .replace(<span class="regexp">/\/style\/?&#x27;/g</span>, <span class="string">&quot;/style/css&#x27;&quot;</span>)</span><br><span class="line">    .replace(<span class="regexp">/\/style\/?&quot;/g</span>, <span class="string">&#x27;/style/css&quot;&#x27;</span>)</span><br><span class="line">    .replace(<span class="regexp">/\.less/g</span>, <span class="string">&#x27;.css&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译脚本文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>babelEnv babel环境变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>destDir 目标目录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileScripts</span>(<span class="params">babelEnv, destDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; scripts &#125; = paths;</span><br><span class="line">  process.env.BABEL_ENV = babelEnv;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .src(scripts)</span><br><span class="line">    .pipe(babel()) <span class="comment">// 使用gulp-babel处理</span></span><br><span class="line">    .pipe(</span><br><span class="line">      through2.obj(<span class="function"><span class="keyword">function</span> <span class="title">z</span>(<span class="params">file, encoding, next</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.push(file.clone());</span><br><span class="line">        <span class="comment">// 找到目标</span></span><br><span class="line">        <span class="keyword">if</span> (file.path.match(<span class="regexp">/(\/|\\)style(\/|\\)index\.js/</span>)) &#123;</span><br><span class="line">          <span class="keyword">const</span> content = file.contents.toString(encoding);</span><br><span class="line">          file.contents = Buffer.from(cssInjection(content)); <span class="comment">// 文件内容处理</span></span><br><span class="line">          file.path = file.path.replace(<span class="regexp">/index\.js/</span>, <span class="string">&#x27;css.js&#x27;</span>); <span class="comment">// 文件重命名</span></span><br><span class="line">          <span class="built_in">this</span>.push(file); <span class="comment">// 新增该文件</span></span><br><span class="line">          next();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    )</span><br><span class="line">    .pipe(gulp.dest(destDir));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>再次打包运行npm run build,组件style目录下生成css,js文件，引入的index.css是由less转换来的css文件</p><h2 id="按需加载："><a href="#按需加载：" class="headerlink" title="按需加载："></a>按需加载：</h2><p>在package,json中增加sideEffects属性，配合ES module达到tree shaking,将样式依赖文件标注为side effects，避免被误删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="string">&quot;sideEffects&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;dist/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;esm/**/style/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lib/**/style/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;*.less&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>使用以下方式引入，可以做到js部分按需加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Alert &#125; <span class="keyword">from</span> <span class="string">&#x27;happy-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;happy-ui/esm/alert/style&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;搭建属于自己的组件库，方便在项目中导入组件，避免重复造轮子。&lt;/p&gt;
&lt;h1 id=&quot;搭建组件库的主要步骤：&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="项目总结" scheme="https://coloey.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>gulp</title>
    <link href="https://coloey.github.io/2022/09/11/gulp/"/>
    <id>https://coloey.github.io/2022/09/11/gulp/</id>
    <published>2022-09-11T06:48:34.000Z</published>
    <updated>2022-09-11T06:58:09.448Z</updated>
    
    
    
    
    <category term="前端工程化" scheme="https://coloey.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue挂载子节点和元素属性</title>
    <link href="https://coloey.github.io/2022/09/07/Vue%E6%8C%82%E8%BD%BD%E5%AD%90%E8%8A%82%E7%82%B9%E5%92%8C%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7/"/>
    <id>https://coloey.github.io/2022/09/07/Vue%E6%8C%82%E8%BD%BD%E5%AD%90%E8%8A%82%E7%82%B9%E5%92%8C%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7/</id>
    <published>2022-09-07T08:54:46.000Z</published>
    <updated>2022-09-07T09:44:43.372Z</updated>
    
    <content type="html"><![CDATA[<p>渲染器的核心功能就是挂载与更新</p><p>首先，有一个虚拟dom的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="comment">//使用props描述一个元素得特性</span></span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">type</span>:<span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;        </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查vnode.props字段可以使用el[key]=vnode.props[key]或者el.setAttribute(key,vnode.props[key]),先来了解下HTML Attributes和DOM Properties的不同</p><h2 id="HTML-Attributes和DOM-Properties"><a href="#HTML-Attributes和DOM-Properties" class="headerlink" title="HTML Attributes和DOM Properties"></a>HTML Attributes和DOM Properties</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个DOM对象有很多属性，HTML Attributes在DOM对象上有与之同名的DOM Properties，例如id=”my-input”对应el.id,但DOM Properties并不与HTML Attributes的名字总是一样，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;foo&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>class=’foo’对应的DOM Properties是el.className,不是所有的HTML Adttributes都有和它对应的DOM Properties,例如aria-*类的HTML Attributes就没有和它对应的DOM Properties</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#x27;foo&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当用户修改了文本框的值，那么el.value的值时当前文本的值，而el.getAttribute(‘value’)仍然是之前的值</p><p>总之：<strong>HTML Attributes的作用是设置与之对应的DOM Properties的初始值</strong></p><h2 id="正确设置元素的属性"><a href="#正确设置元素的属性" class="headerlink" title="正确设置元素的属性"></a>正确设置元素的属性</h2><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&#x27;false&#x27;</span>&gt;</span></span><br><span class="line">    Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个HTML模板会被编译成vnode:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">disabled</span>:<span class="literal">false</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的props.disabled的值时空字符串，如果在渲染器中调用setAttribute函数设置属性，相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.setAttribute(<span class="string">&#x27;disabled&#x27;</span>,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>用户本意是不禁用，但是用setAttribute按钮仍然被禁用了，这是因为使用setAttribute函数设置的值总是会被字符串化，等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.setAttribute(<span class="string">&#x27;disabled&#x27;</span>,<span class="string">&#x27;false&#x27;</span>)</span><br></pre></td></tr></table></figure><p>el.disabled的值时布尔值，我们不关心值是什么，只要disabled属性存在，按钮就被禁用，不使用setAttribute,用el.disabled=false</p><p>但是如果是下面的模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line">    Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的vnode:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = &#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="string">&#x27;button&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">disabled</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用DOM Properties设置元素属性时，el.disabled=’’,类型转换会设置为el.disabled=false,用户本意是禁用按钮，则只能优先设置setAttribute,如果是空字符串则手动矫正</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountElement</span>(<span class="params">vnode,container</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> el = createElement(vnode.type)</span><br><span class="line">    <span class="comment">//省略children处理</span></span><br><span class="line">    <span class="keyword">if</span>(vnode.props)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> vnode.props)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key <span class="keyword">in</span> vnode.props)&#123;</span><br><span class="line">                 <span class="comment">//用in操作判断key是否存在对应的DOM Properties</span></span><br><span class="line">                <span class="keyword">if</span>(key <span class="keyword">in</span> el)&#123;</span><br><span class="line">                    <span class="comment">//获取该DOM Properties的类型</span></span><br><span class="line">                    <span class="keyword">const</span> type = el[key]</span><br><span class="line">                    <span class="keyword">const</span> value = vnode.props[key]</span><br><span class="line">                    <span class="keyword">if</span>(type === <span class="string">&#x27;boolean&#x27;</span> &amp;&amp; value ===<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">                        e[key]=<span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        e[key]=value</span><br><span class="line">                    &#125;                </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    el.setAttribute(key,vnode.props[key])</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    insert(el,container)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;渲染器的核心功能就是挂载与更新&lt;/p&gt;
&lt;p&gt;首先，有一个虚拟dom的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="Vue3源码" scheme="https://coloey.github.io/categories/Vue3%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端适配</title>
    <link href="https://coloey.github.io/2022/08/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>https://coloey.github.io/2022/08/30/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</id>
    <published>2022-08-30T01:27:34.000Z</published>
    <updated>2022-08-30T02:51:55.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>屏幕尺寸：以屏幕对角线的长度计算，单位是英寸</p><p>像素 pixel:显示屏画面上表示出来的最小单位</p><p>屏幕分辨率：一个屏幕具体由多少个像素点组成，单位是px</p><p>物理像素：在同一个设备上，他的物理像素是固定的，也就是厂家在生产显示设备时就决定的实际点的个数，对于不同设备物理像素点的大小是不一样的</p><p>逻辑像素（设备独立像素）：（与设备无关的逻辑像素，代表可以通过程序控制使用的虚拟像素）</p><p>设备像素比dpr:计算公式为：<code>DPR = 物理像素/逻辑像素</code></p><p>当设备像素比为1:1时，使用1（1×1）个设备像素显示1个CSS像素；</p><p>当设备像素比为2:1时，使用4（2×2）个设备像素显示1个CSS像素；</p><p>当设备像素比为3:1时，使用9（3×3）个设备像素显示1个CSS像素。</p><p>视口viewport:</p><p>viewport指的是视口，它是浏览器或者app中webview显示页面的区域，一般，PC端的视口指的是浏览器窗口区域，而移动端有三个视口：</p><p>layout viewport:布局视口</p><p>visual viewport:视觉视口</p><p>ideal viewport:理想视口</p><p>布局视口(layout viewport):</p><p>由浏览器提出的一种虚拟的布局视口，用来解决页面在收上显示的问题，这种视口可以通过<meta>标签设置viewport来改变，移动设备上的浏览器会把自己默认的viewport设为980px或者1024px，也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。</p><p>我们可以通过<code>document.documentElement.clientWidth</code>来获取布局视口大小</p><p>视觉视口（visual viewport）</p><p>它指的是浏览器的可视区域，也就是我们在移动端设备上能够看到的区域。默认与当前浏览器窗口大小相等，当用户对浏览器进行缩放时，不会改变布局视口的大小，但会改变视觉窗口的大小。</p><p>meta viewport</p><p>对于移动端页面，可以采用<code>&lt;meta&gt;</code>标签来配置视口大小和缩放等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;</span> /&gt;</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><ul><li><strong>width</strong>：该属性被用来控制视窗的宽度，可以将width设置为320这样确切的像素数，也可以设为device-width这样的关键字，表示设备的实际宽度，一般为了自适应布局，普遍的做法是将width设置为<code>device-width</code>。</li><li><strong>height</strong>：该属性被用来控制视窗的高度，可以将height设置为640这样确切的像素数，也可以设为<code>device-height</code>这样的关键字，表示设备的实际高度，一般不会设置视窗的高度，这样内容超出的话采用滚动方式浏览。</li><li><strong>initial-scale</strong>：该属性用于指定页面的初始缩放比例，可以配置<code>0.0～10</code>的数字，<strong>initial-scale=1表示不进行缩放，视窗刚好等于理想视窗</strong>，当大于1时表示将视窗进行放大，小于1时表示缩小。这里只表示初始视窗缩放值，用户也可以自己进行缩放，例如双指拖动手势缩放或者双击手势放大。<strong>安卓设备上的initial-scale默认值：</strong> 无默认值，一定要设置，这个属性才会起作用。在iphone和ipad上，无论你给viewport设的宽的是多少，如果<strong>没有指定默认的缩放值</strong>，则iphone和ipad会<strong>自动计算这个缩放值</strong>，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的。</li><li><strong>maximum-scale</strong>：该属性表示用户能够手动放大的最大比例，可以配置<code>0.0～10</code>的数字。</li><li><strong>minimum-scale</strong>：该属性类似maximum-scale，用来指定页面缩小的最小比例。通常情况下，不会定义该属性的值，页面太小将难以浏览。</li><li><strong>user-scalable</strong>：该属性表示是否允许用户手动进行缩放，可配置<code>no或者yes</code>。当配置成no时，用户将不能通过手势操作的方式对页面进行缩放。</li></ul><p>这里需要注意的是<code>viewport</code>只对移动端浏览器有效，对PC端浏览器是无效的。</p><h1 id="rem适配："><a href="#rem适配：" class="headerlink" title="rem适配："></a>rem适配：</h1><p>是CSS3新增的一个相对单位，是指相对于根元素的字体大小的单位。</p><ul><li>将屏幕宽度分为10份，设置html的font-size为window.innerWidth/10px</li><li>1rem=window.innerWidth/10px</li><li>根据UI的px计算相应rem:比如盒子宽320px，（320px/window.innerWidth)*10=5.333rem</li><li>将rem转为不同的px尺寸在不同手机上呈现：5.333rem*window.innerWidth/10px</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给html标签添加font-size</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].style.fontSize = <span class="built_in">window</span>.innerWidth / <span class="number">10</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用Sass定义一个ps2rem函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@funtion</span> px2rem(<span class="variable">$px</span>)&#123;</span><br><span class="line">    <span class="variable">$rem</span>: <span class="number">75px</span>;<span class="comment">//750/10</span></span><br><span class="line">    <span class="keyword">@return</span> (<span class="variable">$px</span>/<span class="variable">$rem</span>)+rem</span><br><span class="line">&#125;</span><br><span class="line">.box1 &#123;</span><br><span class="line">    <span class="attribute">width</span>: px2rem(<span class="number">320px</span>);<span class="comment">//(320/750)*10=4.266rem</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vw-vh适配："><a href="#vw-vh适配：" class="headerlink" title="vw,vh适配："></a>vw,vh适配：</h1><p><code>vw（Viewport Width）</code>、<code>vh(Viewport Height)</code>是基于视图窗口的单位，是css3中提出来的，基于视图窗口的单位。</p><p><code>vh、vw</code>方案即将视觉视口宽度 <code>window.innerWidth</code>和视觉视口高度 <code>window.innerHeight</code> 等分为 100 份。</p><p>上面的<code>flexible</code>方案就是模仿这种方案，因为早些时候<code>vw</code>还没有得到很好的兼容。</p><ul><li><code>vw(Viewport&#39;s width)</code>：<code>1vw</code>等于视觉视口的<code>1%</code></li><li><code>vh(Viewport&#39;s height)</code> :<code>1vh</code> 为视觉视口高度的<code>1%</code></li><li><code>vmin</code> : <code>vw</code> 和 <code>vh</code> 中的较小值</li><li><code>vmax</code> : 选取 <code>vw</code> 和 <code>vh</code> 中的较大值</li></ul><p>如果按视觉视口为<code>375px</code>，那么<code>1vw = 3.75px</code>，这时<code>UI</code>给定一个元素的宽为<code>75px</code>（设备独立像素），我们只需要将它设置为<code>75 / 3.75 = 20vw</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@device-width:</span> <span class="number">375</span></span><br><span class="line"><span class="variable">@vw</span>: (<span class="number">100vw</span>/device-<span class="attribute">width</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;songyao&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; username &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      了解脚手架及脚手架指令请移步个人博客&lt;br&gt;</span><br><span class="line">      check out the</span><br><span class="line">      &lt;a href=&quot;http://47.100.126.169/zmengBlog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;逐梦博客&lt;/a&gt;.</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;微信公众号：&lt;span class=&quot;wx_name&quot;&gt;前端南玖&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;songyao&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            username: &#x27;songyao-cli(vue 模板)&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">.songyao&#123;</span><br><span class="line">    h1&#123;</span><br><span class="line">       </span><br><span class="line">        font-size: 24*@vw;</span><br><span class="line">    &#125;</span><br><span class="line">    p&#123;</span><br><span class="line">       </span><br><span class="line">        font-size: 16*@vw;</span><br><span class="line">    &#125;</span><br><span class="line">   .wx_name&#123;</span><br><span class="line">    color:brown;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="viewport和px"><a href="#viewport和px" class="headerlink" title="viewport和px"></a>viewport和px</h1><p>这种方案可以让我们在开发时不用关注设备屏幕尺寸的差异，直接按照设计稿上的标注进行开发，也无需单位的换算，直接用px。HTML 的 head 标签里加入 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=&#123;设计稿宽度&#125;, initial-scale=&#123;屏幕逻辑像素宽度/设计稿宽度&#125;&quot; &gt;</code> 。</p><p>假如UI给我们提供的设计稿宽度时375px，我们则需要将页面的viewport的width设为375，然后再根据设备的逻辑像素将页面进行整体放缩。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initViewport</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> width = <span class="number">375</span>;  <span class="comment">// 设计稿宽度</span></span><br><span class="line">    <span class="keyword">const</span> scale = <span class="built_in">window</span>.innerWidth / width</span><br><span class="line">    <span class="comment">// console.log(&#x27;scale&#x27;, scale)</span></span><br><span class="line">    <span class="keyword">let</span> meta = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;meta[name=viewport]&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">`width=<span class="subst">$&#123;width&#125;</span>, init-scale=<span class="subst">$&#123;scale&#125;</span>, user-scalable=no`</span></span><br><span class="line">    <span class="keyword">if</span>(!meta) &#123;</span><br><span class="line">        meta = <span class="built_in">document</span>.createElement(<span class="string">&#x27;meta&#x27;</span>)</span><br><span class="line">        meta.setAttribute(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;viewport&#x27;</span>)</span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(meta)</span><br><span class="line">    &#125;</span><br><span class="line">    meta.setAttribute(<span class="string">&#x27;content&#x27;</span>, content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>rem:</p><ul><li>适配原理复杂</li><li>需要使用js</li><li>设计稿标注px换算到css的rem计算简单</li><li>方案灵活，即能实现整体缩放，又能实现局部不缩放</li></ul><p>vw:</p><ul><li>适配原理简单</li><li>不需要使用js</li><li>设计稿标注的px换算为css的vw计算复杂</li></ul><p>viewport+px:</p><ul><li>适配原理简单</li><li>需要使用js</li><li>直接使用设计稿标注无需换算</li><li>方案死板，只能实现页面级别肢体缩放</li></ul><p>参考：<a href="https://juejin.cn/post/7085931616136069156#heading-19">https://juejin.cn/post/7085931616136069156#heading-19</a></p><p><a href="https://juejin.cn/post/6844903590968950797#heading-7">https://juejin.cn/post/6844903590968950797#heading-7</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h1&gt;&lt;p&gt;屏幕尺寸：以屏幕对角线的长度计算，单位是英寸&lt;/p&gt;
&lt;p&gt;像素 pixel:显示屏画面上表示出来的最小单位&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://coloey.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>职责链模式</title>
    <link href="https://coloey.github.io/2022/08/27/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/08/27/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-27T15:41:31.000Z</published>
    <updated>2022-08-27T15:50:29.658Z</updated>
    
    <content type="html"><![CDATA[<p>职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间得到耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p><h1 id="灵活可拆分的职责链结点"><a href="#灵活可拆分的职责链结点" class="headerlink" title="灵活可拆分的职责链结点"></a>灵活可拆分的职责链结点</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay===<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;500元定金，100元优惠&#x27;</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&#x27;nextSuccessor&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;200元定金，50元优惠&#x27;</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&#x27;nextSuccessor&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> orderNormal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(stock&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;普通购买，无优惠&#x27;</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;库存不足&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> Chain = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">       <span class="built_in">this</span>.fn = fn;</span><br><span class="line">       <span class="built_in">this</span>.successor = <span class="literal">null</span></span><br><span class="line">   &#125;</span><br><span class="line">   Chain.prototype.setNextSuccessor = <span class="function"><span class="keyword">function</span>(<span class="params">successor</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>.successor = successor</span><br><span class="line">   &#125;</span><br><span class="line">   Chain.prototype.passResquest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">let</span> ret = <span class="built_in">this</span>.fn.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">       <span class="comment">//console.log(ret) </span></span><br><span class="line">       <span class="keyword">if</span>(ret === <span class="string">&#x27;nextSuccessor&#x27;</span>)&#123;            </span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.successor &amp;&amp; <span class="built_in">this</span>.successor.passResquest.apply(<span class="built_in">this</span>.successor,<span class="built_in">arguments</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ret</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">let</span> chainOrder500 = <span class="keyword">new</span> Chain(order500)<span class="comment">//500元定金，100元优惠</span></span><br><span class="line">   <span class="keyword">let</span> chainOrder200 = <span class="keyword">new</span> Chain(order200)</span><br><span class="line">   <span class="keyword">let</span> chainOrderNormal = <span class="keyword">new</span> Chain(orderNormal)</span><br><span class="line">   chainOrder500.setNextSuccessor(chainOrder200)</span><br><span class="line">   chainOrder200.setNextSuccessor(chainOrderNormal)</span><br><span class="line">   chainOrder500.passResquest(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>)<span class="comment">//500元定金，100元优惠</span></span><br><span class="line">   chainOrder500.passResquest(<span class="number">2</span>,<span class="literal">true</span>,<span class="number">500</span>)<span class="comment">//走nextSuccessor,200元定金，50元优惠</span></span><br><span class="line">   chainOrder500.passResquest(<span class="number">3</span>,<span class="literal">true</span>,<span class="number">500</span>)<span class="comment">//继续nextSuccessor,普通购买，无优惠</span></span><br><span class="line">   chainOrder500.passResquest(<span class="number">1</span>,<span class="literal">false</span>,<span class="number">0</span>)<span class="comment">//一直nextSuccessor到库存不足</span></span><br></pre></td></tr></table></figure><p>当要加入一个结点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> order300 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">chainOrder300 = <span class="keyword">new</span> Chain(order300)</span><br><span class="line">chainOrder500.setNextSuccessor(chainOrder300)</span><br><span class="line">chainOrder300.setNextSuccessor(chainOrder200)</span><br></pre></td></tr></table></figure><h1 id="AOP模式实现职责链："><a href="#AOP模式实现职责链：" class="headerlink" title="AOP模式实现职责链："></a>AOP模式实现职责链：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> order500 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(orderType === <span class="number">1</span> &amp;&amp; pay===<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;500元定金，100元优惠&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;nextSuccessor&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> order200 = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;200元定金，50元优惠&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;nextSuccessor&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> orderNormal = <span class="function"><span class="keyword">function</span>(<span class="params">orderType,pay,stock</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stock&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;普通购买，无优惠&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;库存不足&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> ret = self.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">            <span class="keyword">if</span>(ret === <span class="string">&#x27;nextSuccessor&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> order = order500.after(order200).after(orderNormal)</span><br><span class="line">    order(<span class="number">1</span>,<span class="literal">true</span>,<span class="number">500</span>)</span><br><span class="line">    order(<span class="number">2</span>,<span class="literal">true</span>,<span class="number">500</span>)</span><br><span class="line">    order(<span class="number">1</span>,<span class="literal">false</span>,<span class="number">500</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;职责链模式：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间得到耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止&lt;/p&gt;
&lt;h1 id=&quot;灵活可拆分的职责链结点&quot;&gt;&lt;a href=&quot;#灵活可拆分的职责链结点&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="https://coloey.github.io/2022/08/26/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/08/26/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-26T07:12:38.000Z</published>
    <updated>2022-08-26T08:29:23.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令模式的应用场景："><a href="#命令模式的应用场景：" class="headerlink" title="命令模式的应用场景："></a>命令模式的应用场景：</h1><p>有时候向某些对象发送请求，但是不知道请求接收者和发送者是谁，也不知请求操作是什么，此时用一种松耦合的方式来设计程序，使得发送者和接收者能够消除耦合关系</p><h1 id="面向对象形式："><a href="#面向对象形式：" class="headerlink" title="面向对象形式："></a>面向对象形式：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button1&quot;</span>&gt;</span>点击按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button1&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//安装命令的函数</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button,command</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                command.execute()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//命令接收者</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> MenuBar = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">refresh</span> :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">console</span>.log(<span class="string">&quot;刷新菜单目录&quot;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//command对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.receiver=receiver</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        RefreshMenuBarCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="built_in">this</span>.receiver.refresh()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//命令接收者接传入到command对象，把command对象安装到button上</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">let</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        setCommand(button1,refreshMenuBarCommand)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="闭包形式"><a href="#闭包形式" class="headerlink" title="闭包形式"></a>闭包形式</h1><p>可以使用<strong>闭包的命令模式</strong>，将命令接收者封闭在闭包产生的环境中，执行命令的操作更简单，仅仅是执行回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;button1&#x27;</span>)</span><br><span class="line">      <span class="comment">//安装命令的函数</span></span><br><span class="line">      <span class="keyword">let</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button,command</span>)</span>&#123;</span><br><span class="line">          button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              command.execute()</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//命令接收者</span></span><br><span class="line">      <span class="keyword">let</span> MenuBar = &#123;</span><br><span class="line">          <span class="attr">refresh</span> :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&quot;刷新菜单目录&quot;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//command对象</span></span><br><span class="line">      <span class="keyword">let</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> receiver.refresh()</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//命令接收者传入到command对象，把command对象安装到button上</span></span><br><span class="line">      <span class="keyword">let</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar)</span><br><span class="line">      setCommand(button1,refreshMenuBarCommand)</span><br></pre></td></tr></table></figure><p>使用命令模式可以方便给对象增加撤销命令操作，撤销命令是执行命令的反向操作,文本编辑器的Ctrl+Z和围棋中的悔棋都是撤销命令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;background: #000;width:50px;height:50px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pos&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;moveBtn&quot;</span>&gt;</span>开始移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;cancleBtn&quot;</span>&gt;</span>撤销命令<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ball&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pos = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;pos&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> moveBtn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;moveBtn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> cancleBtn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;cancleBtn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> moveCommand;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> MoveCommand = <span class="function"><span class="keyword">function</span> (<span class="params">receiver,pos</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.receiver = receiver;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.pos = pos;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.oldPos=<span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        MoveCommand.prototype.excute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.receiver.start(<span class="string">&#x27;left&#x27;</span>,<span class="built_in">this</span>.pos,<span class="number">1000</span>,<span class="string">&#x27;strongEaseout&#x27;</span>)</span></span><br><span class="line"><span class="javascript">            oldPos = <span class="built_in">this</span>.receiver.dom.getBoundingClientRec()[<span class="built_in">this</span>.receiver.propertyName]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//执行反向操作</span></span></span><br><span class="line"><span class="javascript">        MoveCommand.prototype.undo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.receiver.start(<span class="string">&#x27;left&#x27;</span>,<span class="built_in">this</span>.oldPos,<span class="number">1000</span>,<span class="string">&#x27;strongEaseout&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        moveBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> animate = <span class="keyword">new</span> Animate(ball)</span></span><br><span class="line"><span class="javascript">            moveCommand = <span class="keyword">new</span> MoveCommand(animate,pos.value)</span></span><br><span class="line"><span class="javascript">            moveCommand.excute()   </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        cancleBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            moveCommand.undo()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h1><p>是一组命令的集合，通过执行宏命令可以执行一批命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quitCommand = &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;退出&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> loginCommand =&#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;登录&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">commandList</span>:[],</span><br><span class="line">        <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.commandList.push(command)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">execute</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;command;command = <span class="built_in">this</span>.commandList[i])&#123;</span><br><span class="line">                command.execute()</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> macroCommand = <span class="keyword">new</span> MacroCommand()</span><br><span class="line">macroCommand.add(quitCommand)</span><br><span class="line">macroCommand.add(loginCommand)</span><br><span class="line">macroCommand.execute()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一般，命令模式都会在command命令对象中保存一个接收者负责真正执行客户的请求，这种命令模式是傻瓜式命令，它只负责把客户的命令转发给接收者执行，让请求发起者和接收者之间尽可能解耦</p><p>聪明式命令对象可以直接实现请求，不需要接收者的存在，形式上和策略模式很像，通过使用意图分辨它们，策略模式指向的问题域更小，所有策略目标一致，它们只是达到这个目标的不同手段，命令模式指向的问题域更广，command对象解决的目标更具发散性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;命令模式的应用场景：&quot;&gt;&lt;a href=&quot;#命令模式的应用场景：&quot; class=&quot;headerlink&quot; title=&quot;命令模式的应用场景：&quot;&gt;&lt;/a&gt;命令模式的应用场景：&lt;/h1&gt;&lt;p&gt;有时候向某些对象发送请求，但是不知道请求接收者和发送者是谁，也不知请求操作是</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>函数式组件与类组件的不同</title>
    <link href="https://coloey.github.io/2022/08/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C/"/>
    <id>https://coloey.github.io/2022/08/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6%E4%B8%8E%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%9A%84%E4%B8%8D%E5%90%8C/</id>
    <published>2022-08-24T15:37:14.000Z</published>
    <updated>2022-08-24T15:51:20.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eg"><a href="#eg" class="headerlink" title="eg:"></a>eg:</h1><h2 id="类组件："><a href="#类组件：" class="headerlink" title="类组件："></a>类组件：</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + <span class="built_in">this</span>.props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="built_in">this</span>.showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数式组件："><a href="#函数式组件：" class="headerlink" title="函数式组件："></a>函数式组件：</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProfilePage</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在React中props是不可变的，所以它们永远不会改变，然而,类组件中，this是且永远是可变的</strong></p><p>类组件中this存在的意义：React本身随着时间推移而改变，以便你可以在渲染方法以及生命周期方法中得到最新的实例.</p><p><strong>如果希望类组件中能在一次特定渲染中捕获那一次渲染所用的props或者state，可以使用闭包</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfilePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// Capture the props!</span></span><br><span class="line">    <span class="keyword">const</span> props = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note: we are *inside render*.</span></span><br><span class="line">    <span class="comment">// These aren&#x27;t class methods.</span></span><br><span class="line">    <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      alert(<span class="string">&#x27;Followed &#x27;</span> + props.user);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(showMessage, <span class="number">3000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数式组件想捕获最新的props和state"><a href="#函数式组件想捕获最新的props和state" class="headerlink" title="函数式组件想捕获最新的props和state?"></a>函数式组件想捕获最新的props和state?</h1><p>用useRef</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MessageThread</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [message, setMessage] = useState(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保持追踪最新的值。</span></span><br><span class="line">  <span class="keyword">const</span> latestMessage = useRef(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    latestMessage.current = message;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> showMessage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">&#x27;You said: &#x27;</span> + latestMessage.current);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>总结于：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;eg&quot;&gt;&lt;a href=&quot;#eg&quot; class=&quot;headerlink&quot; title=&quot;eg:&quot;&gt;&lt;/a&gt;eg:&lt;/h1&gt;&lt;h2 id=&quot;类组件：&quot;&gt;&lt;a href=&quot;#类组件：&quot; class=&quot;headerlink&quot; title=&quot;类组件：&quot;&gt;&lt;/a&gt;类组件：&lt;</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>详解useEffect</title>
    <link href="https://coloey.github.io/2022/08/24/%E8%AF%A6%E8%A7%A3useEffect/"/>
    <id>https://coloey.github.io/2022/08/24/%E8%AF%A6%E8%A7%A3useEffect/</id>
    <published>2022-08-24T07:06:04.000Z</published>
    <updated>2022-08-24T15:36:42.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每次渲染都有它自己的Effects"><a href="#每次渲染都有它自己的Effects" class="headerlink" title="每次渲染都有它自己的Effects"></a>每次渲染都有它自己的Effects</h2><p><code>count</code>是某个特定渲染中的常量。事件处理函数“看到”的是属于它那次特定渲染中的<code>count</code>状态值。对于effects也同样如此：</p><p><strong>并不是<code>count</code>的值在“不变”的effect中发生了改变，而是effect 函数本身在每一次渲染中都不相同,概念上它是组件输出的一部分，可以看到属于某次特定渲染的props和state</strong></p><h2 id="Effects的清除"><a href="#Effects的清除" class="headerlink" title="Effects的清除"></a>Effects的清除</h2><p>effects有时候需要有一个清理步骤，目的是消除副作用，<strong>React只会在浏览器绘制后运行effects</strong>，这使得你的应用更流畅，因为大多数effects不会阻塞屏幕的更新，<strong>effects的清除同样被延迟，上一次的effect会在重新渲染后被清除</strong></p><ul><li><strong>React 渲染<code>&#123;id: 20&#125;</code>的UI。</strong></li><li>浏览器绘制。我们在屏幕上看到<code>&#123;id: 20&#125;</code>的UI。</li><li><strong>React 清除<code>&#123;id: 10&#125;</code>的effect。</strong></li><li>React 运行<code>&#123;id: 20&#125;</code>的effect。</li></ul><p><strong>effect的清除不会读取最新的props，它只能读取到定义它的那次渲染中华的prop值</strong></p><h2 id="告诉React去比对你的Effects"><a href="#告诉React去比对你的Effects" class="headerlink" title="告诉React去比对你的Effects"></a>告诉React去比对你的Effects</h2><p>这是为什么你如果想要避免effects不必要的重复调用，你可以提供给<code>useEffect</code>一个依赖数组参数(deps)：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = <span class="string">&#x27;Hello, &#x27;</span> + name;</span><br><span class="line">&#125;, [name]); <span class="comment">// Our deps</span></span><br></pre></td></tr></table></figure><p><strong>这好比你告诉React：“Hey，我知道你看不到这个函数里的东西，但我可以保证只使用了渲染中的<code>name</code>，别无其他。”</strong></p><p>移除依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, [count]);</span><br></pre></td></tr></table></figure><p>定时器会在每一次<code>count</code>改变后清除和重新设定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure><p><strong>React已经知道当前的count,我们需要告知React的仅仅是去递增状态，不管它现在具体是什么值</strong></p><p>解耦来自Actions的更新</p><p>当你写setSomething(something=&gt;…)这种代码时可以考虑使用reducer,reducer可以让你把组件内发生了什么和状态如何响应并更新分开描述</p><p>我们用一个dispatch依赖去替换effect的step依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"><span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">&#x27;tick&#x27;</span> &#125;); <span class="comment">// Instead of setCount(c =&gt; c + step);</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(id);</span><br><span class="line">&#125;, [dispatch]);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">step</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; count, step &#125; = state;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">&#x27;tick&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + step, step &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.type === <span class="string">&#x27;step&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; count, <span class="attr">step</span>: action.step &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React保证dispatch在每次渲染中都是一样的，所以可以在依赖中去掉它，不会引起effect不必要的重复执行，当dispatch时，React只记住了action,它会在下一次渲染中再次调用reducer</p><h2 id="无限重复请求问题："><a href="#无限重复请求问题：" class="headerlink" title="无限重复请求问题："></a>无限重复请求问题：</h2><p>1 没有依赖数组，那么每次渲染都会触发这个副作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    fetchData()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2 设置了依赖数组，但是依赖数组里的变量一直在变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [data,setData] = useState()</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fetchData = <span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetchNewData()</span><br><span class="line">        setData(res.data)</span><br><span class="line">    &#125;</span><br><span class="line">    fetchData()</span><br><span class="line">&#125;,[data])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="定义函数请求"><a href="#定义函数请求" class="headerlink" title="定义函数请求"></a>定义函数请求</h2><ul><li><p>某些函数只在effect中使用，那就在effect中定义</p></li><li><p>某些函数在多个地方使用，就独立定义，最好用useCallBack包裹，并且在依赖数组里把依赖项写全</p><p>eg:</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SearchResults</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [query, setQuery] = useState(<span class="string">&#x27;react&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ✅ Preserves identity until query changes</span></span><br><span class="line">  <span class="keyword">const</span> getFetchUrl = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;https://hn.algolia.com/api/v1/search?query=&#x27;</span> + query;</span><br><span class="line">  &#125;, [query]);  <span class="comment">// ✅ Callback deps are OK</span></span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl();</span><br><span class="line">    <span class="comment">// ... Fetch data and do something ...</span></span><br><span class="line">  &#125;, [getFetchUrl]); <span class="comment">// ✅ Effect deps are OK</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果query不变，getFetchUrl也会保持不变，effect也不会重新运行，反之，query改变了，getFetchUrl也会随之改变</p><p>参考：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;每次渲染都有它自己的Effects&quot;&gt;&lt;a href=&quot;#每次渲染都有它自己的Effects&quot; class=&quot;headerlink&quot; title=&quot;每次渲染都有它自己的Effects&quot;&gt;&lt;/a&gt;每次渲染都有它自己的Effects&lt;/h2&gt;&lt;p&gt;&lt;code&gt;coun</summary>
      
    
    
    
    <category term="React" scheme="https://coloey.github.io/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>发布订阅模式</title>
    <link href="https://coloey.github.io/2022/08/24/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/08/24/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-24T03:58:59.000Z</published>
    <updated>2022-08-24T04:09:26.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发布订阅模式的实现："><a href="#发布订阅模式的实现：" class="headerlink" title="发布订阅模式的实现："></a>发布订阅模式的实现：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.events=&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">on</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.events[type])&#123;</span><br><span class="line">            <span class="built_in">this</span>.events[type]=[]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type].push(handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">addListener</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.on(type,handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">prependListener</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.events[type])&#123;</span><br><span class="line">            <span class="built_in">this</span>.events[type]=[]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type].unshift(handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">removeListener</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.events[type])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type]=<span class="built_in">this</span>.events[type].filter(<span class="function"><span class="params">item</span>=&gt;</span>item !== handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">off</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.removeListener(type,handler)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">emit</span>(<span class="params">type,...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!events[type]||events[type].length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.events[type].forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">Reflect</span>.apply(item,<span class="built_in">this</span>,args);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">once</span>(<span class="params">type,handler</span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">temp</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">            handler(args)</span><br><span class="line">            <span class="built_in">this</span>.off(type,handler)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.on(type,temp)<span class="comment">//为事件注册单次监听器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h1><ul><li>时间解耦</li><li>对象之间解耦</li><li>应用上：可以用在异步编程</li><li>架构上：MVC和MVVM都有发布订阅模式的参与，JavaScript本身是一门基于事件驱动的语言</li></ul><h1 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h1><p>创建订阅者本身需要消耗一定的时间和内存，而且当你订阅一个消息后，如果该消息最后都未发生，那么这个订阅者会始终存储在内存中。另外，发布订阅模式虽然会弱化对向之间的联系，但是过度使用，，对象和对象之间的必要联系会被深埋在背后，导致程序难以维护和理解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发布订阅模式的实现：&quot;&gt;&lt;a href=&quot;#发布订阅模式的实现：&quot; class=&quot;headerlink&quot; title=&quot;发布订阅模式的实现：&quot;&gt;&lt;/a&gt;发布订阅模式的实现：&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://coloey.github.io/2022/08/23/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://coloey.github.io/2022/08/23/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-08-23T03:25:07.000Z</published>
    <updated>2022-08-23T05:18:02.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟代理"><a href="#虚拟代理" class="headerlink" title="虚拟代理"></a>虚拟代理</h1><p>虚拟代理会把一些开销很大的对象，延迟到真正需要它的时候再执行</p><h1 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h1><p>代理负责预加载图片，预加载操作完成后将请求重新交给本体MyImage，降低耦合度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myImage=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ImageNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(ImageNode)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        ImageNode.src = src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image</span><br><span class="line">    img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        myImage(<span class="built_in">this</span>.src)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        myImage(<span class="string">&#x27;file://C:/Users/sevenaeng/Desktop/loading.jpg&#x27;</span>)</span><br><span class="line">        img.src=src</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">proxyImage(<span class="string">&#x27;http://imgcache.qq.com/music/a.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="虚拟代理合并https请求"><a href="#虚拟代理合并https请求" class="headerlink" title="虚拟代理合并https请求"></a>虚拟代理合并https请求</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//虚拟代理合并http请求</span></span><br><span class="line"><span class="keyword">let</span> synchronusFile = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;开始同步文件,id为:&#x27;</span>+id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxySynchronousFile=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache = [],timer;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        cache.push(id)</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        timer=<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            synchronusFile(cache.join(<span class="string">&#x27;,&#x27;</span>))<span class="comment">//两秒内向本体发送需要同步的ID集合</span></span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">            timer=<span class="literal">null</span></span><br><span class="line">            cache.length=<span class="number">0</span><span class="comment">//清空ID集合</span></span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">let</span> checkbox = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;c;c=checkbox[i++])&#123;</span><br><span class="line">    c.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.checked === <span class="literal">true</span>)&#123;</span><br><span class="line">            proxySynchronousFile(<span class="built_in">this</span>.id)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缓存代理："><a href="#缓存代理：" class="headerlink" title="缓存代理："></a>缓存代理：</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存代理计算乘积</span></span><br><span class="line"><span class="keyword">let</span> mult =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">        a= a*<span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//缓存代理工厂</span></span><br><span class="line"><span class="keyword">let</span> createProxyFactory=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cache=&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.join.call(<span class="built_in">arguments</span>,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(args <span class="keyword">in</span> cache)&#123;</span><br><span class="line">            <span class="keyword">return</span> cache[args]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[args]=fn.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxyMult = createProxyFactory(mult)</span><br></pre></td></tr></table></figure><p>代理的意义：</p><p><strong>实现单一职责原则</strong>，指的是一个类，应该仅有一个引起它变化的原因，如果一个对象承担了多个职责，这个对象将会变得巨大，引起它变化的原因也会很多，这些耦合在一起会导致脆弱和低内聚的设计</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟代理&quot;&gt;&lt;a href=&quot;#虚拟代理&quot; class=&quot;headerlink&quot; title=&quot;虚拟代理&quot;&gt;&lt;/a&gt;虚拟代理&lt;/h1&gt;&lt;p&gt;虚拟代理会把一些开销很大的对象，延迟到真正需要它的时候再执行&lt;/p&gt;
&lt;h1 id=&quot;虚拟代理实现图片预加载&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="设计模式" scheme="https://coloey.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>vue和react的区别</title>
    <link href="https://coloey.github.io/2022/08/20/vue%E5%92%8Creact%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://coloey.github.io/2022/08/20/vue%E5%92%8Creact%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-08-20T10:07:13.000Z</published>
    <updated>2022-08-20T10:24:31.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue和React的相同点很多："><a href="#Vue和React的相同点很多：" class="headerlink" title="Vue和React的相同点很多："></a>Vue和React的相同点很多：</h1><p>都使用Virtual DOM</p><p>都使用组件化的思想</p><p>都是响应式，使用MVVM模式</p><p>都有自己的构建工具，Vue的vue-cli,React的create-react-app</p><h1 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h1><h2 id="数据流向不同"><a href="#数据流向不同" class="headerlink" title="数据流向不同"></a>数据流向不同</h2><p>react从诞生开始就推崇单向数据流，而Vue是双向数据流</p><p>Vue基于template模板+Option API/Compnent API,React本质核心只有一个Virtual DOM+Diff算法，Api非常少</p><h2 id="响应式原理不同："><a href="#响应式原理不同：" class="headerlink" title="响应式原理不同："></a>响应式原理不同：</h2><p>Vue依赖收集，自动优化，数据可变</p><p>Vue递归监听data的所有属性，直接修改</p><p>当数据改变时，自动找到引用组件重新渲染</p><p>React:</p><p>React基于状态机，手动优化，数据不可变，需要setState驱动新的State替换旧的State</p><p>当数据改变时，以组件为根目录，默认全部重新渲染</p><h2 id="diff算法不同："><a href="#diff算法不同：" class="headerlink" title="diff算法不同："></a>diff算法不同：</h2><p>两者思维相似，都是基于两个假设：</p><p>不同的组件产生不同的DOM结构，当type不同时，对应DOM操作就是直接销毁老的DOM，创建新的DOM</p><p>同一层次的一组子节点，可以通过唯一的key区分</p><p>源码实现上有区分：</p><p>Vue Diff使用双向指针，边对比边更新DOM</p><p>React主要使用diff队列保存需要更新的DOM，得到patch树，再统一操作批量更新DOM</p><h2 id="事件机制不同"><a href="#事件机制不同" class="headerlink" title="事件机制不同"></a>事件机制不同</h2><p>Vue</p><ul><li><code>Vue原生事件使用标准Web事件</code></li><li>Vue组件自定义事件机制，是父子组件通信基础</li><li>Vue合理利用了snabbdom库的模块插件</li></ul><p>React</p><ul><li><code>React原生事件被包装</code>，所有事件都冒泡到顶层document监听，然后在这里合成事件下发。基于这套，可以跨端使用事件机制，而不是和Web DOM强绑定。</li><li>React组件上无事件，父子组件通信使用props</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue和React的相同点很多：&quot;&gt;&lt;a href=&quot;#Vue和React的相同点很多：&quot; class=&quot;headerlink&quot; title=&quot;Vue和React的相同点很多：&quot;&gt;&lt;/a&gt;Vue和React的相同点很多：&lt;/h1&gt;&lt;p&gt;都使用Virtual DOM</summary>
      
    
    
    
    <category term="Vue" scheme="https://coloey.github.io/categories/Vue/"/>
    
    
  </entry>
  
</feed>
